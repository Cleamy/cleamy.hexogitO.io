<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python[Logging 内置函数]</title>
      <link href="/2024/05/02/logging%E2%80%94%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/"/>
      <url>/2024/05/02/logging%E2%80%94%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="logging—日志处理"><a href="#logging—日志处理" class="headerlink" title="logging—日志处理"></a><strong>logging—日志处理</strong></h1><h2 id="logging-日志级别——默认级别时warning"><a href="#logging-日志级别——默认级别时warning" class="headerlink" title="logging 日志级别——默认级别时warning"></a>logging 日志级别——默认级别时warning</h2><div class="table-container"><table><thead><tr><th style="text-align:left">级别</th><th style="text-align:left">级别数值</th><th style="text-align:left">使用时机</th></tr></thead><tbody><tr><td style="text-align:left">DEBUG</td><td style="text-align:left">10</td><td style="text-align:left">详细信息，常用与调试</td></tr><tr><td style="text-align:left">INFO</td><td style="text-align:left">20</td><td style="text-align:left">程序正常允许过程中产生的一些信息</td></tr><tr><td style="text-align:left">WARNING</td><td style="text-align:left">30</td><td style="text-align:left">警告用户，虽然程序还在允许，但是可能发生错误</td></tr><tr><td style="text-align:left">ERROR</td><td style="text-align:left">40</td><td style="text-align:left">由于更严重的问题，程序已经不能执行一些功能了</td></tr><tr><td style="text-align:left">CRITICAL</td><td style="text-align:left">50</td><td style="text-align:left">严重错误，程序已经不能允许</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 basicConfig() 来指定 日志 的 输出 格式</span></span><br><span class="line"><span class="comment"># filename 为 要将 日志保存 的 文件 </span></span><br><span class="line"><span class="comment"># filemode 为 写入 方式 默认是（默认是 追加方式） ‘w’ 是 先清空 后 写入</span></span><br><span class="line">logging.basicConfig(filename=<span class="string">&quot;./demo.log&quot;</span>,filemode=<span class="string">&quot;w&quot;</span>,level=logging.DEBUG)</span><br><span class="line">logging.debug(<span class="string">&quot;this is debug level&quot;</span>)</span><br><span class="line">logging.info(<span class="string">&quot;this is info level&quot;</span>)</span><br><span class="line">logging.warning(<span class="string">&quot;this is warning level&quot;</span>)</span><br><span class="line">logging.error(<span class="string">&quot;this. error level&quot;</span>)</span><br><span class="line">logging.critical(<span class="string">&quot;this critical level&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">控制台输出：</span></span><br><span class="line"><span class="string">    DEBUG:root:this is debug level</span></span><br><span class="line"><span class="string">    INFO:root:this is info level</span></span><br><span class="line"><span class="string">    WARNING:root:this is warning level</span></span><br><span class="line"><span class="string">    ERROR:root:this. error level</span></span><br><span class="line"><span class="string">    CRITICAL:root:this critical level</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="logging-向日志输出变量"><a href="#logging-向日志输出变量" class="headerlink" title="logging 向日志输出变量"></a>logging 向日志输出变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向日志 输出变量</span></span><br><span class="line">logging.basicConfig(level=logging.DEBUG)</span><br><span class="line">name = <span class="string">&quot;cleamy&quot;</span></span><br><span class="line">age = <span class="string">&quot;20&quot;</span></span><br><span class="line"><span class="comment"># 格式化</span></span><br><span class="line">logging.debug(<span class="string">&quot;name: %s, age: %s &quot;</span> % (name, age))</span><br><span class="line">logging.debug(<span class="string">&quot;name: &#123;&#125;, age: &#123;&#125; &quot;</span>.<span class="built_in">format</span>(name, age))</span><br><span class="line">logging.debug(<span class="string">f&quot;name: <span class="subst">&#123;name&#125;</span>, age: <span class="subst">&#123;age&#125;</span> &quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">控制台输出</span></span><br><span class="line"><span class="string">    DEBUG:root:name: cleamy, age: 20 </span></span><br><span class="line"><span class="string">    DEBUG:root:name: cleamy, age: 20 </span></span><br><span class="line"><span class="string">    DEBUG:root:name: cleamy, age: 20 </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><p>logging 自定义  输出格式</p><p>自定义logging的日志输出方式可以 通过 format 和 datefmt 参数 进行设置</p><p>以下是常见的日志格式意思</p><div class="table-container"><table><thead><tr><th>格式样式</th><th>翻译</th></tr></thead><tbody><tr><td>%(name)s</td><td>记录器(日志通道)的名称</td></tr><tr><td>%(levelno)s</td><td>日志级别编号(DEBUG, INFO, WARNING, ERROR, CRITICAL)</td></tr><tr><td>%(levelname)s</td><td>日志级别名称(DEBUG, INFO, WARNING, ERROR, CRITICAL)</td></tr><tr><td>%(pathname)s</td><td>日志调用的源文件的完整路径名(如果可用)</td></tr><tr><td>%(filename)s</td><td>日志调用的源文件名称</td></tr><tr><td>%(module)s</td><td>日志调用的源文件所在的模块名称</td></tr><tr><td>%(lineno)d</td><td>日志调用的源文件中的代码所在的行数</td></tr><tr><td>%(funcName)s</td><td>方法名称</td></tr><tr><td>%(created)f</td><td>创建日志记录的时间</td></tr><tr><td>%(asctime)s</td><td>创建LogRecord时的文本时间</td></tr><tr><td>%(msecs)d</td><td>创建时间的毫秒部分</td></tr><tr><td>%(thread)d</td><td>Thread ID</td></tr><tr><td>%(threadName)s</td><td>Thread name</td></tr><tr><td>%(process)d</td><td>Process ID</td></tr><tr><td>%(message)s</td><td>日志的消息</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义 日志格式</span></span><br><span class="line">format_log = <span class="string">&quot;%(asctime)s %(levelname)s %(filename)s:%(lineno)s %(message)s&quot;</span></span><br><span class="line"><span class="comment"># 自定义 日志 时间 格式</span></span><br><span class="line">date_format = <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span></span><br><span class="line"><span class="comment"># 自定义 日志格式 输出</span></span><br><span class="line">logging.basicConfig(<span class="built_in">format</span>=format_log,datefmt=date_format,level=logging.DEBUG)</span><br><span class="line">name = <span class="string">&quot;cleamy&quot;</span></span><br><span class="line">age = <span class="string">&quot;20&quot;</span></span><br><span class="line">logging.debug(<span class="string">&quot;name: %s, age: %s &quot;</span> % (name, age))</span><br><span class="line">logging.debug(<span class="string">f&quot;name: <span class="subst">&#123;name&#125;</span>, age: <span class="subst">&#123;age&#125;</span> &quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">控制台输出</span></span><br><span class="line"><span class="string">2024-04-11 19:45:38 DEBUG test_logging_format.py:14 name: cleamy, age: 20 </span></span><br><span class="line"><span class="string">2024-04-11 19:45:38 DEBUG test_logging_format.py:15 name: cleamy, age: 20 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="logging-高级应用"><a href="#logging-高级应用" class="headerlink" title="logging 高级应用"></a>logging 高级应用</h2><h3 id="logging-模块-采用-了-模块化设计，主要包含四种组件"><a href="#logging-模块-采用-了-模块化设计，主要包含四种组件" class="headerlink" title="logging 模块 采用 了 模块化设计，主要包含四种组件"></a>logging 模块 采用 了 模块化设计，主要包含四种组件</h3><p>Loggers：记录器，提供应用程序代码能直接使用</p><p>Handlers：处理器，将就器产生的日志发发送至目的地</p><p>Filters：过滤器，提供更好的粒度控制，决定哪些日志会被输出</p><p>formatters：格式化器，设置日志内容的组成结构和消息字段</p><p>loggers 记录器</p><p>​    1.提供应用程序的调用接口</p><p>​        logger =  logging.getLogger(_<em>name_</em>)</p><p>​    2、决定日志记录的级别</p><p>​        logger.setLevel()</p><p>​    3、将日志内容传递到相关的handles中</p><p>​        logger.addHandler() 和logger.removeHandler()</p><p>Handlers 处理器</p><p>它将日志分发到不同的目的地，可以是文件、标准输出、邮件、或者通过socke、http等协议发送的地方</p><p>​    Streamhandler</p><p>​        标准输出stdout(如显示器)分发器</p><p>​        创建方法: sh = loggin.StreamHandler(stream=None)</p><p>​    FileHandler</p><p>​        将日志保存到磁盘文件的处理器</p><p>​        创建方式：fh = logging.FileHandler(filename,mode=’a’,encoding=’utf-8’)</p><p>​        setFormatter()：设置当前handler对象使用的消息格式</p><p>RotatingFileHandler 多文件日志文件 </p><p>TimedRotatingFileHandler 按照时间进行多个日志文件</p><p>Formatter 格式</p><p>formatter对象用来最终设置日志信息的顺序、结构和内容</p><p>​    其构造方法为</p><p>​    ft = logging.formatter._<em>init_</em>(fmt=None,datafmt=None,style=’%’)</p><p>​    datefmt 默认是 %Y-%m-%d %H:%M:%S 样式</p><p>​    style 参数 默认为 百分符%, 这样表示%(\<dictionary key>)s 格式的 字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用便流程的方式</span></span><br><span class="line"><span class="comment"># 记录器 默认使用 root 作为记录器</span></span><br><span class="line">logger = logging.getLogger(<span class="string">&quot;applog&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(logger)</span><br><span class="line">logger = logging.getLogger()</span><br><span class="line"><span class="comment"># 如果 logger没有设置debug 那么 默认是 warning</span></span><br><span class="line"><span class="comment"># 其 控制器的 日志 级别 小于warning的 化 将 会 不起 作用</span></span><br><span class="line"><span class="comment"># 所以 logger 需要 设置 最低 级别 debug</span></span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"><span class="built_in">print</span>(logger)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理器handler</span></span><br><span class="line">consoleHandler = logging.StreamHandler()</span><br><span class="line">consoleHandler.setLevel(logging.INFO)</span><br><span class="line"><span class="built_in">print</span>(consoleHandler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 文件handler 如果没有 指定 日志 输出 级别 则 默认是 logger 的 级别</span></span><br><span class="line">filehandler = logging.FileHandler(filename=<span class="string">&#x27;demo2.log&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(filehandler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># formater 格式</span></span><br><span class="line">formater = logging.Formatter(<span class="string">&quot;%(asctime)s %(filename)s %(lineno)s %(message)s&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给处理器 设置格式</span></span><br><span class="line">consoleHandler.setFormatter(formater)</span><br><span class="line">filehandler.setFormatter(formater)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录器 添加 处理器</span></span><br><span class="line">logger.addHandler(consoleHandler)</span><br><span class="line">logger.addHandler(filehandler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤器 过滤 logger 名字 是 以 cn.ccb 开头的</span></span><br><span class="line"><span class="comment"># 只有 是 cn.ccb  开头才会打印</span></span><br><span class="line">f = logger.Filter(<span class="string">&quot;ccb&quot;</span>)</span><br><span class="line"><span class="comment"># 只有 logger 的 名师 ccb 开头 才会 向 文件写入日志</span></span><br><span class="line">filehandler.Filter(<span class="string">&quot;ccb&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印 日志 的 代码</span></span><br><span class="line">logger.debug(<span class="string">&quot;this is logger of debug&quot;</span>)</span><br><span class="line">logger.info(<span class="string">&quot;this is logger of info&quot;</span>)</span><br><span class="line">logger.warning(<span class="string">&quot;this is logger of warning&quot;</span>)</span><br><span class="line">logger.error(<span class="string">&quot;this is logger of error&quot;</span>)</span><br><span class="line">logger.critical(<span class="string">&quot;this is logger of critical&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件 的级别没有设置，默认 logger 当前级别</span></span><br><span class="line"><span class="comment"># 控制台 设置为了 infor 级别 只打印 info等以上级别的信息</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">控制台 日志信息</span></span><br><span class="line"><span class="string">2024-04-11 20:49:50,389 loggingFor.py 33 this is logger of info</span></span><br><span class="line"><span class="string">2024-04-11 20:49:50,389 loggingFor.py 34 this is logger of warning</span></span><br><span class="line"><span class="string">2024-04-11 20:49:50,389 loggingFor.py 35 this is logger of error</span></span><br><span class="line"><span class="string">2024-04-11 20:49:50,389 loggingFor.py 36 this is logger of critical</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">文件夹中的 日志信息</span></span><br><span class="line"><span class="string">2024-04-11 20:49:50,389 loggingFor.py 32 this is logger of debug</span></span><br><span class="line"><span class="string">2024-04-11 20:49:50,389 loggingFor.py 33 this is logger of info</span></span><br><span class="line"><span class="string">2024-04-11 20:49:50,389 loggingFor.py 34 this is logger of warning</span></span><br><span class="line"><span class="string">2024-04-11 20:49:50,389 loggingFor.py 35 this is logger of error</span></span><br><span class="line"><span class="string">2024-04-11 20:49:50,389 loggingFor.py 36 this is logger of critical</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自动化测试</title>
      <link href="/2024/05/02/selenium-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/05/02/selenium-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="selenium———-自动化测试"><a href="#selenium———-自动化测试" class="headerlink" title="selenium——— 自动化测试"></a>selenium——— 自动化测试</h1><h2 id="selenium-简介"><a href="#selenium-简介" class="headerlink" title="selenium 简介"></a>selenium 简介</h2><h2 id="主流的web自动化测试工具"><a href="#主流的web自动化测试工具" class="headerlink" title="主流的web自动化测试工具"></a>主流的web自动化测试工具</h2><p>1、QTP：QTP是一个商业化的功能测试工具，支持web测试和，桌面自动化测试</p><p>2、selenium：是一个开源的自动化测试工具，主要是功能测试</p><p>3、Robot framework：是一个基于python可拓展关键字驱动的测试自动化框架</p><h2 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h2><p>​    元素：页面内的元素，代码和元素是一一对应的关系，通过属性 与 属性值（key=value）键值对，进行元素定位</p><h3 id="元素定位方式"><a href="#元素定位方式" class="headerlink" title="元素定位方式"></a>元素定位方式</h3><ul><li>id定位（id值 定位）<ul><li>find_element(By.ID,’path’)</li></ul></li><li>name定位（通过name属性定位）<ul><li>find_element(By.NAME,’path’)</li></ul></li><li>class_name定位（通过class_name定位）<ul><li>find_element(By.Class_Name)</li></ul></li><li>tag_name（标签元素）（tag_name定位</li><li>link_text 定位</li><li>partical_link_text(超链接元素)</li><li>XPath(页面元素中的连接路径)</li><li>Css（）</li></ul><h5 id="Xpath-路径文件"><a href="#Xpath-路径文件" class="headerlink" title="Xpath 路径文件"></a>Xpath 路径文件</h5><ul><li>语法1：//标签名[@属性=’属性值’]</li><li>语法2：//*[@属性=’属性值’]<ul><li>使用相对路径：<ul><li>以//开始，格式：//input 或 //*</li></ul></li><li>使用绝对路径：<ul><li>从/html根标签开始，使用/分隔开</li><li>格式：/html/body/div/fiedset/p[1]/input</li></ul></li></ul></li><li>last()方法<ul><li>语法1：//标签名[last()]</li><li>语法2：//span/ul/li[last()]<ul><li>获取倒数第1个元素</li><li>//标签名[last()-1]</li><li>//span/ul/li[last()-1]</li></ul></li></ul></li><li>and 方法<ul><li>//标签名[@元素名称=’元素值’ and @ 元素名称=’元素值’ ]    <ul><li>实例：//input[@id=’kw’ and @class=’s_ipt’]</li></ul></li></ul></li><li>or 方法<ul><li>//标签名[@元素名称=’元素值’ or @ 元素名称=’元素值’]<ul><li>实例//input[@id=’kw’ or @class=’s_t’]</li></ul></li></ul></li><li>非查找控件<ul><li>//标签名称[@元素名称 != ‘元素值’]<ul><li>实例//input[@class != ‘1111’]</li></ul></li></ul></li><li>not查找<ul><li>//标签名[not(.=’元素值’)]<ul><li>实例：//year[not(.=2005)]</li><li>实例：//div[not(@id=’tab-AndroidVersions’)]<ul><li>year内容不为2005的内容、’.’ 相当于是text()</li></ul></li></ul></li></ul></li><li>模糊匹配<ul><li>//标签名[contains(text(),’内容’)]<ul><li>实例：//div[contains(test(),’更新’)]</li></ul></li></ul></li><li>精确匹配<ul><li>//标签名[text()=’内容’]</li><li>//div[text()=’更新文案’]</li></ul></li><li>使用大小写符号定位<ul><li>//div[@class=’cell’ and text()&gt;’1336’]</li><li>//div[@class=’cell’ and text()&lt;’1336’]</li></ul></li><li>轴方式定位<ul><li>parent::*  表示当前结点的父父结点元素</li><li>ancestor::* 表示当前结点的祖先节点元素</li><li>child::<em> 表示当前节点的子元素 /A/descendant::</em> 表示A的所有后代元素</li><li>self::*  表示当前节点的自身元素</li><li>ancestor-or-self::* 表示当前节点的它的祖先节点元素</li><li>following-sibling::* 表示当前的前面所有兄弟节点</li><li>descentdant-or-self::* 表示当前节点的及他们的后代元素</li><li>preceding-silibing::* 表示当前节点的所有兄弟节点元素</li><li>following::* 表示当前的后序所有元素</li><li>preceding::* 表示当前节点的所有元素</li></ul></li><li>position位置定位<ul><li>定位下一个元素<ul><li>//th[@class=’c-id’ and postion()=1]</li><li>或者使用//th[@class=’c-id’ and postion()&lt;2]</li></ul></li></ul></li></ul><h5 id="CSS策略"><a href="#CSS策略" class="headerlink" title="CSS策略"></a>CSS策略</h5><ul><li>通过id进行css定位<ul><li>实例：self.driver.find_element(By.CSS_SELLECT,’#id_value’)</li></ul></li><li>通过class进行css定位<ul><li>使用classnameCSS样式进行定位<ul><li>实例：self.find_element(By.CSS_SELECT,’.class_value’)</li></ul></li></ul></li><li>tag_name标签名了进行定位<ul><li>直接使用标签名进行元素定位<ul><li>实例：self.find_element(By.CSS_SELECT,’TAG_NAME’)</li></ul></li><li>使用button标签名进行元素定位<ul><li>实例：self.find_element(By.CSS_SELECT,’button’)</li></ul></li></ul></li><li>使用属性选择器：根据元素的属性名和值来选择<ul><li>格式[attribut=value] element[attribute=value]</li><li>self.driver.find_element(By.CSS_SELECT,’[attribute=value]’)</li></ul></li><li>层级选择器：根据元素的父子关系来选择<ul><li>格式：element1 &gt;  element2<ul><li>通过element1 来定位 element2 ，并且element2必须是直接子元素<ul><li>实例：self.driver.find_element(By.CSS_SELECT,’p[id=’p1’] &gt;  input’)</li><li>解释：使用p1 的 直接 子元素</li></ul></li></ul></li><li>格式：element1 element3<ul><li>通过element1 来定位element3<ul><li>实例：self.driver.find_element(By.CSS_SELECT,’p[id=”p1”] input’)</li><li>解释：使用 p1 后代元素 input</li></ul></li><li>层级选择器 父级层级关系<ul><li>实例：self.driver.find_element(By.CSS_SELECT,’[id=”id_value”] &gt; [placeholder=”请设置用户名”]’)</li></ul></li><li>祖辈层级关系<ul><li>self.driver.find_element(By.CSS_SELECT,’form [placeholder=”请设置用户名”])</li></ul></li><li>父子层级关系，使用祖辈层级方式<ul><li>实例：self.driver.find_element(By.CSS_SELECT,’[id=’id_value] [placeholder=”请选择用户名”]’)</li></ul></li></ul></li><li>格式：层级关系定位</li><li>element,element : div,p  选择所有<div> 元素和所有<p> 元素</li><li>element element : div p 选择<div> 元素 内部的所有<p> 元素包括子代元素</li><li>element&gt;element : div&gt;p 选择父元素为<div> 元素的所有<p> 元素。只包括子代</li><li>element+element : div+p 选择父元素为<div> 元素之后的所有<p> 元素 ，同辈元素</li></ul></li><li>css定位延伸<ul><li>含义<ul><li>^= : 开头含</li><li>$= : 结尾含</li><li>*= : 内容含</li><li>~= : 由多个空格隔开，匹配其中一个子的方法</li></ul></li><li>案例<ul><li>input[type^=’p’] type 属性以p字母开头的元素</li><li>input[type$=’d’] type 属性以d字母结束的元素</li><li>input[type*=’w’] type 属性包含w字母的元素</li><li>input[class~=’btn’] class 属性 包含多个空格值</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> selenium </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于ssm框架学习</title>
      <link href="/2024/05/02/ssm/"/>
      <url>/2024/05/02/ssm/</url>
      
        <content type="html"><![CDATA[<h1 id="1、Mybatis环境部署"><a href="#1、Mybatis环境部署" class="headerlink" title="1、Mybatis环境部署"></a>1、Mybatis环境部署</h1><p>1、创建maven工程mybatis<br>2、配置相关依赖<br>3、添加  </p><p>2、MyBatis工作原理  </p><p>3.1 动态sql中的元素<br>元素</p><p><if> : 判断 语句，用于条件判断</p><p><choose>(<when><otherwise>): 相当于 java 中switch</p><p><where> ： 简化sql 语句中 where 判断</p><p><trim>： 可以灵活去除多余的关键字</p><p><set> : 用于sql语句的动态更新</p><p><foreach> ：循环语句，常用于in 语句 等列举条件</p><h3 id="mybatis-的-关联映射"><a href="#mybatis-的-关联映射" class="headerlink" title="mybatis 的 关联映射"></a>mybatis 的 关联映射</h3><ul><li>关联映射<font color="pink">- 了解数据表之间的三种关系- 了解对象之间的三种关系- 熟悉关联关系中的嵌套查询和嵌套结果- 掌握一对一关联映射- 多对多关联映射- 熟悉mybatis的缓存机制  </font></li></ul><p>通过关联映射可以很好的处理表与表之间、对象与对象之间的关系的关联映射关系</p><h5 id="1-一对一关系"><a href="#1-一对一关系" class="headerlink" title="1.一对一关系"></a>1.一对一关系</h5><pre><code>* 就是在类中定义与之关联的类的对象作为属性* 例如：A类中定义B类 对象b 作为 属性* B类中定义A 类 对象a 作为属性</code></pre><font size="3" color="pink">伪代码：</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentA</span>&#123; <span class="comment">// 学生</span></span><br><span class="line">    StudentCarB b;<span class="comment">// 学生卡</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentCardB</span>&#123; <span class="comment">// 学生卡</span></span><br><span class="line">    StudentA a;<span class="comment">// 学生</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>- 查询方法    - 1. 嵌套查询方法        - 该方法需要执行多条sql查询语句<br>并将sql查询语句进行关联    - 2. 嵌套结果集查询方法        - 该方法需要先写出sql语句的联合查询语句，<br>将多个表进行组合查询，<br>并将查询后的结果集的值 进行 一对一 映射        - 更加推荐直接使用嵌套结果集的方式    - 3. 在mybatis 中 使用\<association>元素进行 多表之间的查询结果映射，<br>使用结果映射（resultMap）的方法##### 2.一对多关系    * 就是一个A类对象对应多个B类对象的情况    * 列如，定义在A类中，定义一个B类对象的 集合 作为A类的属性    * 在B类中，定义A类对象a 作为B类的属性<font size="3" color="pink">伪代码：</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassesA</span>&#123; <span class="comment">// 班级</span></span><br><span class="line">    List&lt;StudentB&gt; b;<span class="comment">// 班级学生集合</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentB</span>&#123; <span class="comment">// 学生</span></span><br><span class="line">    ClassesA a; <span class="comment">// 所属班级</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>- 查询方法    - 1. 嵌套查询方法        - 该方法需要执行多条sql查询语句<br>并将sql查询语句进行关联    - 2. 嵌套结果集查询方法        - 该方法需要先写出sql语句的联合查询语句，<br>将多个表进行组合查询，<br>并将查询后的结果集的值 进行 一对一 映射        - 更加推荐直接使用嵌套结果集的方式    - 3. 在mybatis 中 使用\<collection>元素进行 多表之间的查询结果映射，<br>使用结果映射（resultMap）的方法        - 其中ofType属性可以看作是集合的泛型类型##### 3.多对多关系     * 在两个相互关联的类中，都可以定义多个与之关联的类的对象    *例如：在 A类中定义 B类对象的集合作为属性    *在B类中定义，A类对象的集合作为属性<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span>&#123; <span class="comment">// 订单</span></span><br><span class="line">    List&lt;Commondity&gt; b;<span class="comment">// 多种购物商品</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Commodity</span>&#123; <span class="comment">// 商品</span></span><br><span class="line">    List&lt;Orders&gt; a;<span class="comment">// 多个订单 购物 该商品</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>##### mybatis缓存机制1. <font color="pink">mybatis 的一级缓存</font><h4 id="mybatis-注解开发"><a href="#mybatis-注解开发" class="headerlink" title="mybatis 注解开发"></a>mybatis 注解开发</h4><ol><li>掌握基于注解的单表增删改查</li><li>熟悉基于注解的一对一关联查询</li><li>熟悉基于注解的一对多关联查询</li><li>熟悉基于注解的多对多关联查询</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2024/05/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2024/05/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<!-- ---title: 文章标题date: 创建日期updated: 更新日期cover: 文章封面description: 文章描述swiper_index: 1 #置顶轮播图顺序，非负整数，数字越大越靠前--- --><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="时间复杂度、空间复杂度"><a href="#时间复杂度、空间复杂度" class="headerlink" title="时间复杂度、空间复杂度"></a>时间复杂度、空间复杂度</h2><p>算法时间复杂度以算法中基本操作重复执行的次数（简称 频度）作为算法的时间度量，只需要打字计算出相应的数量级即可</p><p>如：</p><p>O(1) &lt; O(log2 (n)) &lt; O(n) &lt; O(nlog2 (n)) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt;O(n^n)</p><p>大o表达式 T(n) = O(表达式)     n —&gt; 表示问题规模</p><ol><li>加法规则：多项相加，保留最高阶项，并将系数化为1<ol><li>T(n) = n^3+n^2    +nlog2(n) + n log2(n) = n^3</li></ol></li><li>乘法规则：多项相乘都保留，并将系数化为1<ol><li>T(n)=n*n^2 = n^3  </li><li>T(n) = 2n^3*3n^4 = n^7</li></ol></li><li>加法乘法混合规则：小括号再乘法规则而，最后加法规则<ol><li>T(n)=n^2*n^3+n^3 = n^5 + n^3 = n^5</li><li>T(n)=(2n+3)<em>(2n^4+4) = 2(n)\</em>2(n^4)=n^5</li></ol></li></ol><p><img src="D:\My file\每日学习记录\pythonMD\i时间复杂度.png" alt=""></p><ol><li><p>T(n) = o(1)</p></li><li><p>1 2 4 8 16 32….n</p><p>​    2^x = n    </p><p>​        x = log2(n) —-&gt; T(n) =o( log2(n))</p></li><li><p>T(n)= 1+1+n+1+n+n = O(n)</p></li><li><p>T(n)=o(n)*o(log2(n)) = o(nlog2(n))</p></li><li><p>T(n)=o(n)*o(n)=o(n^2)</p></li><li><p>T(n)=o(n)*o(n)*o(n)=o(n^3)</p></li></ol><p>空间复杂度 o(1) , o(n), o(n^2)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//,,,,</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= n) &#123;</span><br><span class="line">    i ++ ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 空间 复杂度 与 内存空间有关 </span></span><br><span class="line"><span class="comment">// ↑ 空间复杂度为 o(1) 与 n 的 增加 不会改变 内存的 占用</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> [][] x = new <span class="type">int</span>[n][n];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++ )&#123;</span><br><span class="line">        x[i][j] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里的 空间 复杂度为 o(n*n)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>渐进符号</p><p>渐进上界</p><p>渐进下界</p><p>渐进紧致界</p><p>递归时间复杂度  空间复杂度</p><p>递归的时间复杂度 = 递归的次数*每次递归的时间复杂度     </p><p>递归的空间复杂度 = 递归的次数*每次递归的空间复杂度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n * f(n<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 递归的时间度 = 递归的次数*每次递归的时间复杂度 </span></span><br><span class="line"><span class="comment">// T(n) = n * O(1) = o(n)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f(<span class="type">int</span> n) &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= n) &#123;</span><br><span class="line">        <span class="comment">// 时间复杂度会变化</span></span><br><span class="line">        <span class="comment">// n , n = n-1 , n = n -2</span></span><br><span class="line">        <span class="comment">// a1+an/2 == (n + 1)n/2 = n^2/2 + 1/2 = n^2</span></span><br><span class="line">        <span class="comment">// T(n) = n^2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n * f(n<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 递归的时间度 = 递归的次数*每次递归的时间复杂度 </span></span><br><span class="line"><span class="comment">// 递归的时间复杂度会改变</span></span><br><span class="line"><span class="comment">// T(n) = O(n^2)*O(n) = O(n^3)</span></span><br></pre></td></tr></table></figure><p>主方法：求解递归式的快速方法</p><p>T(n) = aT(n/b) + f(n),a&gt;=1 b&gt;1 f(n) 是渐进的正函数</p><ol><li>诺有常数 e &gt; 0 由 f(n) = O(n^logb(a-e)) 则 T(n)  = Q(n^logb(a))<ol><li>T(n) = 9T(n/3) + n<ol><li>a = 9, b= 3 f(n) = n ,logb(a) = 2 ,f(n)  = O(n^logb(a-e)) 其中 e = 1，则T(n) = Q(n^logb(a) = Q(n^2))</li></ol></li></ol></li><li>若f(n) = Q(n^logb(a)<em>((lg^k)n)) 则 T(n) = Q(n^logb(a)\</em>lgb(a))<ol><li>T(n) = T(2n/3)+1<ol><li>a=1 , b = 3/2 f(n) = 1, logb(a) = 0 ,f(n ) =Q(n^logb(a)(lg^k)n),其中 k  =0 则 T(n) = Q(nn^logb(a(lg^(k+1))n=Q(lgn)</li></ol></li></ol></li></ol><h2 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h2><p>​        线性结构是一种基本的数据结构，主要用于对客观时间中具有单一前驱和后继的数据关系，进行描述、线性结构的特点是数据元素之间呈现一种线性关系，级元素之间一个接一个排列</p><h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><p>​    线性表是一种最常用的线性结构，常用于顺序存储和链式存储，主要的基本操作是插入、删除和查找</p><ol><li><p>线性表的定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、一个线性并表示m(N&gt;=0)个元素的有限序列，通常表示为（a1,a2,a3,a4)</span><br><span class="line">非空线性表的特点</span><br><span class="line">1、存在唯一的一个一个称作“第一个”的元素</span><br><span class="line">2、存在唯一的一个称作“最后一个”的元素</span><br><span class="line">3、除第一i给元素外，序列中的每一个元素都有一个直接前驱</span><br><span class="line">4、除最后一个元素之外，序列中的每一个元素都一个直接后驱</span><br></pre></td></tr></table></figure></li><li><p>线性表的存储结构</p><ol><li>顺序存储<ol><li>插入元素的需要移动元素的期望值 为 E = n/2</li><li>删除元素的需要移动给元素的期望值 为 E = n-1/2</li></ol></li></ol></li></ol><p>​        插入：时间复杂度 最好o(1) 最坏o(n) 平均o(n)</p><p>​        删除：时间复杂度 最好o(1) 最坏o(n) 平均o(n)</p><p>​        查找：时间复杂度 最好o(1) 最坏o(1)  平均o(1)</p><h4 id="线性表-1"><a href="#线性表-1" class="headerlink" title="线性表"></a>线性表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">：<span class="comment">// 代码方式 java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeQuenceList</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">// 容量</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> [] a;</span><br><span class="line">    <span class="type">int</span> n; <span class="comment">// 表长</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        a = <span class="keyword">new</span> <span class="title class_">init</span>[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N / <span class="number">2</span>; i ++ )</span><br><span class="line">            System.out.print([i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> &#123;</span><br><span class="line">        <span class="type">SequenceList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SequenceList</span>();</span><br><span class="line">        list.init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是否为 合法 下不表</span></span><br><span class="line">       <span class="keyword">if</span> (k &lt; <span class="number">1</span> || k &gt; n + <span class="number">1</span>) <span class="keyword">return</span> </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n; ; i--) &#123;</span><br><span class="line">            a[i] =  a[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        a[k - <span class="number">1</span>] = x;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> （ k &lt; <span class="number">1</span>|| k &gt; n) <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k; i &lt; n; i++) &#123;</span><br><span class="line">            a[i-<span class="number">1</span>] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getElement</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; <span class="number">1</span> || k &gt; n) reutrn -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> a[k-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><pre><code> 2. 链式存储(头节点和不带头节点)      1. 概念 通过指针进行连接起来的节点，来存储数据元素，基本的节点：数据域+指针域      2. 链表(无表头)插入的时间复杂度：最好o(1) 最坏 o(n) 平均o(n)      3. 链表(有表头)插入的时间复杂度：最好o(1) 最坏 o(n) 平均o(n)      4. 链表(无表头)删除的时间复杂度：最好o(1) 最坏o(n) 平均o(n)</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    Node next;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span> <span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data=data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不带头节点的 初始化方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkList</span>&#123;</span><br><span class="line">    Node list;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">initList</span><span class="params">()</span> &#123;</span><br><span class="line">        list = <span class="literal">null</span>;</span><br><span class="line">        list.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历链表</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printList</span><span class="params">(Node list)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">iter</span> <span class="operator">=</span> list;</span><br><span class="line">        <span class="keyword">while</span>(iter!=<span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.print(iter.data + <span class="string">&quot; - &quot;</span>);</span><br><span class="line">            iter = iter.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 插入</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> k,Node list,<span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; <span class="number">1</span> || k &gt; length + <span class="number">1</span> ) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">new_node</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(data);  </span><br><span class="line">      <span class="keyword">if</span> (k &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> list;</span><br><span class="line">        <span class="keyword">if</span> ( k == <span class="number">1</span>) &#123;</span><br><span class="line">            new_node.next = p.next;</span><br><span class="line">            p.next = new_node;</span><br><span class="line">            <span class="keyword">return</span> True;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  无头指针 [1,2,4,5,6,7]</span></span><br><span class="line">        <span class="comment">// 0 1 2 3 4 5 </span></span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        new_node.next = p.next;</span><br><span class="line">        p.next = new_node;</span><br><span class="line">        length ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Node list, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k&gt;length||k&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (k==<span class="number">1</span>) &#123;</span><br><span class="line">            list=list.next;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> list;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; k - <span class="number">1</span>)&#123; </span><br><span class="line">        i++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        length --;</span><br><span class="line">        reutnr <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查找</span></span><br><span class="line">    Node <span class="title function_">getElement</span><span class="params">(<span class="type">int</span> k,list)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k&gt;length||k&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> list</span><br><span class="line">        <span class="title function_">whil</span><span class="params">(i &lt; k)</span> &#123;</span><br><span class="line">            i ++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带头节点的 单链表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeadLinkLists</span>()&#123;</span><br><span class="line">    Node list;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">initList</span><span class="params">()</span> &#123;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        list.next = head;</span><br><span class="line">        list.data = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">// 遍历链表</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printList</span><span class="params">(Node list)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">iter</span> <span class="operator">=</span> list.next;</span><br><span class="line">        <span class="keyword">while</span>(iter!=<span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.print(iter.data + <span class="string">&quot; - &quot;</span>);</span><br><span class="line">            iter = iter.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 插入</span></span><br><span class="line">    Boolean <span class="title function_">insert</span> <span class="params">(Node list,<span class="type">int</span> k, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="comment">// 要插入的 数据</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">new_node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        new_node.data = data;</span><br><span class="line">        new_node.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 获取 头节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> list;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//  头节点 [1,2,3,5,6] --&gt; 5 个元素  </span></span><br><span class="line">        <span class="comment">//    0 1 2 3 4   </span></span><br><span class="line">        <span class="keyword">if</span> (k &gt; list.data + <span class="number">2</span> || k &lt; <span class="number">1</span>) <span class="keyword">return</span> False;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">null</span>) <span class="keyword">return</span> False;</span><br><span class="line">        <span class="keyword">while</span> (p == <span class="literal">null</span> || i &gt;= k) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( i == K-<span class="number">1</span> )&#123;</span><br><span class="line">            new_node.next = p.next;</span><br><span class="line">            p.next = new_node;</span><br><span class="line">                p.data ++;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(None list,<span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k&gt;list.data || k&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span>  <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> list;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; k-<span class="number">1</span> &amp;&amp; p != <span class="literal">null</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">s</span> <span class="operator">=</span> p.next ;</span><br><span class="line">        p.next = s.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询</span></span><br><span class="line">    Node <span class="title function_">getElement</span><span class="params">(<span class="type">int</span> k,Node list)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k&gt;list.data||k&lt;=<span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 有头[1,23,4,5]</span></span><br><span class="line">        <span class="comment">//    0 1 2 3</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; k) &#123;</span><br><span class="line">            i ++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">include &lt;stdio.h&gt;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">/*  单链表插入和删除  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义头节点 */</span></span><br><span class="line">Node* <span class="title function_">initList</span><span class="params">()</span> &#123;</span><br><span class="line">    Node* <span class="built_in">list</span> = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="built_in">list</span>-&gt;data = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">list</span>-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  头插法 添加数据 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">headInsert</span><span class="params">(Node* <span class="built_in">list</span>, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    Node* node = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    node-&gt;next = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">    <span class="built_in">list</span>-&gt;next = node;</span><br><span class="line">    <span class="built_in">list</span>-&gt;data++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 尾插法 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">tailInsert</span><span class="params">(Node* <span class="built_in">list</span>, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="comment">// 保存 头结点</span></span><br><span class="line">    Node* head = <span class="built_in">list</span>;</span><br><span class="line">    Node* node = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 将链表遍历到 最后一个 结点</span></span><br><span class="line">    <span class="built_in">list</span> = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">list</span>-&gt;next)&#123;</span><br><span class="line">        <span class="built_in">list</span> = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将链表最后一个结点的next 添加为 node</span></span><br><span class="line">    <span class="built_in">list</span>-&gt;next = node;</span><br><span class="line">    head-&gt;data++;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*  删除元素 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete</span><span class="params">(Node* <span class="built_in">list</span>, <span class="type">int</span> data )</span> &#123;</span><br><span class="line">    <span class="comment">// 前结点</span></span><br><span class="line">    Node* pre = <span class="built_in">list</span>;</span><br><span class="line">    <span class="comment">// 当前结点</span></span><br><span class="line">    Node* current = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (current!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;data == data) &#123;</span><br><span class="line">            pre-&gt;next = current-&gt;next;</span><br><span class="line">            <span class="comment">// 释放控件 </span></span><br><span class="line">            <span class="built_in">free</span>(current);</span><br><span class="line">            <span class="built_in">list</span>-&gt;data--;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 指针下移</span></span><br><span class="line">            pre = current;</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  打印链表 */</span></span><br><span class="line"><span class="type">void</span>  <span class="title function_">printList</span><span class="params">(Node* <span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">list</span> = <span class="built_in">list</span>-&gt;next; </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">list</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">list</span>-&gt;data);</span><br><span class="line">        <span class="built_in">list</span> = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Node* <span class="built_in">list</span> = initList();</span><br><span class="line">    headInsert(<span class="built_in">list</span>,<span class="number">1</span>);</span><br><span class="line">    headInsert(<span class="built_in">list</span>,<span class="number">2</span>);</span><br><span class="line">    headInsert(<span class="built_in">list</span>,<span class="number">3</span>);</span><br><span class="line">    tailInsert(<span class="built_in">list</span>, <span class="number">1</span>);</span><br><span class="line">    tailInsert(<span class="built_in">list</span>, <span class="number">2</span>);</span><br><span class="line">    tailInsert(<span class="built_in">list</span>, <span class="number">3</span>);</span><br><span class="line">    printList(<span class="built_in">list</span>);</span><br><span class="line">    delete(<span class="built_in">list</span>, <span class="number">1</span>);</span><br><span class="line">    delete(<span class="built_in">list</span>, <span class="number">2</span>);</span><br><span class="line">    printList(<span class="built_in">list</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">list</span>-&gt;data);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="循环单链表"><a href="#循环单链表" class="headerlink" title="循环单链表"></a>循环单链表</h4><p>链表的最后一个元素的next 指向 头节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 带头节点的 单链表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeadLinkLists</span>()&#123;</span><br><span class="line">    Node list;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">initList</span><span class="params">()</span> &#123;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        list.next = head;</span><br><span class="line">        list.data = <span class="number">0</span>;</span><br><span class="line">        head.next = list;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">// 遍历链表</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printList</span><span class="params">(Node list)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">iter</span> <span class="operator">=</span> list.next;</span><br><span class="line">        <span class="keyword">while</span>(iter!=list) &#123;</span><br><span class="line">            System.out.print(iter.data + <span class="string">&quot; - &quot;</span>);</span><br><span class="line">            iter = iter.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 插入</span></span><br><span class="line">    Boolean <span class="title function_">insert</span> <span class="params">(Node list,<span class="type">int</span> k, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="comment">// 要插入的 数据</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">new_node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        new_node.data = data;</span><br><span class="line">        <span class="comment">// 获取 头节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> list;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//  头节点 [1,2,3,5,6] --&gt; 5 个元素  </span></span><br><span class="line">        <span class="comment">//    0 1 2 3 4   </span></span><br><span class="line">        <span class="keyword">if</span> (k &gt; list.data + <span class="number">2</span> || k &lt; <span class="number">1</span>) <span class="keyword">return</span> False;</span><br><span class="line">        <span class="keyword">while</span> ( i &gt;= k) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( i == K-<span class="number">1</span> )&#123;</span><br><span class="line">            new_node.next = p.next;</span><br><span class="line">            p.next = new_node;</span><br><span class="line">                p.data ++;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(None list,<span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k&gt;list.data || k&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span>  <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> list;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; k-<span class="number">1</span> &amp;&amp; p != <span class="literal">null</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">s</span> <span class="operator">=</span> p.next ;</span><br><span class="line">        p.next = s.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询</span></span><br><span class="line">    Node <span class="title function_">getElement</span><span class="params">(<span class="type">int</span> k,Node list)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k&gt;list.data||k&lt;=<span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 有头[1,23,4,5]</span></span><br><span class="line">        <span class="comment">//    0 1 2 3</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; k) &#123;</span><br><span class="line">            i ++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h4><p>双链表是存在一个指向前节点pre 和 下节点next</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span> <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pre</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化双向链表</span></span><br><span class="line">Node* <span class="title function_">initialList</span><span class="params">()</span> &#123;</span><br><span class="line">    Node* L = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    L-&gt;data = <span class="number">0</span>;</span><br><span class="line">    L-&gt;pre = <span class="literal">NULL</span>;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头插法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">headInsert</span><span class="params">(Node* L, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    Node* node = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    Node* head = L;</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;data == <span class="number">0</span>)&#123;</span><br><span class="line">        node-&gt;next = L-&gt;next;</span><br><span class="line">        node-&gt;pre = L;</span><br><span class="line">        L-&gt;next = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 链表为空</span></span><br><span class="line">        node-&gt;pre = L;</span><br><span class="line">        node-&gt;next = L-&gt;next;</span><br><span class="line">        node-&gt;next-&gt;pre = node;</span><br><span class="line">        L-&gt;next = node;</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;data++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 尾插法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">tailInsert</span><span class="params">(Node* L, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    Node* head = L;</span><br><span class="line">    Node* node =  (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(head-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    node-&gt;pre = head;</span><br><span class="line">    node-&gt;next = head-&gt;next;</span><br><span class="line">    head-&gt;next = node;    </span><br><span class="line">    L-&gt;data++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除操作</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">delete</span><span class="params">(Node* L, <span class="type">int</span> data)</span>&#123;</span><br><span class="line">    Node* head = L;</span><br><span class="line">    Node* current = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(current)&#123;</span><br><span class="line">        <span class="comment">// 判断当前的值 是否 要查找的值</span></span><br><span class="line">        <span class="keyword">if</span>(current-&gt;data == data)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,data);</span><br><span class="line">            <span class="comment">// 前一个结点 指向 后一个结点</span></span><br><span class="line">            current-&gt;pre-&gt;next = current-&gt;next;</span><br><span class="line">            <span class="comment">// 后一个结点  指向 前一个结点</span></span><br><span class="line">            current-&gt;next-&gt;pre = current-&gt;pre;</span><br><span class="line">            <span class="built_in">free</span>(current);</span><br><span class="line">            <span class="keyword">return</span> TRUE;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printLinkList</span><span class="params">(Node*L)</span> &#123;</span><br><span class="line">    Node* node = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(node!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; -&gt;&quot;</span>,node-&gt;data);</span><br><span class="line">        node = node-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* code */</span></span><br><span class="line">    Node* L = initialList();</span><br><span class="line">    headInsert(L,<span class="number">1</span>);</span><br><span class="line">    headInsert(L,<span class="number">2</span>);</span><br><span class="line">    headInsert(L,<span class="number">3</span>);</span><br><span class="line">    tailInsert(L,<span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 3 2 1 3</span></span><br><span class="line">    <span class="comment">// 3 2 3</span></span><br><span class="line">    delete(L,<span class="number">2</span>);</span><br><span class="line">    printLinkList(L);</span><br><span class="line">    tailInsert(L,<span class="number">4</span>);</span><br><span class="line">    tailInsert(L,<span class="number">5</span>);</span><br><span class="line">    printLinkList(L);</span><br><span class="line">    delete(L, <span class="number">3</span>);</span><br><span class="line">    <span class="type">int</span> a = delete(L, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a);</span><br><span class="line">    printLinkList(L);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;next&quot;</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="循环双链表"><a href="#循环双链表" class="headerlink" title="循环双链表"></a>循环双链表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 双循环结构</span></span><br><span class="line"><span class="comment">// 定义双链表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pre</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化链表</span></span><br><span class="line">Node* <span class="title function_">initialLink</span><span class="params">()</span>&#123;</span><br><span class="line">    Node* L = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    L-&gt;data = <span class="number">0</span>;</span><br><span class="line">    L-&gt;next = L;</span><br><span class="line">    L-&gt;pre = L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头插法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">headInsert</span><span class="params">(Node* L, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    Node* node = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    node-&gt;data=data;</span><br><span class="line">    <span class="keyword">if</span>(data == <span class="number">0</span>)&#123;</span><br><span class="line">        node-&gt;next=L;</span><br><span class="line">        node-&gt;pre=L;</span><br><span class="line">        L-&gt;next=node;</span><br><span class="line">        L-&gt;pre=node;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        node-&gt;next = L-&gt;next;</span><br><span class="line">        node-&gt;pre = L;</span><br><span class="line">        L-&gt;next-&gt;pre = node;</span><br><span class="line">        L-&gt;next = node;</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;data++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printLinkList</span><span class="params">(Node* L)</span>&#123;</span><br><span class="line">    Node* head =L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(head != L)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>,head-&gt;data);</span><br><span class="line">        head=head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">tailInsert</span><span class="params">(Node* L,<span class="type">int</span> data)</span>&#123;</span><br><span class="line">    Node* node = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    Node* n = L-&gt;next;</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    <span class="keyword">while</span>(n-&gt;next!=L)&#123;</span><br><span class="line">        n=n-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;next = L;</span><br><span class="line">    node-&gt;pre = n;</span><br><span class="line">    n-&gt;next = node;</span><br><span class="line">    L-&gt;pre = node;</span><br><span class="line">    L-&gt;data++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 删除操作</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">delete</span><span class="params">(Node* L, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    Node* node = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(node != L)&#123;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;data == data)&#123;</span><br><span class="line">            node-&gt;pre-&gt;next = node-&gt;next;</span><br><span class="line">            node-&gt;next-&gt;pre = node-&gt;pre;</span><br><span class="line">            <span class="built_in">free</span>(node);</span><br><span class="line">            L-&gt;data--;</span><br><span class="line">            <span class="keyword">return</span> TRUE;</span><br><span class="line">        &#125;</span><br><span class="line">        node = node-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    Node* L=initialLink();</span><br><span class="line">    headInsert(L, <span class="number">1</span>);</span><br><span class="line">    headInsert(L, <span class="number">2</span>);</span><br><span class="line">    headInsert(L, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;next\n&quot;</span>);</span><br><span class="line">    tailInsert(L, <span class="number">3</span>);</span><br><span class="line">    tailInsert(L, <span class="number">2</span>);</span><br><span class="line">    tailInsert(L, <span class="number">1</span>);</span><br><span class="line">    printLinkList(L);</span><br><span class="line">    delete(L,<span class="number">1</span>);</span><br><span class="line">    delete(L,<span class="number">3</span>);</span><br><span class="line">    printLinkList(L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>栈的定义：栈式只能通过访问它的一端来实现数据存储和检索的一种线性表数据结构。栈的修改是按照先进后出，先进后出(Last In First Out, LIFO)线性表，</p><p>插入和删除的一端称为栈顶，另一端称为栈底，不含元素的栈称为空栈</p><p>栈的基本运算（可以使用递归）</p><ul><li>初始化栈 initStack(s) 创建以空栈</li><li>判栈空 isEmpty(S) 单栈S 为 空 是 返回 真，则 返回假</li><li>入栈 push(s)：将元素x加入栈顶，并更新栈顶指针</li><li>出栈pop：将栈顶元素从栈中删除，并更新栈顶指针，若需要得到栈顶元素的值，可见pop定为一个返回栈顶元素的函数</li><li>读栈顶元素top（s）：返回栈顶元素的值，但是不修改栈顶指针</li></ul><h4 id="栈的顺序存储"><a href="#栈的顺序存储" class="headerlink" title="栈的顺序存储"></a>栈的顺序存储</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">initStack</span>&#123;</span><br><span class="line">    <span class="type">final</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">5</span></span><br><span class="line">    <span class="type">int</span> [] a = <span class="keyword">new</span> <span class="title class_">int</span>[max];</span><br><span class="line">    <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Stack s)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.top==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">push</span><span class="params">(Stack s,<span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.top&gt;=s.max) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        s.a[top] = c;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">pop</span><span class="params">(Stack s)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty(s)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        System.out.print(<span class="string">&quot;pop &quot;</span>+s.a[top]);</span><br><span class="line">        s.a[top-<span class="number">1</span>] = <span class="literal">null</span>;</span><br><span class="line">        top --;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">Top</span><span class="params">(Stack s )</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty(s)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        System.out.print(<span class="string">&quot;top&quot;</span>+ s.a[top-<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> a.[top-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="栈的链式存储"><a href="#栈的链式存储" class="headerlink" title="栈的链式存储"></a>栈的链式存储</h4><p>用链表作为存储结构，由栈中元素的插入和删除仅在栈顶一端进行，因此不必设置头指针，头指针就是栈顶指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">/* 栈的实现 —————— 先进后出 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化栈 */</span></span><br><span class="line">Node* <span class="title function_">initStack</span><span class="params">()</span> &#123;</span><br><span class="line">    Node* S = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    S-&gt;data = <span class="number">0</span>;</span><br><span class="line">    S-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈 是否为空</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isEmpty</span><span class="params">(Node* S)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;data == <span class="number">0</span>|| S-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取栈顶元素</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getTop</span><span class="params">(Node* S)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty(S))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> S-&gt;next-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 出栈</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pop</span><span class="params">(Node* S)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty(S))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        Node* node = S-&gt;next;</span><br><span class="line">        <span class="type">int</span> data = node-&gt;data;</span><br><span class="line">        S-&gt;next = node-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(node);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如栈</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(Node* S, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    Node* node = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    node-&gt;data=data;</span><br><span class="line">    node-&gt;next=S-&gt;next;</span><br><span class="line">    S-&gt;next = node;</span><br><span class="line">    S-&gt;data++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printStack</span><span class="params">(Node* S)</span> &#123;</span><br><span class="line">    Node* node = S-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(node) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>, node-&gt;data);</span><br><span class="line">        node = node-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    Node* S = initStack();</span><br><span class="line">    push(S,<span class="number">1</span>);</span><br><span class="line">    push(S,<span class="number">2</span>);</span><br><span class="line">    push(S,<span class="number">3</span>);</span><br><span class="line">    printStack(S);</span><br><span class="line">    <span class="type">int</span> i = pop(S);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;current elem=%d\n&quot;</span>,i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>队列是先进先出线性报表，它只允许在表的一端插入元素，而在表的另一端删除元素，在队列中，插入元素的一端称为队尾(rear)、允许删除元素的一端称为对头(Front)</p><h4 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">    <span class="type">int</span>[] q = <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> front,rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestQueue</span> &#123;</span><br><span class="line">    </span><br><span class="line">    Queue <span class="title function_">initQueue</span><span class="params">(Queue q)</span> &#123;</span><br><span class="line">        q.q= <span class="keyword">new</span> <span class="title class_">int</span> [q.N];</span><br><span class="line">        front = reer = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Queue q)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (q.front == <span class="number">0</span> &amp;&amp; q.rear == <span class="number">0</span>) <span class="keyword">return</span> True;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">enQueue</span><span class="params">(Queue q, ini data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (q.rear &gt;= q.N) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        q.data[q.rear] = data;</span><br><span class="line">        q.rear ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">popQueue</span><span class="params">(Queue q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (q.front &gt;= q.N|| isEmpty(q))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        q.front ++ ;</span><br><span class="line">        <span class="keyword">return</span> True;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    data <span class="title function_">getQueueTop</span><span class="params">(Queue q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty(q)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> q.data[q.front-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循环队列顺序存储"><a href="#循环队列顺序存储" class="headerlink" title="循环队列顺序存储"></a>循环队列顺序存储</h4><p>循环队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">    <span class="type">int</span>[] q = <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> front,rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestQueue</span> &#123;</span><br><span class="line">    </span><br><span class="line">    Queue <span class="title function_">initQueue</span><span class="params">(Queue q)</span> &#123;</span><br><span class="line">        q.q= <span class="keyword">new</span> <span class="title class_">int</span> [q.N];</span><br><span class="line">        front = reer = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Queue q)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((q.front == <span class="number">0</span> &amp;&amp; q.rear == <span class="number">0</span>)|| q.front==q.rear) <span class="keyword">return</span> True;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">enQueue</span><span class="params">(Queue q, ini data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (q.rear+<span class="number">1</span> == q.front) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        q.data[q.rear] = data;</span><br><span class="line">        q.rear = (q.rear+<span class="number">1</span>)%q.N;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">popQueue</span><span class="params">(Queue q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (|| isEmpty(q))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        q.front=(q.front+<span class="number">1</span>)%q.N;</span><br><span class="line">        <span class="keyword">return</span> True;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    data <span class="title function_">getQueueTop</span><span class="params">(Queue q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty(q)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> q.data[q.front-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="队列的链式存储"><a href="#队列的链式存储" class="headerlink" title="队列的链式存储"></a>队列的链式存储</h4><p>存在头节点（head) 和 尾节点（rear）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line">Node* <span class="title function_">initQueue</span><span class="params">()</span> &#123;</span><br><span class="line">    Node* Q = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    Q-&gt;data = <span class="number">0</span>;</span><br><span class="line">    Q-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> Q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 入队</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">enQueue</span><span class="params">(Node* Q,<span class="type">int</span> data)</span> &#123;</span><br><span class="line">    Node* q = Q;</span><br><span class="line">    Node* node = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i &lt; Q-&gt;data; i++)&#123;</span><br><span class="line">        q = q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;next = q-&gt;next;</span><br><span class="line">    q-&gt;next = node;</span><br><span class="line">    Q-&gt;data++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isEmpty</span><span class="params">(Node* Q)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(Q-&gt;data == <span class="number">0</span>|| Q-&gt;next == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 出队操作</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deQueue</span><span class="params">(Node* Q)</span> &#123;</span><br><span class="line">    <span class="comment">// 判断队列是否为空</span></span><br><span class="line">    <span class="keyword">if</span>(isEmpty(Q))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        Node* node = Q-&gt;next;</span><br><span class="line">        <span class="type">int</span> data = node-&gt;data;</span><br><span class="line">        Q-&gt;data--;</span><br><span class="line">        <span class="built_in">free</span>(node);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printQueue</span><span class="params">(Node* Q)</span> &#123;</span><br><span class="line">    Node* node = Q-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(node) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>, node-&gt;data);</span><br><span class="line">        node = node-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    Node * Q = initQueue();</span><br><span class="line">    enQueue(Q,<span class="number">1</span>);</span><br><span class="line">    enQueue(Q,<span class="number">2</span>);</span><br><span class="line">    enQueue(Q,<span class="number">3</span>);</span><br><span class="line">    printQueue(Q);</span><br><span class="line">    <span class="type">int</span> i = deQueue(Q);</span><br><span class="line">    <span class="type">int</span> o = deQueue(Q);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d---&quot;</span>,o);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&lt;--&gt;\n&quot;</span>,i);</span><br><span class="line">    <span class="comment">// printf(&quot;%d&lt;--&gt;\n&quot;,o);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 循环队列 front 代表开始起点  rear 代表 要 插入点 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> front;</span><br><span class="line">    <span class="type">int</span> rear;</span><br><span class="line">    <span class="type">int</span> data[MAXSIZE];</span><br><span class="line">&#125;Queue;</span><br><span class="line">Queue* <span class="title function_">initQueue</span><span class="params">()</span> &#123;</span><br><span class="line">    Queue* Q = (Queue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">    Q-&gt;front  = Q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> Q;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">isFull</span><span class="params">(Queue* Q)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((Q-&gt;rear+ <span class="number">1</span>) % MAXSIZE == Q-&gt;front) &#123;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">enQueue</span><span class="params">(Queue* Q, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isFull(Q)) &#123;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        Q-&gt;data[Q-&gt;rear] = data;</span><br><span class="line">        Q-&gt;rear = (Q-&gt;rear + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">        <span class="keyword">return</span> TRUE; </span><br><span class="line">    &#125;         </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">isEmpty</span><span class="params">(Queue* Q)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(Q-&gt;front == Q-&gt;rear )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">deQueue</span><span class="params">(Queue* Q)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty(Q))&#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="type">int</span> data = Q-&gt;data[Q-&gt;front];</span><br><span class="line">        Q-&gt;front = (Q-&gt;front + <span class="number">1</span>) %MAXSIZE;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printQueue</span><span class="params">(Queue*Q)</span> &#123;</span><br><span class="line">    <span class="comment">// 要知道队列当前有多少元素</span></span><br><span class="line">    <span class="type">int</span> length = (Q-&gt;rear - Q-&gt;front + MAXSIZE)% MAXSIZE;</span><br><span class="line">    <span class="type">int</span> index  = Q-&gt;front; <span class="comment">// 头指针 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>; i&lt;length; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>, Q-&gt;data[index]);</span><br><span class="line">        index = (index + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    Queue* Q = initQueue();</span><br><span class="line">    enQueue(Q, <span class="number">1</span>);</span><br><span class="line">    enQueue(Q, <span class="number">2</span>);</span><br><span class="line">    enQueue(Q, <span class="number">3</span>);</span><br><span class="line">    printQueue(Q);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h4><h3 id="串（串也是有一个线性结构）"><a href="#串（串也是有一个线性结构）" class="headerlink" title="串（串也是有一个线性结构）"></a>串（串也是有一个线性结构）</h3><p>串（字符串）    一种特殊的线性表，其数据元素为字符</p><h4 id="串的定义（子串的个数是等差数列，（n-2）-n-1-2"><a href="#串的定义（子串的个数是等差数列，（n-2）-n-1-2" class="headerlink" title="串的定义（子串的个数是等差数列，（n+2）(n-1)/2"></a>串的定义（子串的个数是等差数列，（n+2）(n-1)/2</h4><p>串中子串的长度第 n-1项 必定是 2，首项是n ，总个数是n-1</p><p>则 sum(s) = ((an+a1)<em>(n-1))/2 = ((n+2)\</em>(n-1))/2</p><p>串是仅由字符构成的有限序列，是一种线性表，一般标记为S = a1a2s3…sn 其中是串名，单引号括起来的字符序列的串值</p><h4 id="串的基本概念（空串、空格串、字串、串相等、串比较）0：48、a：65、A：97"><a href="#串的基本概念（空串、空格串、字串、串相等、串比较）0：48、a：65、A：97" class="headerlink" title="串的基本概念（空串、空格串、字串、串相等、串比较）0：48、a：65、A：97"></a>串的基本概念（空串、空格串、字串、串相等、串比较）0：48、a：65、A：97</h4><ul><li><p>空串：长度为零的串称为空串，空串不包含任何字符</p></li><li><p>空格串：由一个或多个空格组成的串，虽然空格是一个空白字符，但它也是一个字符</p></li><li><p>子串：由串中任意长度的连续字符构成的序列称为子串</p></li><li><p>串相等：指两个串长度相等，且对应序号的字符也相同</p></li><li><p>串比较：两个串比较大小时以字符的ascii码值作为实质，比较操作从两个串的第一个字符开始进行，字符的码值大者所在的串为大，若是其中一个串先结束，则以串长较大者为大</p></li></ul><h4 id="串的模式匹配（子串和模式串）"><a href="#串的模式匹配（子串和模式串）" class="headerlink" title="串的模式匹配（子串和模式串）"></a>串的模式匹配（子串和模式串）</h4><h5 id="朴素模式匹配"><a href="#朴素模式匹配" class="headerlink" title="朴素模式匹配"></a>朴素模式匹配</h5><p>时间复杂度：最好o(m) 最坏o(n*m) 平均o(m+n)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 串 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">String</span> &#123;</span></span><br><span class="line">    <span class="comment">// 记录串的值</span></span><br><span class="line">    <span class="type">char</span>* data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录串的字符数量</span></span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">&#125;String;</span><br><span class="line"></span><br><span class="line">String* <span class="title function_">initString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化字符串</span></span><br><span class="line">    String* s = (String*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(String));</span><br><span class="line">    <span class="comment">// 设置字符串为空</span></span><br><span class="line">    s-&gt;data =<span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 当前字符串的数为0 </span></span><br><span class="line">    s-&gt;len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入字符串 s 为字符串， data 为字符串值</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">stringAssign</span><span class="params">(String* s, <span class="type">char</span>* data)</span> &#123;</span><br><span class="line">    <span class="comment">// 清空 字符串 s 种已有的值</span></span><br><span class="line">    <span class="keyword">if</span> (s-&gt;data) &#123;</span><br><span class="line">        <span class="built_in">free</span>(s-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义开始字符串类的字符数为 0</span></span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 用于统计 data 字符串 有多少个字符串</span></span><br><span class="line">    <span class="type">char</span>* temp = data;</span><br><span class="line">    <span class="keyword">while</span> (*temp) &#123;</span><br><span class="line">        len++;</span><br><span class="line">        temp++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 如果没有字符 则重新初始化</span></span><br><span class="line">        s-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line">        s-&gt;len = <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 有值 则 遍历 将 值 赋值 给 string 的 data</span></span><br><span class="line">        temp = data;</span><br><span class="line">        s-&gt;len = len;</span><br><span class="line">        s-&gt;data = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>)*(len+<span class="number">1</span>));<span class="comment">// 定义开辟 多大的 字符空间</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++, temp ++)&#123;</span><br><span class="line">            s-&gt;data[i] = * temp; <span class="comment">// 遍历赋值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历字符串</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printString</span><span class="params">(String* s)</span> &#123;</span><br><span class="line">    <span class="comment">// 遍历字符串</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i  &lt; s-&gt;len; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(i == <span class="number">0</span> ?<span class="string">&quot;%c&quot;</span>:<span class="string">&quot;-&gt; %c &quot;</span>,s-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴力匹配</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">forceMatch</span><span class="params">(String* master, String* sub)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// i 是 用于遍历 master 的 个数 j 是 用于 记录 sub 的 个数</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; master-&gt;len &amp;&amp; j &lt;sub-&gt;len )&#123;</span><br><span class="line">        <span class="comment">// 判断 master 和sub 下标 对应 的 数值 是否 相同 </span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span>(master-&gt;data[i] == sub-&gt;data[j]) &#123;</span><br><span class="line">            j++;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            i = i - j +<span class="number">1</span>;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j == sub-&gt;len) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;force match success.\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;force match false.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    String* s = initString();</span><br><span class="line">    String* s1= initString();</span><br><span class="line">    stringAssign(s1, <span class="string">&quot;he0&quot;</span>);</span><br><span class="line">    printString(s1);</span><br><span class="line">    stringAssign(s, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    printString(s);</span><br><span class="line">    forceMatch(s,s1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="kmp算法"><a href="#kmp算法" class="headerlink" title="kmp算法"></a>kmp算法</h5><p>串的前缀：包含第一个字符并且不包含最后一个字符的字串</p><p>串的后缀：包含最后一个字符并且不包含第一个字符的子串</p><p>模式串中的next，第i个字符的next值 = 从 1 ~ i - 1 串中最长相等前后缀长度 +1</p><p>特殊情况：next[1] = 0 \ next[2] = 1</p><p>时间复杂度：o(n+m)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* kmp 算法 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">String</span>&#123;</span></span><br><span class="line">    <span class="type">char</span>* data;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">&#125;String;</span><br><span class="line">String* <span class="title function_">initString</span><span class="params">()</span> &#123;</span><br><span class="line">    String* s = (String*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(String));</span><br><span class="line">    s-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line">    s-&gt;len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// kmp 算法 next 求值</span></span><br><span class="line"><span class="type">int</span>* <span class="title function_">getNext</span><span class="params">(String* S)</span>  &#123;</span><br><span class="line">    <span class="type">int</span>* next = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)* S-&gt;len);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">-1</span>;</span><br><span class="line">    next[i] = j;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; S-&gt;len <span class="number">-1</span> ) &#123;</span><br><span class="line">       <span class="keyword">if</span> (j ==<span class="number">-1</span> || S-&gt;data[i] == S-&gt;data[j])&#123;</span><br><span class="line">            next[++i] = ++j ;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j = next [j];</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i = %d - i -\n&quot;</span>, i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d- &quot;</span>, S-&gt;len);</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printNext</span><span class="params">(<span class="type">int</span>* next , <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-%d-\n&quot;</span>, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(i == <span class="number">0</span>? <span class="string">&quot;%d&quot;</span> : <span class="string">&quot;-&gt;%d&quot;</span> , next[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">kmpMatch</span><span class="params">(String* master , String* sub, <span class="type">int</span>* next)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span> ;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">while</span> (j == <span class="number">-1</span> || i &lt; master-&gt;len &amp;&amp; j &lt; sub-&gt;len) &#123;</span><br><span class="line">        <span class="keyword">if</span> (master-&gt;data[i] == sub-&gt;data[j])&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j == sub-&gt;len)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;kmp match success.\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;kmp match fail.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">stringAssign2</span><span class="params">(String* s, <span class="type">char</span>* data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s-&gt;data) &#123;</span><br><span class="line">        <span class="built_in">free</span>(s-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>* temp = data;</span><br><span class="line">    <span class="keyword">while</span> (*temp) &#123;</span><br><span class="line">        len++;</span><br><span class="line">        temp++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>)&#123;</span><br><span class="line">        s-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line">        s-&gt;len = <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        temp = data;</span><br><span class="line">        s-&gt;len = len;</span><br><span class="line">        <span class="comment">// 有一个 \0 保存结尾</span></span><br><span class="line">        s-&gt;data = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>)*(len+<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i =<span class="number">0</span>; i &lt; len; i++, temp++)&#123;</span><br><span class="line">            s-&gt;data[i] = *temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printString</span><span class="params">(String* s)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s-&gt;len ; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>( i == <span class="number">0</span> ? <span class="string">&quot;%c&quot;</span>:<span class="string">&quot;-&gt;%c&quot;</span>,s-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* code */</span></span><br><span class="line">    String* S = initString();</span><br><span class="line">    String* S1 = initString();</span><br><span class="line">    stringAssign2(S1, <span class="string">&quot;ABCCA&quot;</span>);</span><br><span class="line">    stringAssign2(S,<span class="string">&quot;ABCBABCCADABA&quot;</span>);</span><br><span class="line">    printString(S);</span><br><span class="line">    printString(S1);</span><br><span class="line">    <span class="type">int</span>* next = getNext(S1);</span><br><span class="line">    printNext(next, S1-&gt;len);</span><br><span class="line">    kmpMatch(S,S1, next);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>一位数组：a[n] —-&gt; L 是 元素大小 类型</p><p>内存是连续的存储空间  Loc ：数组的首地址</p><p>求算地址：第i个元素的地址 = loc+i*L     </p><p>内存 a[0]    a[1]   a[2]   a[3]   a[4]   a[5]   int 类型</p><p>地址   0         4       8       12       16</p><p>二维数组：a[n][m]   数组首地址 loc ，元素大小L</p><p>a[2][2]</p><p>内存 a[0][0]  a[0][1]   a[1][0]  a[1][1]     int  类型</p><p>地址      0           4             8           12</p><p>按行优先 ： a[n][m]第 i行第j 个 元素的地址 = loc+i*L<em>m+j\</em>L  ()</p><p>按列优先：a[n][m]</p><p>内存 a[0][0] a[1][0] a[0][1] a[1][1] a[2][0]</p><p>地址       0       4              8         12         16</p><p>a[n][m] 第i行第j个元素的地址 = loc+j*n<em>L+i\</em>L  </p><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><h5 id="对称矩阵-a-i-j-a-j-i-存储-主对角线和-下三角区"><a href="#对称矩阵-a-i-j-a-j-i-存储-主对角线和-下三角区" class="headerlink" title="对称矩阵 a[i][j] = a[j][i] 存储 主对角线和 下三角区"></a>对称矩阵 a[i][j] = a[j][i] 存储 主对角线和 下三角区</h5><p>主对角线：</p><p>下三角区 i&gt;j \ 上三角区 i&lt;j</p><p>按行优先存储：存储的个数 = (n+1)n/2</p><p>第i行第j个的数组存储的位置：(i+1)i/2 + j + 1</p><p>上三角：(j+1)j/2 + i +1</p><h5 id="三角矩阵"><a href="#三角矩阵" class="headerlink" title="三角矩阵"></a>三角矩阵</h5><p>只有中间区域由数据，其他区域都是0</p><p>存储的工具从0开始：aij = 2i + j - 2</p><h5 id="稀疏矩阵-零的-个数-过多、使用三元组或十字链表进行存储"><a href="#稀疏矩阵-零的-个数-过多、使用三元组或十字链表进行存储" class="headerlink" title="稀疏矩阵 零的 个数 过多、使用三元组或十字链表进行存储"></a>稀疏矩阵 零的 个数 过多、使用三元组或十字链表进行存储</h5><p>使用三元组表的顺序存储结构 a[n][3]  a[n][0] 存 行 a[n][1]存 列  a[n][3] 存储 数值  </p><h2 id="树-一对多关系"><a href="#树-一对多关系" class="headerlink" title="树 (一对多关系)"></a>树 (一对多关系)</h2><p>树结构是一种非线性结构，该结构 一个元素可以由两个或两个以上的直接后继元素，树可以用来描述客观世界中广泛存在的层次结构</p><h3 id="树的定义（树域二叉树的定义）"><a href="#树的定义（树域二叉树的定义）" class="headerlink" title="树的定义（树域二叉树的定义）"></a>树的定义（树域二叉树的定义）</h3><p>树是是 n(n&gt;=0) 个结点的有限阶符，当n = 0 时 称为空树，在 任意一非空树(n&gt;0) 中，有且仅有一个称为根的结点，其余结点可分为m(m&gt;=0) 个互不相交的有限子集t1,t2,t3,t4,t5，其中，每个T1又是一棵树，并且称为根结点的子树</p><p>树的定义时递归的，它证明了树本身固有特性，也就是一棵树由若干棵子树构成，而子树又由更小的子树构成</p><h3 id="树的基本概念"><a href="#树的基本概念" class="headerlink" title="树的基本概念"></a>树的基本概念</h3><ol><li>双亲、孩子、兄弟，结点的子树称的根称为该结点的孩子，相应的该节点成为子节点的双亲，具有相同双亲结点的或为兄弟</li><li>结点的度：一个节点的子树的个数记为该结点的度</li><li>叶子结点：叶子结点也称为终端结点，指度为0的结点</li><li>内部结点：度不为0的结点。也称为分支结点或者非终端结点，根结点除外，分支结点也称为内部结点</li><li>结点的层次：根为第一层，根的孩子为第二层，以此类推</li><li>树的高度，一颗树的高度的最大数记为书店高度（或深度）</li></ol><h4 id="树的性质1：树中的结点总数等于树的所有结点的度数之和加1（加1指的是根节点）"><a href="#树的性质1：树中的结点总数等于树的所有结点的度数之和加1（加1指的是根节点）" class="headerlink" title="树的性质1：树中的结点总数等于树的所有结点的度数之和加1（加1指的是根节点）"></a>树的性质1：树中的结点总数等于树的所有结点的度数之和加1（加1指的是根节点）</h4><h4 id="树的性质2：度为m的树中第i层上至多有m-i-1个结点-i-gt-1"><a href="#树的性质2：度为m的树中第i层上至多有m-i-1个结点-i-gt-1" class="headerlink" title="树的性质2：度为m的树中第i层上至多有m^i-1个结点(i&gt;=1)"></a>树的性质2：度为m的树中第i层上至多有m^i-1个结点(i&gt;=1)</h4><h4 id="树的性质3：树的高度为h的m次至多有-m-b-1-m-1-个结点"><a href="#树的性质3：树的高度为h的m次至多有-m-b-1-m-1-个结点" class="headerlink" title="树的性质3：树的高度为h的m次至多有(m^b-1)/m-1 个结点"></a>树的性质3：树的高度为h的m次至多有(m^b-1)/m-1 个结点</h4><p>树的性质4：具有n个结点  、度为m的树的最小高度为logm(n(m-1)+1)</p><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>二叉树是n个结点的有限阶符，它或者是空树，或者是由一个根结点及两个不相交的且分别称为左、右子树的二叉树</p><p>二叉树任意结点的度最大只能为2</p><ol><li><p>二叉树性质1：第i层上最多有2^(i-1)个结点</p></li><li><p>二叉树性质2：高度为h的二叉树最多有2^h-1个结点</p></li><li><p>二叉树性质3：对于任何一棵二叉树，度为0的结点树等于度为2得到结点树+1</p></li><li><p>二叉树性质4：具有n个结点的完全二叉树的高度为log2(n)+1 取下限 或者log2(n+1) 取上限</p></li></ol><h4 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h4><h4 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h4><h4 id="非完全二叉树"><a href="#非完全二叉树" class="headerlink" title="非完全二叉树"></a>非完全二叉树</h4>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/01/hello-world/"/>
      <url>/2024/05/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
