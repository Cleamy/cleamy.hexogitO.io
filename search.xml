<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>别人的软件设计师资料</title>
      <link href="/2024/05/06/%E8%BD%AF%E8%80%83-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/05/06/%E8%BD%AF%E8%80%83-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%B8%88-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>atitle: 软考-软件设计师 笔记<br>author: 顾梦<br>about: <a href="https://jishuqin.cn/">https://jishuqin.cn/</a></p><h2 id="description-该笔记是我跟着b站up主-zst-学习软考记录的，视频链接：软件设计师学习路线"><a href="#description-该笔记是我跟着b站up主-zst-学习软考记录的，视频链接：软件设计师学习路线" class="headerlink" title="description: 该笔记是我跟着b站up主 zst  学习软考记录的，视频链接：软件设计师学习路线"></a>description: 该笔记是我跟着b站up主 zst  学习软考记录的，视频链接：<a href="https://www.bilibili.com/read/cv18526892?spm_id_from=333.999.list.card_opus.click">软件设计师学习路线</a></h2><h1 id="软件设计师（上午题）"><a href="#软件设计师（上午题）" class="headerlink" title="软件设计师（上午题）"></a>软件设计师（上午题）</h1></blockquote><h2 id="第一章-计算机系统知识（5-6分）"><a href="#第一章-计算机系统知识（5-6分）" class="headerlink" title="第一章 计算机系统知识（5~6分）"></a>第一章 计算机系统知识（5~6分）</h2><h3 id="1-1-计算机系统基础知识"><a href="#1-1-计算机系统基础知识" class="headerlink" title="1.1 计算机系统基础知识"></a>1.1 计算机系统基础知识</h3><h4 id="1-1-2中央处理单元"><a href="#1-1-2中央处理单元" class="headerlink" title="1.1.2中央处理单元"></a>1.1.2中央处理单元</h4><p><strong>中央处理单元（CPU)是计算机系统的核心部件，它负责获取程序指令、对指令进行译码并加以执行。</strong></p><h5 id="1-CPU的功能"><a href="#1-CPU的功能" class="headerlink" title="1. CPU的功能"></a>1. CPU的功能</h5><p>例：计算机执行指令的过程中，需要由<strong>A</strong> 产生每条指令的操作信号并将信号送往相应的部件进行处理，以完成指定的操作。（2019年上半年）</p><p>A. CPU 的控制器　　　B. CPU的运算器</p><p>C. DMA 控制器　　　　D. Cache 控制器</p><h5 id="2-CPU的组成"><a href="#2-CPU的组成" class="headerlink" title="2. CPU的组成"></a>2. CPU的组成</h5><p><strong>CPU主要由运算器、控制器、寄存器组和内部总线等部件组成。</strong></p><p>1)运算器</p><p><strong>运算器由算术逻辑单元、累加寄存器、数据缓冲寄存器和状态条件寄存器等组成。</strong></p><p>例：在CPU中，常用来为ALU执行算术逻辑运算提供数据并暂存运算结果的寄存器是<strong>D </strong>.(2014年上半年）</p><p>A. 程序计数器　　　　B. 状态寄存器</p><p>C. 通用寄存器　　　　D. 累加寄存器</p><p>2)控制器</p><p><strong>控制器用于控制整个 CPU 的工作，它决定了计算机运行过程的自动化。它不仅要保证程序的正确执行，而且要能够处理异常事件。</strong></p><p>例：在 CPU 中，<strong>B</strong> 不仅要保证指令的正确执行，还要能够处理异常事件。(2012年下半年)</p><p>A. 运算器　　　　　B. 控制器</p><p>C. 寄存器组　　　　D. 内部总线</p><p>例：计算机指令一般包括操作码和地址码两部分，为分析执行一条指令，其 <strong>C</strong>。(2010年上半年)</p><p>A. 操作码应存入指令寄存器（IR)，地址码应存入程序计数器（PC）</p><p>B. 操作码应存入程序计数器（PC），地址码应存入指令寄存器（IR）</p><p>C. 操作码和地址码都应存入指令寄存器（IR）</p><p>D. 操作码和地址码都应存入程序计数器（PC）</p><h4 id="1-1-3-数据表示"><a href="#1-1-3-数据表示" class="headerlink" title="1.1.3 数据表示"></a>1.1.3 数据表示</h4><p>按权展开求和　n进制 -&gt; 十进制　　每一位八进制数与三位二进制数对应</p><p>除n取余法　十进制 -&gt; n进制　　每一位十六进制数与四位二进制数对应</p><p><strong>计算机的基本单位</strong></p><p>位（比特）bit b　字节byte B  千字节 KB 兆字节 MB  吉字节 GB  太字节 TB</p><p>1 B = 8 b    1 KB = 1024 B    1 MB = 1024 KB    1 GB = 1024 MB    1 TB = 1024 GB</p><p><strong>补码再取补码等于源码。</strong></p><p>±0的移码相同</p><p><strong>采用补码可以简化计算机运算部件的设计。</strong></p><p>寻址(P 20)：</p><ul><li><strong>立即寻址</strong>：操作数就包含在指令中。</li><li><strong>直接寻址</strong>：操作数存放在内存单元中，指令中直接给出操作数所在存储单元的地址。</li><li><strong>寄存器寻址</strong>：操作数存放在某一寄存器中，指令中给出存放操作数的寄存器名。</li><li><strong>寄存器间接寻址</strong>：操作数存放在内存单元中，操作数所在存储单元的地址在某个<br>寄存器中。</li><li><strong>间接寻址</strong>：指令中给出操作数地址的地址。</li><li>相对寻址：指令地址码给出的是一个偏移量（可正可负)，操作数地址等于本条指令的地址加上该偏移量。</li><li>变址寻址：操作数地址等于变址寄存器的内容加偏移量。<h4 id="1-1-4-校验码"><a href="#1-1-4-校验码" class="headerlink" title="1.1.4 校验码"></a>1.1.4 校验码</h4></li></ul><ol><li>奇偶校验码：只能检错，不能纠错</li><li>海明码：码距 = 2 ，检错能力     码距 &gt;= 3，才有可能有纠错能力</li><li>循环冗余校验码： 可以检错，但不能纠错</li></ol><h3 id="1-2-计算机体系结构"><a href="#1-2-计算机体系结构" class="headerlink" title="1.2 计算机体系结构"></a>1.2 计算机体系结构</h3><h4 id="1-2-1-计算机体系结构的发展"><a href="#1-2-1-计算机体系结构的发展" class="headerlink" title="1.2.1 计算机体系结构的发展"></a>1.2.1 计算机体系结构的发展</h4><h5 id="CISC-Complex-Instruction-Set-Computer-和-RISC-Reduced-Instruction-Set-Computer"><a href="#CISC-Complex-Instruction-Set-Computer-和-RISC-Reduced-Instruction-Set-Computer" class="headerlink" title="CISC (Complex Instruction Set Computer) 和 RISC (Reduced Instruction Set Computer)"></a>CISC (Complex Instruction Set Computer) 和 RISC (Reduced Instruction Set Computer)</h5><div class="table-container"><table><thead><tr><th></th><th>RISC精简指令集计算机</th><th>CISC复杂指令集计算机</th></tr></thead><tbody><tr><td>指令种类</td><td>少、精简</td><td>多、丰富</td></tr><tr><td>指令复杂度</td><td>低（简单）</td><td>高（复杂）</td></tr><tr><td>指令长度</td><td>固定</td><td>变化</td></tr><tr><td>寻址方式</td><td>少</td><td>复杂多样</td></tr><tr><td>实现（译码）方式</td><td>硬布线控制逻辑（组合逻辑控制器）</td><td>微程序控制技术</td></tr><tr><td>通用寄存器数量</td><td>多、大量</td><td>一般</td></tr><tr><td>流水线技术</td><td>支持</td><td>支持</td></tr></tbody></table></div><h4 id="1-2-2-存储系统"><a href="#1-2-2-存储系统" class="headerlink" title="1.2.2 存储系统"></a>1.2.2 存储系统</h4><ol><li>SRAM（静态随机存储器）</li><li>DRAM（动态随机存储器）</li><li>RAM（读/写存储器）</li><li>ROM（只读存储器）</li><li>PROM（可编程的只读存储器）</li></ol><p>按寻址方式分类</p><ul><li>随机存储器（RAM）</li><li>顺序存储器（SAM）</li><li>直接存储器（DAM）</li></ul><p>Cache 与主存地址的映射是由硬件自动完成的<br>数据总线：数地控，数据总线、地址总线和控制总线</p><h5 id="指令的流水线处理"><a href="#指令的流水线处理" class="headerlink" title="指令的流水线处理"></a>指令的流水线处理</h5><p>1.顺序方式    2.重叠方式    3.流水方式</p><p><img src="img/assets/image-20230318130732097.png" style="zoom: 50%;" /></p><h5 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h5><p><img src="img/assets/image-20230319095341322.png" alt=""></p><h5 id="输入输出-I-O-控制方式"><a href="#输入输出-I-O-控制方式" class="headerlink" title="输入输出(I/O)控制方式"></a>输入输出(I/O)控制方式</h5><ol><li>程序查询方式</li></ol><ul><li><p>CPU和 I/O（外设）只能串行工作 CPU需要一直轮询检查，长期处于忙等状态。CPU 利用率低 </p></li><li><p>一次只能读/写一个字</p></li><li><p>由 CPU 将数放入内存</p><p>   ​                                    　　　　<img src="img/assets/image-20230319101734993.png" style="zoom:50%;display: block;margin: 0 auto;" /></p></li></ul><ol><li>中断驱动方式</li></ol><ul><li><p>I/O 设备通过中断信号主动向 CPU 报告 I/O 操作已完成</p></li><li><p>CPU 和 I/O（外设）可并行工作 </p></li><li><p>CPU 利用率得到提升</p></li><li><p>一次只能 读/写 一个字</p></li><li><p>由 CPU 将数据放入内存</p></li></ul><p>　　　​                                                <img src="img/assets/image-20230319101818583.png" style="zoom:50%;" /></p><ol><li>直接存储器方式（DMA）</li></ol><ul><li>CPU 和 I/O（外设）可并行工作 </li><li>仅在传送数据块的开始和结束时才需要 CPU 的干预 </li><li>由外设直接将数据放入内存 </li><li>一次读写的单位为”块“而不是字 </li></ul><p>​                                                            <img src="img/assets/image-20230319102851592.png" style="zoom:50%;" /></p><h3 id="1-3-全性、可靠性与系统性能评测基础知识"><a href="#1-3-全性、可靠性与系统性能评测基础知识" class="headerlink" title="1.3 全性、可靠性与系统性能评测基础知识"></a>1.3 全性、可靠性与系统性能评测基础知识</h3><h4 id="1-3-2-加密技术和认证技术"><a href="#1-3-2-加密技术和认证技术" class="headerlink" title="1.3.2 加密技术和认证技术"></a>1.3.2 加密技术和认证技术</h4><h5 id="加密技术与认证技术"><a href="#加密技术与认证技术" class="headerlink" title="加密技术与认证技术"></a>加密技术与认证技术</h5><ul><li>加密技术： <ol><li>对称加密（私有密钥加密）<br>加密和解密是同一把密钥，只有一把密钥<br>密钥分发有缺陷     1. 加密解密速度很快     2. 适合加密大量明文数据 </li><li>非对称密钥（公开密钥加密）<br>加密和解密不是同一把密钥，一共有两把密钥 分别是公钥和私钥<br>用公钥加密只能用私钥解密    用私钥加密只能用公钥解密<br>不能通过一把推出另一把     用接收方的公钥加密明文，可以实现防止窃听的效果<br>密钥分发没有缺陷    1.加密解密速度很慢 </li><li>混合加密 </li></ol></li><li>认证技术： <ol><li>摘要：将发送的明文进行Hash算法后得到的摘要放在密文后一起发送过去，与接收方解密后的明文进行相同的Hash算法得到的摘要进行对比，如果一致，则没有篡改，否则有篡改。 </li><li>数字签名：发送方用自己的私钥对摘要进行签名（加密）得到数字签名放在密文后一起发送过去<br>接收方用发送方的公钥对数字签名进行验证（解密）如果验证成功则该消息没有被假冒且不能否认，否则该消息的真实性为假冒发送。 </li><li>数字证书：用户向CA（权威机构）机构申请数字证书，将个人信息和公钥发给CA机构，CA机构颁给用户数字证书，数字证书用CA的私钥进行签名（加密）用CA的公钥验证（解密）数字证书得到用户的公钥。</li></ol></li></ul><p>认证是处理主动攻击</p><div class="table-container"><table><thead><tr><th>对称密钥（私钥、私有密钥加密）算法（共享密钥加密算法）</th><th>非对称密钥（公钥、公开密钥加密）算法</th></tr></thead><tbody><tr><td>DES</td><td>RSA</td></tr><tr><td>3DES</td><td>ECC</td></tr><tr><td>RC-5</td><td>DSA</td></tr><tr><td>IDEA</td><td></td></tr><tr><td>AES</td><td></td></tr><tr><td>RC4</td></tr></tbody></table></div><p>Hash函数</p><p>MD5 摘要算法（128位散列值）</p><p>SHA-1 安全散列算法</p><h4 id="1-3-3-计算机可靠性"><a href="#1-3-3-计算机可靠性" class="headerlink" title="1.3.3 计算机可靠性"></a>1.3.3 计算机可靠性</h4><h5 id="计算机可靠性模型"><a href="#计算机可靠性模型" class="headerlink" title="计算机可靠性模型"></a>计算机可靠性模型</h5><p>串联系统：</p><p>$R= R₁R₂···Rn$</p><p>并联系统：</p><p>$R = 1-(1-R₁)(1-R₂)···(1-Rn)$</p><h2 id="第二章-程序设计语言基础知识（3-6分）"><a href="#第二章-程序设计语言基础知识（3-6分）" class="headerlink" title="第二章 程序设计语言基础知识（3~6分）"></a>第二章 程序设计语言基础知识（3~6分）</h2><h3 id="2-1-程序设计语言概述"><a href="#2-1-程序设计语言概述" class="headerlink" title="2.1 程序设计语言概述"></a>2.1 程序设计语言概述</h3><h4 id="2-1-1-程序设计语言的基本概念"><a href="#2-1-1-程序设计语言的基本概念" class="headerlink" title="2.1.1 程序设计语言的基本概念"></a>2.1.1 程序设计语言的基本概念</h4><p>解释器：翻译源程序时不生产独立的目标程序。</p><p>解释程序和源程序要参与到程序的运行过程中。</p><p>编译器：翻译时将源程序翻译成独立保存的目标程序。</p><p>机器上运行的是与源程序等价的目标程序，源程序和编译程序都不再参与目标程序的运行过程。</p><p>许多程序设计语言规定，程序中的数据必须具有类型，其作用是：</p><ol><li>便于为数据合理分配存储单元</li><li>便于对参与表达式计算的数据对象进行检查</li><li>便于规定数据对象的取值范围及能够进行的运算</li></ol><h4 id="2-1-2-程序设计语言的基本成分"><a href="#2-1-2-程序设计语言的基本成分" class="headerlink" title="2.1.2 程序设计语言的基本成分"></a>2.1.2 程序设计语言的基本成分</h4><h5 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h5><p>函数的定义包括两部分：函数首部和函数体。函数的定义描述了函数做什么和怎么做。</p><p>函数定义的一般形式为：</p><blockquote><p>返回值的类型    函数名(形式参数表)    //函数首部    函数名(实参表)；</p><p>{</p><p>​    函数体；</p><p>}</p></blockquote><p>(1)值调用（Call by Value）。若实现函数调用时将实参的值传递给相应的形参， 则称为是传值调用。在这种方式下形参不能向实参传递信息。</p><p>(2)引用调用（Call by Reference）。引用是 C++ 中引入的概念，当形式参数为引用类型时，形参名实际上是实参的别名，函数中对形参的访问和修改实际上就是针对相应实参所做的访问和改变。</p><p>传值调用：</p><p>将实参的值传递给形参，实参可以是变量、常量和表达式。</p><p>不可以实现形参和实参间双向传递数据的效果。</p><p>传引用（地址）调用：</p><p>将实参的地址传递给形参，形参必须有地址，实参不能是常量（值），表达式。可以实现形参和实参间双向传递数据的效果，即改变形参的值同时也改变了实参的值。</p><h4 id="2-2-2-编译程序基本原理"><a href="#2-2-2-编译程序基本原理" class="headerlink" title="2.2.2 编译程序基本原理"></a>2.2.2 编译程序基本原理</h4><p>编译方式：词法分析、语法分析、语义分析、中间代码生成、代码优化、目标代码生成<br>解释方式：词法分析、语法分析、语义分析</p><p>编译器和解释器都不可省略词法分析、语法分析、语义分析且顺序不可交换<br>即词法分析、语法分析、语义分析是必须的。</p><p>编译器方式中中间代码生成和代码优化不是必要，可省略。<br>即编译器方式可以在词法分析、语法分析、语义分析阶段后直接生成目标代码</p><p>​                                                                    <img src="img/assets/image-20230320140213389.png" style="zoom:50%;" /></p><p>符号表：不断收集、记录和使用源程序中一些相关符号的类型和特征等信息，并将其存入符号表中。记录源程序中各个字符的必要信息，以辅助语义的正确性检查和代码生成。</p><p>1）词法分析</p><p>输入：源程序</p><p>输出：记号流</p><p>词法分析阶段的主要作用是 分析构成程序的字符及由字符按照构造规则构成的符号，是否符合程序语言的规定。</p><p>2）语法分析</p><p>输入：记号流</p><p>输出：语法树（分析树）</p><p>语义分析阶段可以发现程序中所有的语法错误</p><p>语法分析阶段的主要作用是 对各条语句的结构进行合法性分析，分析程序中的句子结构是否正确。</p><p>3）语义分析</p><p>输入：语法树（分析树）</p><p>语义分析阶段的主要作用是进行类型分析和检查</p><p>语义分析阶段不能发现程序中所有的语义错误</p><p>语义分析阶段可以发现<strong>静态</strong>语义错误，不能发现动态语义错误，动态语义错误运行时才能发现</p><p>4）中间代码生成<br>常见的中间代码有：后缀式、三地址码、三元式、四元式和树（图）等形式。</p><p>中间代码与具体的机器无关（不依赖具体的机器）,可以将不同的高级程序语言翻译成同一种中间代码。</p><p>中间代码可以跨平台。</p><p>因为与具体的机器无关，使用中间代码有利于进行与机器无关的优化处理和提高编译程序的可移植性。</p><p>6）目标代码生成</p><p>目标代码生成阶段的工作与具体的机器密切相关</p><p>寄存器的分配工作处于目标代码生成阶段</p><p>有限自动机是词法分析的一个工具，它能正确地识别正规集</p><p>确定的有限自动机（ DFA )：对每一个状态来说识别字符后转移的状态是唯一的</p><p>不确定的有限自动机（ NFA )：对每一个状态来说识别字符后转移的状态是不唯一的</p><h2 id="第三章-数据结构"><a href="#第三章-数据结构" class="headerlink" title="第三章 数据结构"></a>第三章 数据结构</h2><h2 id="第四章-操作系统知识"><a href="#第四章-操作系统知识" class="headerlink" title="第四章 操作系统知识"></a>第四章 操作系统知识</h2><h3 id="程序与进程"><a href="#程序与进程" class="headerlink" title="程序与进程"></a>程序与进程</h3><p>程序顺序执行时的主要特征包括：顺序性、封闭性和可再现性。</p><h3 id="三态模型"><a href="#三态模型" class="headerlink" title="三态模型"></a>三态模型</h3><p>在多道程序系统中，进程在处理器上交替运行，状态也不断地发生变化，因此进程一般有3种基本状态：运行、就绪和阻塞。</p><div class="table-container"><table><thead><tr><th>进程</th><th>CPU</th><th>资源</th></tr></thead><tbody><tr><td>运行</td><td>√</td><td>√</td></tr><tr><td>就绪</td><td>×</td><td>√</td></tr><tr><td>阻塞</td><td>×</td><td>×</td></tr></tbody></table></div><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>当有 n 个进程，m个资源，且每个进程所需要的资源数为k，并且系统采用的分配策略是轮流地为每个进程分配资源时，判断是否发生死锁的公式如下：</p><script type="math/tex; mode=display">m >= n * (k-1)+1</script><p>死锁的处理策略主要有4种：鸵鸟策略（即不理睬策略）、预防策略、避免策略和检测与解除死锁。</p><h3 id="磁盘调度"><a href="#磁盘调度" class="headerlink" title="磁盘调度"></a>磁盘调度</h3><ol><li>先来先服务（FCFS） ：根据进程请求访问磁盘的先后次序进行调度。</li><li>最短寻道时间优先（SSTF）：该算法选择这样的进程，其要求访问的磁道与当前磁头所在的磁道距离最近，使得每次的寻道时间最短。</li><li>扫描算法/电梯调度算法（SCAN）：扫描算法不仅考虑到要访问的磁道与当前磁道的距离，更优先考虑的是磁头的当前移动方向。</li><li>单向扫描调度算法（CSCAN）：为了减少这种延迟，算法规定磁头只做单向移动。<h2 id="第五章-软件工程基础知识"><a href="#第五章-软件工程基础知识" class="headerlink" title="第五章 软件工程基础知识"></a>第五章 软件工程基础知识</h2></li></ol><p>标记🔺需背诵</p><h4 id="软件过程"><a href="#软件过程" class="headerlink" title="软件过程"></a>软件过程</h4><h5 id="🔺-1-能力成熟度模型（CMM）"><a href="#🔺-1-能力成熟度模型（CMM）" class="headerlink" title="🔺 1. 能力成熟度模型（CMM）"></a>🔺 1. 能力成熟度模型（CMM）</h5><p>CMM 将软件过程改进分为以下5个成熟度级别：</p><p>1）初始级</p><p>软件过程的特点是杂乱无章，有时甚至很混乱，几乎没有明确定义的步骤，<strong>项目的成功完全依赖个人的努力和英雄式核心人物的作用。</strong></p><p>2）可重复级</p><p>建立了基本的项目管理过程和实践来<strong>跟踪项目费用、进度和功能特性</strong>，有必要的过程准则来重复以前在同类项目中的成功。</p><p>3）已定义级</p><p>管理和工程两方面的<strong>软件过程已经文档化、标准化</strong>，并综合成整个软件开发组织的<strong>标准软件过程</strong>。</p><p>4）已管理级</p><p>制定了软件过程和产品质量的详细度量标准。<strong>软件过程的产品质量都被开发组织的成员所理解和控制。</strong></p><p>5）优化级</p><p>加强了定量分析，通过来自<strong>过程质量</strong>反馈和来自<strong>新观念、新技术</strong>的反馈使过程能不断持续地改进。</p><h5 id="🔺-2-能力成熟度模型集成（CMMI）"><a href="#🔺-2-能力成熟度模型集成（CMMI）" class="headerlink" title="🔺 2. 能力成熟度模型集成（CMMI）"></a>🔺 2. 能力成熟度模型集成（CMMI）</h5><p>CMMI 提供了两种表示方法：</p><p>1）阶段式模型</p><p>阶段式模型的结构类似于 CMM，它关注组织的成熟度。</p><p>有五个成熟度等级：</p><ul><li>初始的：过程不可预测且缺乏控制。</li><li>已管理的：过程为项目服务。</li><li>已定义的：过程为组织服务。</li><li>定量管理的：过程已度量和控制。</li><li>优化的：集中于过程改进。</li></ul><p>2）连续式模型</p><p>连续式模型关注每个过程域的能力，一个组织对不同的过程域可以达到不同的过程域能力能力。</p><p>CMMI 中包括6个过程域能力等级：</p><ul><li>CL₀（未完成的）：过程域<strong>未执行</strong>或<strong>未得到</strong> CL₁ 中定义的所有目标。</li><li>CL₁（已执行的）：其共性目标是过程将可标识的输入工作产品转换成可标识的输出工<br>作产品，以实现支持<strong>过程域的特定目标</strong>。</li><li>CL₂（己管理的）：其共性目标<strong>集中于己管理的过程的制度化</strong>。根据组织级政策规定过<br>程的运作将使用哪个过程，项目遵循己文档化的计划和过程描述，所有正在工作的人<br>都有权使用足够的资源，所有工作任务和工作产品都被监控、控制和评审。</li><li>CL₃（己定义级的)：其共性目标<strong>集中于己定义的过程的制度化</strong>。过程是按照组织的剪<br>裁指南从组织的标准过程集中剪裁得到的，还必须收集过程资产和过程的度量，并用<br>于将来对过程的改进。</li><li>CL₄(定量管理的)：<strong>其共性目标集中于可定量管理的过程的制度化</strong>。使用测量和质量<br>保证来控制和改进过程域，建立和使用关于质量和过程执行的定量目标作为管理<br>准则。</li><li>CL₅（优化的)：<strong>使用量化（统计学）手段改变和优化过程域</strong>，以满足客户要求的改变<br>和持续改进计划中的过程域的功效。<h3 id="软件过程模型"><a href="#软件过程模型" class="headerlink" title="软件过程模型"></a>软件过程模型</h3>软件开发过程模型是指为了有效地开发、维护和更新软件系统，提出的一系列步骤、阶段和方法的系统框架，以实现提高软件质量、加快开发速度和降低开发成本的目的。</li></ul><p>常见的软件开发过程模型包括瀑布模型、增量模型、演化模型和喷泉模型。</p><h4 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h4><p>瀑布模型是一种线性的软件开发过程模型，开发流程严格按照顺序依次进行，每个阶段都必须完成后才能进入下一个阶段。瀑布模型包括需求分析、设计、编码、测试和维护五个阶段。</p><p><strong>特点：</strong></p><ul><li>明确的阶段，每个阶段都有明确可执行的目标</li><li>任务分工明确，各个阶段的任务可以并行开展</li><li>阶段间有严格的输入、输出关系</li></ul><p><strong>不足：</strong></p><ul><li>迭代能力不强，回退成本高，变更需求引起全局变化成本高</li><li>不适用于需求不完全确定的项目、对质量控制要求极高的项目</li></ul><h4 id="增量模型"><a href="#增量模型" class="headerlink" title="增量模型"></a>增量模型</h4><p>增量模型采用了逐步完善的思路，将软件的开发过程划分为一个个的增量，每个增量都能够独立实现某一或多项功能或特性。在逐步实现的过程中，可以不断根据需求变化来进行迭代，从而保证最终的软件达到客户需求和期望。</p><p><strong>特点：</strong></p><ul><li>采用可迭代的方式，适应需求不断变化的局面</li><li>可集成性强，增量之间保持一致性</li><li>开发完一个增量可实现部分投入使用</li></ul><p><strong>不足：</strong></p><ul><li>需求变化频繁，增量之间的界限可能模糊，不便于控制</li><li>增量标准的确定和成本效益考虑要求高</li></ul><h4 id="演化模型"><a href="#演化模型" class="headerlink" title="演化模型"></a>演化模型</h4><p>演化模型是一种以进化为中心的软件开发过程模型，侧重于以人的知识和技能为核心，强调在开发过程中不断地学习、改进和重构。演化模型适用于复杂性较高、需求不稳定的软件开发项目。</p><p><strong>特点：</strong></p><ul><li>适应需求频繁变动和较长开发周期的软件开发项目</li><li>开发人员可不断地矫正和完善软件，可利用先前的成果进行开发</li><li>风险得到有效控制，软件质量有所提高</li></ul><p><strong>不足：</strong></p><ul><li>开发人员几乎对整个软件的开发掌握程度较低，软件项目的可控性相对较差</li><li>软件演化过程因为没有严格的阶段，是软件项目能否成功的关键之一</li></ul><h4 id="喷泉模型"><a href="#喷泉模型" class="headerlink" title="喷泉模型"></a>喷泉模型</h4><p>喷泉模型是一种基于风险管理的软件开发过程模型，强调需要通过精细的风险分析和风险管理来降低软件开发的风险。喷泉模型包含三个阶段：确定性阶段、风险工程阶段和支持性阶段。</p><p><strong>特点：</strong></p><ul><li>考虑风险的因素，强调风险的管理和控制</li><li>逐步递增开发，先确定重要功能，在不断补充和完善功能</li><li>每次递增是独立的，能够实现部分投入使用</li><li>对于需求、设计等方面的变化能够有较好的适应性</li></ul><p><strong>不足：</strong></p><ul><li>开发人员难以准确把握风险，可能导致风险的发生和增加</li><li>递增过程中缺乏整体性的考虑，可能出现集成困难的情况</li><li><p>难以精确评估投资回报，不便于制定成本预算</p><h3 id="敏敏方法"><a href="#敏敏方法" class="headerlink" title="敏敏方法"></a>敏敏方法</h3><p>敏捷方法是一种反应灵活、拥有高度互动性和以人为本的软件开发方法。它的核心是通过不断地交付成果和及时反馈，来满足客户需求和不断变化的业务环境。以下是敏捷方法中的一些常见实践：</p></li><li><p>极限编程（XP）</p></li><li>水晶法（Crystal）</li><li>并列争求法（Scrum）</li><li>自适应软件开发（ASD）</li><li>敏捷统一过程（AUP）</li></ul><h4 id="极限编程（XP）"><a href="#极限编程（XP）" class="headerlink" title="极限编程（XP）"></a>极限编程（XP）</h4><p>XP 是一种敏捷方法，它注重软件开发过程的可持续性和软件产品的高质量。XP 方法主要包括测试驱动开发、持续集成、设计简单、重构和小步交付等实践，能够提高软件开发的质量和可靠性。</p><h4 id="水晶法（Crystal）"><a href="#水晶法（Crystal）" class="headerlink" title="水晶法（Crystal）"></a>水晶法（Crystal）</h4><p>Crystal 是一种敏捷方法，它注重团队成员的协作和沟通，强调不同规模和复杂度的软件开发项目需要采用不同的方法。Crystal 方法通过对不同的项目规模和复杂度进行分类，针对性地提供了不同的软件开发模型和方法，能够加强软件开发团队的可持续性和合作精神。</p><h4 id="并列争求法（Scrum）"><a href="#并列争求法（Scrum）" class="headerlink" title="并列争求法（Scrum）"></a>并列争求法（Scrum）</h4><p>Scrum 是一种敏捷方法，它强调团队的自我管理和创造力，通过不断迭代和反馈来持续提高软件产品的价值。Scrum 过程主要包括产品待办列表、迭代、日常会议、回顾和展示等环节，能够加强团队协作和增强开发效率。</p><h4 id="自适应软件开发（ASD）"><a href="#自适应软件开发（ASD）" class="headerlink" title="自适应软件开发（ASD）"></a>自适应软件开发（ASD）</h4><p>ASD 是一种敏捷方法，它强调团队自治和边缘化的规划，通过不断探索和实验来寻找最优解。ASD 方法主要包括多个迭代周期和完整开发周期的规划，允许团队自行确定工作重点，增强团队成员的创造力和参与程度。</p><h4 id="敏捷统一过程（AUP）"><a href="#敏捷统一过程（AUP）" class="headerlink" title="敏捷统一过程（AUP）"></a>敏捷统一过程（AUP）</h4><p>AUP 是一种敏捷方法的变体，注重详细和规范的迭代过程和文档，同时强调迭代周期的规划和管理。AUP 方法主要包括迭代周期和完整开发周期的明确，规范化的需求、设计和测试活动，能够提高软件开发的整体效率和质量。</p><h3 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h3><ol><li>设计软件系统总体结构</li></ol><ul><li>确定每个模块的功能</li><li>确定模块之间的调用关系</li><li>确定模块之间的接口</li></ul><ol><li>数据结构及数据库设计</li><li>编写概要设计文档</li><li><p>评审</p><h3 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h3></li><li><p>对每个模块进行详细的算法设计</p></li><li>对模块内的数据结构进行设计</li><li>对数据库进行物理设计</li><li>其他设计</li><li>编写详细设计说明书</li><li><p>评审</p><h3 id="系统测试"><a href="#系统测试" class="headerlink" title="系统测试"></a>系统测试</h3><p><strong>意义</strong>：系统测试是为了发现错误而执行程序的过程，成功的测试是发现了至今尚未发现的错误的测试。<br><strong>目的</strong>：测试的目的就是希望能以最少的人力和时间发现潜在的各种错误和缺陷。</p><h4 id="系统测试原则"><a href="#系统测试原则" class="headerlink" title="系统测试原则"></a>系统测试原则</h4></li><li><p>应尽早并不断地进行测试。</p></li><li>测试工作应该避免由原开发软件的人或小组承担。</li><li>在设计测试方案时，不仅要确定输入数据，而且要根据系统功能确定预期输出结果。</li><li>在设计测试用例时，不仅要设计有效、合理的输入条件，也要包含不合理、失效的输入条件。</li><li>在测试程序时，不仅要检验程序是否做了该做的事，还要校验程序是否做了不该做的事。</li><li>严格按照测试计划来进行，避免测试的随意性。</li><li>妥善保存测试计划、测试用例。</li><li>测试例子都是精心设计出来的。</li><li><p>系统测试阶段的测试目标来自于需求分析阶段。</p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3></li><li><p>单元测试的测试内容</p></li></ol><ul><li>模块接口。测试模块的数据流可以正确地流入、流出。</li><li>局部数据结构。</li><li>重要的执行路径。</li><li>出错处理。</li><li>边界条件。</li></ul><ol><li>单元测试过程</li></ol><ul><li>驱动模块。</li><li>桩模块。<h3 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h3></li></ul><ol><li>自顶向下集成测试</li></ol><p>自顶向下集成测试是一种构造软件体系结构的增量方法。</p><ol><li>自底向上集成测试</li></ol><p>自底向上集成测试就是从原子模块（程序结构的最底层构件）开始进行构造和测试。</p><h3 id="动态测试"><a href="#动态测试" class="headerlink" title="动态测试"></a>动态测试</h3><h4 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h4><ul><li>等价类划分：有效等价类、无效等价类</li><li>边界值分析</li><li>错误推测</li><li>因果图<h4 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h4></li></ul><ol><li>逻辑覆盖。逻辑覆盖考察用测试数据运行被测程序时对程序逻辑的覆盖程度</li></ol><p>逻辑覆盖标准有：语句覆盖、判定覆盖、条件覆盖、判定/条件覆盖、条件组合覆盖、路径覆盖</p><ol><li>循环覆盖</li><li>基本路径测试</li></ol><h4 id="系统维护概述"><a href="#系统维护概述" class="headerlink" title="系统维护概述"></a>系统维护概述</h4><h5 id="🔺-1-系统可维护性概念"><a href="#🔺-1-系统可维护性概念" class="headerlink" title="🔺 1. 系统可维护性概念"></a>🔺 1. 系统可维护性概念</h5><p>系统是否能被很好地维护，可以用系统的可维护性这一指标来衡量。</p><p>系统可维护性的评价指标</p><ul><li>可理解性。</li><li>可测试性。</li><li>可修改性。</li></ul><p>编写高质量文档可以提高软件开发的质量。</p><p>文档也是软件产品的一部分，没有文档的软件就不能称之为软件。</p><p>软件文档的编制在软件开发工作中占有突出的地位和相当大的工作量高质量文档对于软件产品的效益有着重要的意义。</p><p>总的来说，软件文档只好不坏，选项中说软件文档不好的就是不正确的。</p><h5 id="🔺-2-系统维护的内容及类型"><a href="#🔺-2-系统维护的内容及类型" class="headerlink" title="🔺 2.系统维护的内容及类型"></a>🔺 2.系统维护的内容及类型</h5><p>软件维护：</p><ul><li>正确性维护。正确性维护是指改正在系统开发阶段已发生而系统测试阶段尚未发现的错误。</li><li>适应性维护。适应性维护是指使应用软件适应信息技术变化和管理需求变化而进行的修改。</li><li>完善性维护。这是为扩充功能和改善性能而进行的修改，主要是指对已有的软件系统增加一些在系统分析和设计阶段中没有规定的功能与性能特征。</li><li><p>预防性维护。为了改进应用软件的可靠性和可维护性，为了适应未来的软/硬件环境的变化。</p><p>  可靠性、可用性利可维护性是软件的质量属性，软件工程中，用 0-1 之间的数来度量。<br>  可靠性是指一个系统对于给定的时间间隔内、在给定条件下无失效运作的概率。可以用 MTTF/(1+MTTF) 来度量，其中 MTTF 为平均无故障时间。<br>  可用性是在给定的时间点上，一个系统能够按照规格说明正确运作的概率。可以用 MTBF/(1+MTBF) 来度量，其中 MTBF 为平均失效间隔时间。<br>  可维护性是在给定的使用条件下，在规定的时间间隔内，使用规定的过程和资源完<br>成维护活动的概率。可以用 1/(1+MTTR) 来度量，其中 MTTR 为平均修复时间。</p><h3 id="软件质量模型"><a href="#软件质量模型" class="headerlink" title="软件质量模型"></a>软件质量模型</h3><p><img src="img/assets/1685074637082-03033021-2e2d-4fbb-a74f-0afb51fc7495.png" style="zoom: 67%;" /></p></li></ul><h2 id="第六章-结构化开发方法"><a href="#第六章-结构化开发方法" class="headerlink" title="第六章 结构化开发方法"></a>第六章 结构化开发方法</h2><h3 id="模块独立"><a href="#模块独立" class="headerlink" title="模块独立"></a>模块独立</h3><h4 id="🔺耦合"><a href="#🔺耦合" class="headerlink" title="🔺耦合"></a>🔺耦合</h4><p>耦合是模块之间的相对独立性（互相连接的紧密程度）的度量。耦合取决于各个模块之间接口的复杂程度、调用模块的方式以及通过接口的信息类型等。</p><ul><li>无直接耦合：指两个模块之间<strong>没有直接</strong>的关系，属于不同模块。</li><li>数据耦合：指两个模块之间有调用关系，传递的是简单的数据值。</li><li><strong>标记耦合</strong>：指两个模块之间传递的是数据结构。</li><li>控制耦合：指一个模块调用另一个模块时，传递的是控制变量。</li><li>外部耦合：模块间通过软件之外的环境联结。</li><li>公共耦合：通过一个<strong>公共数据环境</strong>相互作用。</li><li><p>内容耦合：当一个模块直接使用另一个模块的<strong>内部数据</strong>，或通过非正常入口转入另一个模块内部。</p><h4 id="🔺内聚"><a href="#🔺内聚" class="headerlink" title="🔺内聚"></a>🔺内聚</h4><p>内聚是对一个模块内部各个元素彼此结合的紧密程度的度量。</p></li><li><p>偶然内聚（巧合内聚）：各处理元素之间<strong>没有任何联系</strong>。</p></li><li>逻辑内聚：模块内执行若干个<strong>逻辑上</strong>相似的功能。</li><li>时间内聚：把需要<strong>同时执行的动作组合</strong>在一起。</li><li>过程内聚：指定的过程执行。</li><li>通信内聚：模块内的所有处理元素都在<strong>同一个数据结构</strong>上操作。</li><li>顺序内聚：指一个模块中的各个处理元素都密切相关于同一功能且必须顺序执行。</li><li>功能内聚：最强的内聚，指模块内的所有元素共同作用完成一个功能，缺一不可。</li></ul><p>总结：耦合性和内聚性是模块独立性的两个定性标准，在将软件系统划分模块时，应尽量做到高内聚、低耦合，提高模块的独立性。</p><h3 id="🔺系统结构设计原则"><a href="#🔺系统结构设计原则" class="headerlink" title="🔺系统结构设计原则"></a>🔺系统结构设计原则</h3><ol><li>分解-协调原则</li><li>自顶向下的原则</li><li>信息隐蔽、抽象的原则</li><li>一致性原则：统一的规范、统一的标准和统一的文件模式。</li><li><strong>明确性原则</strong>：功能明确、接口明确、消除多重功能和无用接口、避免病态连接、降低接口复杂度。</li><li><strong>模块之间的耦合尽可能小，模块的内聚度尽可能高。（高内聚、低耦合）</strong></li><li>模块的扇入系数和扇出系数要合理。（扇入扇出适中）</li><li>模块的规模适当。</li><li>模块的作用范围应该在其控制范围之内。<h3 id="数据流图"><a href="#数据流图" class="headerlink" title="数据流图"></a>数据流图</h3><a href="#article">数据流图</a></li></ol><h3 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h3><h4 id="数据字典的内容"><a href="#数据字典的内容" class="headerlink" title="数据字典的内容"></a>数据字典的内容</h4><ol><li>数据字典是为数据流图中的每个数据流、文件、加工，以及组成数据流或文件的数据项做出说明。</li><li>数据字典有4类条目：数据流、数据项、数据存储和基本加工。<h4 id="加工逻辑的描述"><a href="#加工逻辑的描述" class="headerlink" title="加工逻辑的描述"></a>加工逻辑的描述</h4>加工逻辑也称为“小说明”。加工逻辑描述方法有结构化语言、判定表和判定树。<h2 id="第七章-面向对象技术"><a href="#第七章-面向对象技术" class="headerlink" title="第七章 面向对象技术"></a>第七章 面向对象技术</h2>面向对象 = 对象（Object）+ 分类（Classification）+ 继承（Inheritance）+通过消息的通信<h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4>对象通常可由对象名、属性和方法 3 个部分组成。<h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4></li></ol><p>多态有不同的形式，分为了四类：</p><ul><li>通用的： <ul><li>参数多态：应用比较广泛的多态，被称为最纯的多态。</li><li>包含多态：在许多语言中都存在，最常见的例子就是子类型化，即一个类型是另一个类型的子类型。</li></ul></li><li>特定的： <ul><li>过载多态：同一个名字在不同的上下文中所代表的含义不同。</li><li>强制多态：通过强制类型转换（也称为强制转型）将一个对象或变量视为另一个类型的操作。</li></ul></li></ul><h4 id="面向对象设计的原则"><a href="#面向对象设计的原则" class="headerlink" title="面向对象设计的原则"></a>面向对象设计的原则</h4><p>面向对象方法中的五大原则：</p><ol><li>单一责任原则：就一个类而言，应该仅有一个引起它变化的原因。</li><li>开放-封闭原则：软件实体应该是可以扩展的，即开发的；但是不可修改的，即封闭的。<strong>（扩展开放、修改关闭）</strong></li><li>里氏替换原则： 子类型必须能够替换掉他们的基类型。<strong>（基类出现的地方，子类一定可以出现）</strong></li><li>依赖倒置原则：抽象不应该依赖于细节，细节应该依赖于抽象。<strong>（依赖于抽象，而不依赖于细节[实现]）</strong></li><li>接口分离原则：不应该强迫客户依赖于它们不用的方法。<strong>（依赖于抽象，不依赖于具体）</strong></li></ol><p>共同封闭原则：包中的所有类对于同一类性质的变化应该是共同封闭的。<strong>一个变化若对一个包产生影响，则将对该包中的所有类产生影响，而对于其他的包不造成任何影响</strong>。</p><p>共同重用原则：一个包中的所有类应该是共同重用的。<strong>如果重用了包中的一个类，那么就要重用包中的所有类</strong>。</p><p>面向对象分析包含5个活动：认定对象、组织对象、描述对象间的相互作用、确定对象的操作、定义对象的内部信息。</p><p>面向对象设计的活动（OOD在复用OOA模型的基础上，包含与OOA对应如下五个活动）：</p><ol><li>识别类及对象</li><li>定义属性</li><li>定义服务</li><li>识别关系</li><li>识别包</li></ol><h4 id="事物"><a href="#事物" class="headerlink" title="事物"></a>事物</h4><p>UML中有4中事物：</p><ol><li>结构事物：结构事物是UML模型中的<strong>名词</strong>，通常是模型的<strong>静态部分</strong>，描述概念或物理元素。</li></ol><p>   ​        <img src="img/assets/image-20230409092847753.png" style="zoom:80%;" /> </p><ol><li><p>行为事物：行为事物是UML模型的<strong>动态部分</strong>，它们是模型中的<strong>动词</strong>，描述了跨越时间和空间的行为。</p><p>​        <img src="img/assets/image-20230409092904254.png" style="zoom:80%;" /> </p></li><li><p>分组事物：分组事物是UML模型的<strong>组织部分</strong>，是一些由模型分解成“盒子”。</p><p>​                                                    <img src="img/assets/image-20230409093138336.png" style="zoom:80%;" /> </p></li><li><p>注释事物：注释事物是UML模型的解释部分。这些注释事物用来描述、说明和标注模型的任何元素。</p><p>​                                                <img src="img/assets/image-20230409093316591.png" style="zoom:80%;" /> </p></li></ol><h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><p>UML中有4种关系：依赖、关联、泛化和实现。</p><ol><li><p>依赖：依赖是两个事物间的<strong>语义关系</strong>，其中一个事物（独立事物）发生变化会影响另一个事物（依赖事物）的语义。</p><p>​            <img src="img/assets/image-20230409095010416.png" style="zoom:80%;" /><br>​                <img src="img/assets/image-20230409095211029.png" style="zoom:80%;" /> </p></li><li><p>关联：关联是一种<strong>结构关系</strong>，它描述了一组链，链是对象之间的连接。<br><img src="img/assets/image-20230409095312439.png" alt=""> </p><ul><li>聚合：部分和整体的生命周期不一致，整体消失了，部分仍然存在，部分可以脱离整体存在。 <img src="img/assets/image-20230409100146317.png" alt=""> </li><li>组合：部分和整体的生命周期一致，整体消失了，部分也消失了，部分不可以脱离整体存在。 <img src="img/assets/image-20230409100242135.png" alt=""> </li></ul></li><li><p>泛化：泛化是一种特殊/一般关系，特殊元素（子元素）的对象可替代一般元素（父元素）的对象。子元素共享了父元素的结构和行为。 <img src="img/assets/image-20230409100634668.png" alt=""> </p></li><li><p>实现（了解）：实现是类元之间的语义关系，其中一个类元指定了由另一个类元保证执行的契约。 <img src="img/assets/image-20230409101019308.png" alt=""> </p></li></ol><h3 id="UML-中的图"><a href="#UML-中的图" class="headerlink" title="UML 中的图"></a>UML 中的图</h3><h4 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h4><p>类图（Class Diagram）展现了一组<strong>对象、接口、协作</strong>和它们之间的关系。</p><p>符号：</p><p><code>+</code> : public 公有的</p><p><code>-</code>  : private 私有的</p><p><code>#</code> : protected 受保护的</p><p><code>~</code> : package 包的</p><p>🔺通常以下述3种方式之一使用类图：</p><ol><li>对系统的词汇建模。</li><li>对简单的协作建模。</li><li>对逻辑数据库模式建模。</li></ol><p>​                                        <img src="img/assets/1685076961406-e231bd41-5363-4450-b54e-a54309c0ca1f.png" alt="image.png" style="zoom:50%;" /></p><h4 id="对象图"><a href="#对象图" class="headerlink" title="对象图"></a>对象图</h4><p>对象图（Object Diagram）展现了某一时刻<strong>一组对象</strong>以及它们之间的关系，描述了在类图中所建立的事物的实例的<strong>静态快照</strong>。</p><p>对象图给出系统的<strong>静态设计视图</strong>或<strong>静态进程视图</strong>。<br><img src="img/assets/1685076987965-4eb8a665-addc-4c1c-b5e9-d8be10efe4b0.png" alt=""></p><h4 id="🔺用例图（P368"><a href="#🔺用例图（P368" class="headerlink" title="🔺用例图（P368)"></a>🔺用例图（P368)</h4><p>用例图（Use Case Diagram）展现了一组用例、参与制（Actor）以及它们之间的关系。</p><p>一个用例执行的时候，可能会发生一些特殊的情况或可选的情况，这种情况就是这个用例的扩展用例。</p><p>参与者：参与者是与系统交互的<strong>外部实体</strong>，可能是使用者，也可能是与系统交互的外部系统、基础设备等。</p><p>用例：用例是从用户角度描述系统的行为，它将系统的一个功能描述成<strong>一系列的事件</strong>，这些事件最终对操作者产生有价值的观测结果。用例是一个类，它代表一类功能而不是使用该功能的某一具体实例。</p><p><strong>之间的关系：</strong></p><ol><li>包含关系（用例之间）</li><li>扩展关系（用例之间）</li><li>关联关系（参与者和用例之间）</li><li>泛化关系（用例与用例以及参与者与参与者之间）</li></ol><p>用例图用于对系统的静态用例视图进行建模。</p><p>可用以下两种方式来使用用例图：</p><ol><li>对系统的语境建模。</li><li>对系统的需求建模。</li></ol><p><img src="img/assets/1685077023148-90ee2ff1-8953-4b90-9477-933822d2bfdd.png" alt=""></p><h4 id="交互图"><a href="#交互图" class="headerlink" title="交互图"></a>交互图</h4><p>交互图用于对系统的动态方面进行建模。一张交互图表现的是一个交互，由一组对象和它们之间的关系组成。包含它们之间可能传递的消息。</p><ol><li><p><strong>序列图</strong>（顺序图、时序图） ：序列图是场景的图形化表示，描述了以时间顺序组织的对象之间的交互活动。<br>序列图有两个不同于通信图的特征： </p><ul><li><p>序列图有对象生命线</p></li><li><p>序列图有控制焦点</p><p><img src="img/assets/1685077053930-8b8cd48a-5630-4c44-bcf4-0e75c834b214.png" alt=""></p></li></ul></li><li><p><strong>通信图</strong>（协作图）：通信图强调收发消息的对象的结构组织，在早期的版本中也被称作协作图。<br>通信图有两个不同于序列图的特性： </p><ul><li>通信图有路径</li><li>通信图有顺序号</li></ul></li><li><p>交互概览图 </p></li><li><p>计时图 </p></li></ol><p><img src="img/assets/1685077109313-f06ed824-0232-4854-80ba-768c8fd969ed.png" alt=""></p><h4 id="🔺状态图"><a href="#🔺状态图" class="headerlink" title="🔺状态图"></a>🔺状态图</h4><p>状态图（State Diagram）展现了一个<strong>状态机</strong>，它由状态、转换、事件和活动组成。</p><p>可以用状态图对系统的<strong>动态方面</strong>建模。当对系统、类或用例的动态方面建模时，通常是对<strong>反应型对象建模</strong>。</p><p>定义的状态主要有：初态（即初始状态）、终态（即最终状态）和中间状态。</p><p>三种标准事件：entry、exit、do</p><ul><li>entry：入口动作，进入状态立即执行</li><li>exit：出口动作，退出状态立即执行</li><li>do：内部活动，占有限时间，并可以中断的工作</li></ul><p>事件是在某个特定时刻发生的事情，它是对引起系统做动作或（和）从一个状态转换到另一个状态的外界事件的抽象。</p><p>转换包括两个状态（源状态，目标状态）</p><p>事件，监护条件，动作<br><img src="img/assets/202306082348213.png" alt=""><br><strong>事件触发转换（迁移)</strong></p><p>活动（动作）可以在状态（迁移）内执行，也可以在状态转换时执行。</p><p>监护条件是一个布尔表达式。</p><h4 id="活动图"><a href="#活动图" class="headerlink" title="活动图"></a>活动图</h4><p>活动图（Activity Diagram）是一种特殊的状态图，它展现了在系统内从一个活动到另一个活动的流程。</p><p>活动图一般包括活动状态和动作状态、转换和对象。</p><p>通常有两种使用活动图的方式:</p><ol><li>对工作流建模。</li><li>对操作建模。</li></ol><p>​                                                <img src="img/assets/1685077163333-295177ac-f4ad-4a95-a65d-9dc2236c6395.png" style="zoom: 50%;" /></p><h4 id="构件图（组件图）"><a href="#构件图（组件图）" class="headerlink" title="构件图（组件图）"></a>构件图（组件图）</h4><p>构件图（Component Diagram）展现了一组构件之间的组织和依赖。</p><p>构件图专注于系统的静态实现试图。</p><p>​                                                <img src="img/assets/image-20230411155910646.png" style="zoom:67%;" /><br>​                        <img src="img/assets/1685077213263-61f53031-dd07-45bd-85e1-97d4dd9a4ebe.png" style="zoom: 67%;" /></p><h4 id="部署图"><a href="#部署图" class="headerlink" title="部署图"></a>部署图</h4><p>部署图（Deployment Diagram）是用来对面向对象系统的<strong>物理方面</strong>建模的方法，展现了运行时处理结点以及其中构件（制品）的配置。</p><p>部署图展现了系统的软件和硬件之间的关系，在实施阶段使用。<br>                                                <img src="img/assets/1685077237730-1e8c994a-45de-465b-808e-282db502f286.png" style="zoom:67%;" /></p><h4 id="UML图汇总"><a href="#UML图汇总" class="headerlink" title="UML图汇总"></a>UML图汇总</h4><ul><li>静态建模：类图、对象图、用例图</li><li>动态建模：序列图（顺序图、时序图）、通信图（协作图）、状态图、活动图</li><li>物理建模：构件图（组件图）、部署图</li><li>交互图：序列图（顺序图、时序图）、通信图（协作图）</li></ul><h4 id="🔺设计模式"><a href="#🔺设计模式" class="headerlink" title="🔺设计模式"></a>🔺设计模式</h4><h5 id="设计模式的要素"><a href="#设计模式的要素" class="headerlink" title="设计模式的要素"></a>设计模式的要素</h5><p>设计模式的核心在于提供了相关问题的解决方案，使得人们可以更加简单方便地<strong>复用成功的设计和体系结构</strong>。</p><p>设计模式基本要素：</p><ul><li>模式名称（Pattern Name)</li><li>问题（Problem）</li><li>解决方案（Solution）</li><li>效果（Consequences）</li></ul><p>​                        <img src="img/assets/image-20230417151608470.png" style="zoom:50%;" /></p><h5 id="创建型设计模式（5种）"><a href="#创建型设计模式（5种）" class="headerlink" title="创建型设计模式（5种）"></a>创建型设计模式（5种）</h5><h5 id="1-Simple-Factory（简单工厂）"><a href="#1-Simple-Factory（简单工厂）" class="headerlink" title="1. Simple Factory（简单工厂）"></a>1. Simple Factory（简单工厂）</h5><p>简单工厂模式属创建型模式，但不属于23种设计模式之一。</p><p>定义：定义一个工厂类，他可以根据参数的不同返回不同类的实例，被创建的实例通常都具有共同的父类。<br>在简单工厂模式中用于被创建实例的方法通常为静态(static)方法，因此简单工厂模式又被成为静态工厂方法(Static Factory Method)。</p><p>​                                                                <img src="img/assets/image-20230414101050042.png" style="zoom:50%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 顾梦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023/4/14</span></span><br><span class="line"><span class="comment"> * 简单工厂模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">productA</span> <span class="operator">=</span> Factory.createProduct(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        productA.info();</span><br><span class="line"></span><br><span class="line">        <span class="type">Product</span> <span class="variable">productB</span> <span class="operator">=</span> Factory.createProduct(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        productB.info();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Product <span class="title function_">createProduct</span><span class="params">(String type)</span>&#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (type)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;A&quot;</span>:</span><br><span class="line">                product = <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;B&quot;</span>:</span><br><span class="line">                product = <span class="keyword">new</span> <span class="title class_">ProductB</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;没有 &quot;</span> + type + <span class="string">&quot; 类型的产品！&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Product</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA</span> <span class="keyword">extends</span> <span class="title class_">Product</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;产品的信息：A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductB</span> <span class="keyword">extends</span> <span class="title class_">Product</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;产品的信息：B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-Factory-Method（工厂方法）"><a href="#2-Factory-Method（工厂方法）" class="headerlink" title="2. Factory Method（工厂方法）"></a>2. Factory Method（工厂方法）</h5><p>1）意图</p><p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method 使一个类的实例化延迟到其子类。</p><p>2）结构</p><p>​                                                    <img src="img/assets/image-20230414103527217.png" style="zoom:50%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 顾梦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023/4/14</span></span><br><span class="line"><span class="comment"> * 工厂方法模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 父类 对象名 = new 子类();</span></span><br><span class="line">        <span class="type">Factory</span> <span class="variable">factoryA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FactoryA</span>();</span><br><span class="line">        <span class="type">Product</span> <span class="variable">productA</span> <span class="operator">=</span> factoryA.createProduct();</span><br><span class="line">        productA.info();</span><br><span class="line"></span><br><span class="line">        <span class="type">Factory</span> <span class="variable">factoryB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FactoryB</span>();</span><br><span class="line">        <span class="type">Product</span> <span class="variable">productB</span> <span class="operator">=</span> factoryB.createProduct();</span><br><span class="line">        productB.info();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line">   Product <span class="title function_">createProduct</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FactoryA</span> <span class="keyword">implements</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">createProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FactoryB</span> <span class="keyword">implements</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">createProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Product</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA</span> <span class="keyword">implements</span> <span class="title class_">Product</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;产品的信息：A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductB</span> <span class="keyword">implements</span> <span class="title class_">Product</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;产品的信息：B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）适用性</p><p>Factory Method 模式适用于：</p><ul><li>当一个类不知道它所必须创建的对象的类的时候。</li><li>当一个类希望由它的子类来指定它所创建的对象的时候。</li><li>当类将创建对象的职责委托给多个帮助子类中的某一个，并且你希望将哪一个帮助子类是代理者这一信息局部化的时候。</li></ul><h5 id="3-Abstract-Factory（抽象工厂）"><a href="#3-Abstract-Factory（抽象工厂）" class="headerlink" title="3. Abstract Factory（抽象工厂）"></a>3. Abstract Factory（抽象工厂）</h5><p>1）意图</p><p>提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。</p><p>2）结构</p><p><img src="img/assets/image-20230414113152451.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 顾梦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023/4/14</span></span><br><span class="line"><span class="comment"> * 抽象工厂模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Factory</span> <span class="variable">factory1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Factory1</span>();</span><br><span class="line">        <span class="type">ProductA</span> <span class="variable">productA1</span> <span class="operator">=</span> factory1.createProductA();</span><br><span class="line">        productA1.info();</span><br><span class="line">        <span class="type">ProductB</span> <span class="variable">productB1</span> <span class="operator">=</span> factory1.createProductB();</span><br><span class="line">        productB1.info();</span><br><span class="line"></span><br><span class="line">        <span class="type">Factory</span> <span class="variable">factory2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Factory2</span>();</span><br><span class="line">        <span class="type">ProductA</span> <span class="variable">productA2</span> <span class="operator">=</span> factory2.createProductA();</span><br><span class="line">        productA2.info();</span><br><span class="line">        <span class="type">ProductB</span> <span class="variable">productB2</span> <span class="operator">=</span> factory2.createProductB();</span><br><span class="line">        productB2.info();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个创建抽象产品对象的操作接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line">   ProductA <span class="title function_">createProductA</span><span class="params">()</span>;</span><br><span class="line">   ProductB <span class="title function_">createProductB</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现创建具体产品对象的操作</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory1</span> <span class="keyword">implements</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ProductA <span class="title function_">createProductA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA1</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ProductB <span class="title function_">createProductB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductB1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory2</span> <span class="keyword">implements</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ProductA <span class="title function_">createProductA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA2</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ProductB <span class="title function_">createProductB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductB2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为一类产品对象声明一个接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ProductA</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ProductB</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一将被相应的具体工厂创建的产品对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA1</span> <span class="keyword">implements</span> <span class="title class_">ProductA</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;产品的信息：A1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA2</span> <span class="keyword">implements</span> <span class="title class_">ProductA</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;产品的信息：A2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductB1</span> <span class="keyword">implements</span> <span class="title class_">ProductB</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;产品的信息：B1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductB2</span> <span class="keyword">implements</span> <span class="title class_">ProductB</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;产品的信息：B2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）适用性</p><p>Abstract Factory 模式适用于：</p><ul><li>一个系统要独立于它的产品的创建、组合和表示时。</li><li>一个系统要由多个产品系列中的一个来配置时。</li><li>当要强调一系列相关的产品对象的设计以便进行联合使用时。</li><li>当提供一个产品类库，只想显示它们的接口而不是实现时。</li></ul><h5 id="4-Builder（生成器）"><a href="#4-Builder（生成器）" class="headerlink" title="4. Builder（生成器）"></a>4. Builder（生成器）</h5><p>1）意图</p><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><p>2）结构</p><p><img src="img/assets/image-20230414134325945.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 顾梦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023/4/14</span></span><br><span class="line"><span class="comment"> * 生成器模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Director</span> <span class="variable">director</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Builder</span> <span class="variable">builder1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Builder1</span>();</span><br><span class="line">        director.Construct(builder1);</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product1</span> <span class="operator">=</span> builder1.getResult();</span><br><span class="line">        product1.show();</span><br><span class="line"></span><br><span class="line">        <span class="type">Builder</span> <span class="variable">builder2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Builder2</span>();</span><br><span class="line">        director.Construct(builder2);</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product2</span> <span class="operator">=</span> builder2.getResult();</span><br><span class="line">        product2.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Director</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Construct</span><span class="params">(Builder builder)</span>&#123;</span><br><span class="line">        builder.BuildPart();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Builder</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">BuildPart</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title function_">getResult</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Builder1</span> <span class="keyword">extends</span> <span class="title class_">Builder</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BuildPart</span><span class="params">()</span> &#123;</span><br><span class="line">        product.add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        product.add(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        product.add(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        product.add(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">        product.add(<span class="string">&quot;E&quot;</span>);</span><br><span class="line">        product.add(<span class="string">&quot;F&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Builder2</span> <span class="keyword">extends</span> <span class="title class_">Builder</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">BuildPart</span><span class="params">()</span> &#123;</span><br><span class="line">        product.add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        product.add(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        product.add(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span>&#123;</span><br><span class="line">    List&lt;String&gt; parts = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String part)</span>&#123;</span><br><span class="line">        parts.add(part);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;产品的组成：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String part : parts) &#123;</span><br><span class="line">            System.out.print(part + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）适用性</p><p>Builder 模式适用于：</p><ul><li>当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时。</li><li>当构造过程必须允许被构造的对象有不同的表示时。</li></ul><h5 id="5-Prototype（原型）"><a href="#5-Prototype（原型）" class="headerlink" title="5. Prototype（原型）"></a>5. Prototype（原型）</h5><p>1）意图</p><p>用原型实例指定创建对象的种类，并且通过复制这些原型创建新的对象。</p><p>2）结构</p><p>其中：</p><ul><li>Prototype声明一个复制自身的接口。</li><li>ConcretePrototype 实现一个复制自身的操作。</li><li>Client 让一个原型复制自身从而创建一个新的对象</li></ul><p><img src="img/assets/image-20230414145403104.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 顾梦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023/4/14</span></span><br><span class="line"><span class="comment"> * 原型模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>(<span class="number">2022</span>,<span class="number">5.28</span>);</span><br><span class="line">        System.out.println(product1.getId()+ <span class="string">&quot; &quot;</span> + product1.getPrice());</span><br><span class="line"></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product2</span> <span class="operator">=</span> (Product) product1.Chlone();</span><br><span class="line">        System.out.println(product2.getId()+ <span class="string">&quot; &quot;</span> + product2.getPrice());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Prototype</span>&#123;</span><br><span class="line">    Object <span class="title function_">Chlone</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span> <span class="keyword">implements</span> <span class="title class_">Prototype</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Product</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Product</span><span class="params">(<span class="type">int</span> id,<span class="type">double</span> price)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">Chlone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line">        object.id = <span class="built_in">this</span>.id;</span><br><span class="line">        object.price = <span class="built_in">this</span>.price;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）适用性</p><p>Prototype 模式适用于：</p><ul><li>当一个系统应该独立于它的产品创建、构成和表示时。</li><li>当要实例化的类是在运行时刻指定时，例如，通过动态装载。</li><li>为了避免创建一个与产品类层次平行的工厂类层次时。</li><li>当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们，可能比每次用合适的状态手工实例化该类更方便一些。</li></ul><h5 id="6-Singleton（单例）"><a href="#6-Singleton（单例）" class="headerlink" title="6. Singleton（单例）"></a>6. Singleton（单例）</h5><p>1）意图</p><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p>2）结构</p><p><img src="img/assets/image-20230414153516687.png" alt=""></p><p>其中：Singleton指定一个Instance操作，允许客户访问它的唯一实例，Instance是一个类</p><p>操作：可能负责创建它自己的唯一实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 顾梦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023/4/14</span></span><br><span class="line"><span class="comment"> * 单例模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance1</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance2</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance3</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;instance1: &quot;</span> + instance1);</span><br><span class="line">        System.out.println(<span class="string">&quot;instance2: &quot;</span> + instance2);</span><br><span class="line">        System.out.println(<span class="string">&quot;instance3: &quot;</span>+ instance3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="img/assets/image-20230414154430890.png" alt=""></p><p>3）适用性<br>Singleton 模式适用于：</p><ul><li>当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时。</li><li>当这个唯一实例应该是通过子类化可扩展的，并且客户无须更改代码就能使用一个扩展的实例时。</li></ul><h4 id="结构型设计模式（7种）"><a href="#结构型设计模式（7种）" class="headerlink" title="结构型设计模式（7种）"></a>结构型设计模式（7种）</h4><h5 id="1-Adapter（适配器）"><a href="#1-Adapter（适配器）" class="headerlink" title="1. Adapter（适配器）"></a>1. Adapter（适配器）</h5><p>1）意图</p><p>将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><p>2）结构</p><p><img src="img/assets/image-20230414161840751.png" alt=""></p><p>其中：</p><ul><li>Target定义Client使用的与特定领域相关的接口。</li><li>Client与符合Target接口的对象协同。</li><li>Adaptee定义一个已经存在的接口，这个接口需要适配。</li><li>Adapter对Adaptee的接口与Target接口进行适配。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 顾梦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023/4/14</span></span><br><span class="line"><span class="comment"> * 适配器模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdapterPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adapter</span>();</span><br><span class="line">        target.Request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Target</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Request</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通请求~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 适配器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Adapter</span> <span class="keyword">extends</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Adaptee</span> <span class="variable">adaptee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Adaptee</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Request</span><span class="params">()</span> &#123;</span><br><span class="line">        adaptee.SpecificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Adaptee</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SpecificRequest</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;特殊请求~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）适用性</p><p>Adapter 模式适用于：</p><ul><li><strong>想使用一个已经存在的类，而它的接口不符合要求。</strong></li><li>想创建一个可以服用的类，该类可以与其他不相关的类或不可预见的类（即那些接口可能不一定兼容的类)协同工作。（了解）</li><li>(仅适用于对象Adapter)想使用一个已经存在的子类，但是不可能对每一个都进行子<br>类化以匹配它们的接口。对象适配器可以适配它的父类接口。（了解）</li></ul><h5 id="🔺2-Bridge（桥接）"><a href="#🔺2-Bridge（桥接）" class="headerlink" title="🔺2. Bridge（桥接）"></a>🔺2. Bridge（桥接）</h5><p>1）意图</p><p>将抽象部分与其实现部分分离，使它们都可以独立地变化。</p><p>2）结构</p><p><img src="img/assets/image-20230414163901596.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 顾梦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023/4/14</span></span><br><span class="line"><span class="comment"> * 桥接模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BridgePattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">productA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line">        <span class="type">Product</span> <span class="variable">productB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Color</span> <span class="variable">red</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Red</span>();</span><br><span class="line">        productA.setName(<span class="string">&quot;产品A&quot;</span>);</span><br><span class="line">        productA.setColor(red);</span><br><span class="line">        productA.Operation();</span><br><span class="line"></span><br><span class="line">        <span class="type">Blue</span> <span class="variable">blue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Blue</span>();</span><br><span class="line">        productB.setName(<span class="string">&quot;产品B&quot;</span>);</span><br><span class="line">        productB.setColor(blue);</span><br><span class="line">        productB.Operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Product</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> Color color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(Color color)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Operation</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Color</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">OperationImpl</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductA</span> <span class="keyword">extends</span> <span class="title class_">Product</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Operation</span><span class="params">()</span> &#123;</span><br><span class="line">        color.OperationImpl(<span class="built_in">this</span>.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Red</span> <span class="keyword">implements</span> <span class="title class_">Color</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">OperationImpl</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;: 红色&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Blue</span> <span class="keyword">implements</span> <span class="title class_">Color</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">OperationImpl</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;: 蓝色&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）适用性（了解）</p><p>Bridge 模式适用于：</p><p>不希望在抽象和它的实现部分之间有一个固定的绑定关系。<br>类的抽象以及它的实现都应该可以通过生成子类的方法加以扩充。<br>对一个抽象的实现部分的修改应对客户不产生影响，即客户代码不必重新编译。<br>(C++)想对客户完全隐藏抽象的实现部分。<br>有许多类要生成的类层次结构。<br>想在多个对象间共享实现（可能使用引用计数），但同时要求客户并不知道这一点。</p><h5 id="🔺3-Composite（组合）"><a href="#🔺3-Composite（组合）" class="headerlink" title="🔺3. Composite（组合）"></a>🔺3. Composite（组合）</h5><p>1）意图</p><p>将对象组合成树型结构以表示“部分-整体”的层次结构。Composite 使得用户对单个对象<br>和组合对象的使用具有一致性。</p><p>2）结构</p><p>​        <img src="img/assets/image-20230415091034585.png" style="zoom: 67%;" /></p><p>其中：</p><ul><li>Component 为组合中的对像声明接口：在适当情况下实现所有类共有接口的默认行为：<br>声明一个接口用于访问和管理 Component 的子组件；（可选）在递归结构中定义一个<br>接口，用于访问一个父组件，并在合适的情况下实现它。 </li><li>Leaf 在组合中表示叶结点对象，叶结点没有子结点；在组合中定义图元对象的行为。 </li><li>Composite定义有子组件的那些组件的行为；存储子组件；在Component接口中实现<br>与子组件有关的操作。 </li><li>Client 通过 Component 接口操纵组合组件的对象。 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 顾梦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023/4/15</span></span><br><span class="line"><span class="comment"> * 组合模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompositePattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 父类名 对象名 = new 子类名();</span></span><br><span class="line">        <span class="type">AbstractFile</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Folder</span>(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">AbstractFile</span> <span class="variable">folderA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Folder</span>(<span class="string">&quot;folderA&quot;</span>);</span><br><span class="line">        <span class="type">AbstractFile</span> <span class="variable">folderB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Folder</span>(<span class="string">&quot;folderB&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">AbstractFile</span> <span class="variable">fileC</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;fileC&quot;</span>);</span><br><span class="line">        <span class="type">AbstractFile</span> <span class="variable">fileD</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;fileD&quot;</span>);</span><br><span class="line">        <span class="type">AbstractFile</span> <span class="variable">fileE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;fileE&quot;</span>);</span><br><span class="line"></span><br><span class="line">        root.Add(folderA);</span><br><span class="line">        root.Add(folderB);</span><br><span class="line">        root.Add(fileC);</span><br><span class="line"></span><br><span class="line">        folderA.Add(fileD);</span><br><span class="line">        folderA.Add(fileE);</span><br><span class="line"></span><br><span class="line">        print(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(AbstractFile file)</span>&#123;</span><br><span class="line">        file.printName();</span><br><span class="line"></span><br><span class="line">        List&lt;AbstractFile&gt; childrenList = file.getChildren();</span><br><span class="line">        <span class="keyword">if</span> (childrenList == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (AbstractFile children : childrenList) &#123;</span><br><span class="line">            print(children);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractFile</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printName</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">Add</span><span class="params">(AbstractFile file)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">Remove</span><span class="params">(AbstractFile file)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> List&lt;AbstractFile&gt; <span class="title function_">getChildren</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Folder</span> <span class="keyword">extends</span> <span class="title class_">AbstractFile</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;AbstractFile&gt; childrenList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Folder</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">Add</span><span class="params">(AbstractFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> childrenList.add(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">Remove</span><span class="params">(AbstractFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> childrenList.remove(file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;AbstractFile&gt; <span class="title function_">getChildren</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> childrenList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">File</span> <span class="keyword">extends</span> <span class="title class_">AbstractFile</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">File</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">Add</span><span class="params">(AbstractFile filei)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">Remove</span><span class="params">(AbstractFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;AbstractFile&gt; <span class="title function_">getChildren</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）适用性</p><p>Composite 模式下适用于：</p><ul><li>想表示对象的部分-整体层次结构。</li><li>希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</li></ul><h5 id="4-Decorator（装饰器）"><a href="#4-Decorator（装饰器）" class="headerlink" title="4. Decorator（装饰器）"></a>4. Decorator（装饰器）</h5><p>1）意图</p><p>动态地给一个对象添加一些额外的职责。就增加功能而言，Decorator模式比生成子类更加<br>灵活。</p><p>2）结构</p><p><img src="img/assets/image-20230415103943593.png" alt=""></p><p>其中：</p><ul><li>Component定义一个对象接口，可以给这些对象动态地添加职责。</li><li>ConcreteComponent定义一个对象，可以给这个对象添加一些职责。</li><li>Decorator 维持一个指向 Component 对象的指针，并定义一个与Component 接口一致的接口。</li><li>ConcreteDecorator 向组件添加职责。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 顾梦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023/4/15</span></span><br><span class="line"><span class="comment"> * 装饰器模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DecoratorPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">zhangsan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        zhangsan = <span class="keyword">new</span> <span class="title class_">DecoratorA</span>(zhangsan);</span><br><span class="line">        zhangsan = <span class="keyword">new</span> <span class="title class_">DecoratorB</span>(zhangsan);</span><br><span class="line">        zhangsan.Operation();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==========分割线==============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对像链</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">lisi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecoratorB</span>(<span class="keyword">new</span> <span class="title class_">DecoratorA</span>(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>)));</span><br><span class="line">        lisi.Operation();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Decorator</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Person person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DecoratorA</span> <span class="keyword">extends</span> <span class="title class_">Decorator</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DecoratorA</span><span class="params">(Person person)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.person = person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Operation</span><span class="params">()</span> &#123; <span class="comment">// 职责</span></span><br><span class="line">        person.Operation(); <span class="comment">// 原本的职责</span></span><br><span class="line">        System.out.println(<span class="string">&quot;写作业~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DecoratorB</span> <span class="keyword">extends</span> <span class="title class_">Decorator</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DecoratorB</span><span class="params">(Person person)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.person = person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Operation</span><span class="params">()</span> &#123; <span class="comment">// 职责</span></span><br><span class="line">        person.Operation(); <span class="comment">// 原本的职责</span></span><br><span class="line">        System.out.println(<span class="string">&quot;考试~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Operation</span><span class="params">()</span>; <span class="comment">// 职责</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Operation</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;的职责：学习~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）适用性</p><p>Decorator 模式适用于：</p><ul><li>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。</li><li>处理那些可以撤销的职责。</li><li>当不能采用生成子类的方式进行扩充时。一种情况是，可能有大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长。另一种情况可能是，由于类定义被隐藏，或类定义不能用于生成子类。（了解）</li></ul><h5 id="5-Facade（外观）"><a href="#5-Facade（外观）" class="headerlink" title="5. Facade（外观）"></a>5. Facade（外观）</h5><p>1）意图</p><p>为子系统中的一组接口提供一个一致的界面，Facade 模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p><p>2）结构</p><p><img src="img/assets/image-20230415135923577.png" alt=""></p><p>其中：</p><ul><li>Facade知道哪些子系统类负责处理请求；将客户的请求代理给适当的子系统对象。</li><li>Subsystem classes实现子系统的功能；处理有Facade对象指派的任务；没有Facade的<br>任何相关信息，即没有指向Facade的指针。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 顾梦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023/4/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FacadePattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Facade</span> <span class="variable">facade</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Facade</span>();</span><br><span class="line"></span><br><span class="line">        facade.methodA();</span><br><span class="line">        facade.methodB();</span><br><span class="line">        facade.methodC();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Facade</span>&#123;</span><br><span class="line">    SubSystemOne subSystemOne;</span><br><span class="line">    SubSystemTwo subSystemTwo;</span><br><span class="line">    SubSystemThree subSystemThree;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Facade</span><span class="params">()</span>&#123;</span><br><span class="line">        subSystemOne = <span class="keyword">new</span> <span class="title class_">SubSystemOne</span>();</span><br><span class="line">        subSystemTwo = <span class="keyword">new</span> <span class="title class_">SubSystemTwo</span>();</span><br><span class="line">        subSystemThree = <span class="keyword">new</span> <span class="title class_">SubSystemThree</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span>&#123;</span><br><span class="line">        subSystemOne.methodOne();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodB</span><span class="params">()</span>&#123;</span><br><span class="line">        subSystemTwo.methodTwo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodC</span><span class="params">()</span>&#123;</span><br><span class="line">        subSystemThree.methodThree();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubSystemOne</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodOne</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行子系统一的功能~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubSystemTwo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodTwo</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行子系统二的功能~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubSystemThree</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodThree</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行子系统三的功能~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）适用性</p><p>Facade 模式适用于：</p><ul><li>要为一个复杂子系统提供一个简单接口时。</li><li>客户程序与抽象类的实现部分之间存在着很大的依赖性。</li><li>当需要构建一个层次结构的子系统时，使用 Facade 模式定义子系统中每层的入口点。</li></ul><h5 id="6-Flyweight（享元）"><a href="#6-Flyweight（享元）" class="headerlink" title="6. Flyweight（享元）"></a>6. Flyweight（享元）</h5><p>1）意图</p><p>运用共享技术有效地支持大量细粒度的对象。</p><p>2）结构</p><p>​        <img src="img/assets/image-20230415145022868.png" style="zoom:67%;" /></p><p>其中：</p><ul><li>Flyweight 描述一个接口，通过这个接口 Flyweight 可以接受并作用于外部状态。</li><li>ConcreteFlyweight 实现Flyweight接口，并为内部状态（如果有）增加存储空间。</li><li>ConcreteFlyweight 对象必须是可共享的。它所存储的状态必须是内部的，即它必须独<br>立于 ConcreteFlyweight 对象的场景。</li><li>并非所有的 Flyweight 子类都需要被共享。Flyweight 接口使共享成为可能，但它并不<br>强制共享。在 Flyweight 对象结构的某些层次，UnsharedConcreteFlyweight 对象通常将<br>ConcreteFlyweight 对象作为子结点。</li><li>FlyweightFactory 创建并管理Flyweight对象；确保合理地共享Flyweight,当用户请求<br>一个Flyweight时，FlyweightFactory 对象提供一个已创建的实例或者在不存在时创建<br>个实例。</li><li>Client 维持一个对 Flyweight 的引用；计算或存储一个或多个 Flyweight 的外部状态。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 顾梦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023/4/15</span></span><br><span class="line"><span class="comment"> * 享元模式 案例1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlyweightPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PieceFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PieceFactory</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Piece</span> <span class="variable">whitePiece1</span> <span class="operator">=</span> factory.getPiece(<span class="number">0</span>);</span><br><span class="line">        whitePiece1.draw(<span class="number">66</span>,<span class="number">87</span>);</span><br><span class="line">        System.out.println(whitePiece1);</span><br><span class="line"></span><br><span class="line">        <span class="type">Piece</span> <span class="variable">blackPiece1</span> <span class="operator">=</span> factory.getPiece(<span class="number">1</span>);</span><br><span class="line">        blackPiece1.draw(<span class="number">20</span>,<span class="number">11</span>);</span><br><span class="line">        System.out.println(blackPiece1);</span><br><span class="line"></span><br><span class="line">        <span class="type">Piece</span> <span class="variable">whitePiece2</span> <span class="operator">=</span> factory.getPiece(<span class="number">0</span>);</span><br><span class="line">        whitePiece1.draw(<span class="number">26</span>, <span class="number">54</span>);</span><br><span class="line">        System.out.println(whitePiece2);</span><br><span class="line"></span><br><span class="line">        <span class="type">Piece</span> <span class="variable">blackPiece2</span> <span class="operator">=</span> factory.getPiece(<span class="number">1</span>);</span><br><span class="line">        blackPiece2.draw(<span class="number">12</span>, <span class="number">34</span>);</span><br><span class="line">        System.out.println(blackPiece2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PieceFactory</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Piece[] pieces = &#123;<span class="keyword">new</span> <span class="title class_">WhitePiece</span>(),<span class="keyword">new</span> <span class="title class_">BlackPiece</span>()&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Piece <span class="title function_">getPiece</span><span class="params">(<span class="type">int</span> key)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="number">0</span>) <span class="keyword">return</span> pieces[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> pieces[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Piece</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WhitePiece</span> <span class="keyword">extends</span> <span class="title class_">Piece</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WhitePiece</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.color = <span class="string">&quot;white&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;draw a color: &quot;</span>+color + <span class="string">&quot; piece x: &quot;</span> + x + <span class="string">&quot; y:　&quot;</span> + y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BlackPiece</span> <span class="keyword">extends</span> <span class="title class_">Piece</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BlackPiece</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.color = <span class="string">&quot;black&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;draw a color: &quot;</span> + color + <span class="string">&quot; piece x: &quot;</span> + x + <span class="string">&quot; y:　&quot;</span> + y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 顾梦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023/4/15</span></span><br><span class="line"><span class="comment"> * 享元模式 案例2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlyweightPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ShapeFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShapeFactory</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        String[] colors = &#123;<span class="string">&quot;red&quot;</span>,<span class="string">&quot;blue&quot;</span>,<span class="string">&quot;green&quot;</span>,<span class="string">&quot;whilte&quot;</span>,<span class="string">&quot;black&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> random.nextInt(colors.length);</span><br><span class="line">            <span class="type">Shape</span> <span class="variable">shape</span> <span class="operator">=</span> factory.getShape(colors[x]);</span><br><span class="line">            System.out.print(<span class="string">&quot;第&quot;</span> + i + <span class="string">&quot;个圆：&quot;</span>);</span><br><span class="line">            shape.draw(random.nextInt(<span class="number">2022</span>),random.nextInt(<span class="number">528</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShapeFactory</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Shape&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Shape <span class="title function_">getShape</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!map.containsKey(key)) &#123;</span><br><span class="line">            map.put(key, <span class="keyword">new</span> <span class="title class_">Circle</span>(key));</span><br><span class="line">            System.out.println(<span class="string">&quot;create color: &quot;</span> + key + <span class="string">&quot; circle&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(String color)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;draw a color: &quot;</span> + color + <span class="string">&quot; circle x：&quot;</span>+ x + <span class="string">&quot; y：&quot;</span> + y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）适用性</p><p>Flyweight模式适用于：</p><ul><li>一个应用程序使用了大量的对象。</li><li>完全由于使用大量的对象，造成很大的存储开销。</li><li>对象的大多数状态都可变为外部状态。</li><li>如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象。</li><li>应用程序不依赖于对象标识。由于Flyweight对象可以被共享，所以对于概念上明显<br>有别的对象，标识测试将返回真值。</li></ul><h5 id="7-Proxy-代理"><a href="#7-Proxy-代理" class="headerlink" title="7. Proxy(代理)"></a>7. Proxy(代理)</h5><p>1）意图</p><p>为其他对象提供一种代理以控制对这个对象的访问。</p><p>2）结构</p><p><img src="img/assets/image-20230415154708049.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 顾梦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023/4/15</span></span><br><span class="line"><span class="comment"> * 代理模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">RealSubject</span> <span class="variable">realSubject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RealSubject</span>();</span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(realSubject);</span><br><span class="line"></span><br><span class="line">        proxy.buy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Subject</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buy</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Subject</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> RealSubject realSubject;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">(RealSubject realSubject)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.realSubject = realSubject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;办理购买前的手续~&quot;</span>);</span><br><span class="line">        realSubject.buy(); <span class="comment">// 付钱</span></span><br><span class="line">        System.out.println(<span class="string">&quot;办理购买后的手续~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RealSubject</span> <span class="keyword">implements</span> <span class="title class_">Subject</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;付钱~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）适用性 (了解)<br>Poxy模式适用于在需要比较通用和复杂的对象指针代替简单的指针的时候，常见情况有：</p><ul><li>远程代理(Remote Proxy)为一个对象在不同地址空间提供局部代表。</li><li>虚代理(Virtual Proxy)根据需要创建开销很大的对象。</li><li>保护代理(Protection Proxy)控制对原始对象的访问，用于对象应该有不同的访问权<br>限的时候。</li><li>智能引用(Smart Reference)取代了简单的指针，它在访问对象时执行一些附加操作。</li></ul><h4 id="行为设计模式（11种）"><a href="#行为设计模式（11种）" class="headerlink" title="行为设计模式（11种）"></a>行为设计模式（11种）</h4><h5 id="1-Chain-of-Responsibility（责任链）"><a href="#1-Chain-of-Responsibility（责任链）" class="headerlink" title="1. Chain of Responsibility（责任链）"></a>1. Chain of Responsibility（责任链）</h5><p>1）意图</p><p><strong>使多个对象都有机会处理请求</strong>，从而避免请求的发送者和接收者之间的耦合关系。<strong>将这些对象连成一条链</strong>，并沿着这条链传递该请求，直到有一个对象处理它为止。</p><p>2）结构</p><p>​                        <img src="img/assets/image-20230415171040969.png" style="zoom: 67%;" /></p><p>其中：</p><ul><li>Handler定义一个处理请求的接口；（可选）实现后继链。</li><li>ConcreteHandler处理它所负责的请求；可访问它的后继者；如果可处理该请求，就处理它，否则将该请求转发给后继者。</li><li>Client向链上的具体处理者(ConcreteHandler)对象提交请求。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 顾梦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023/4/15</span></span><br><span class="line"><span class="comment"> * 责任链模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChainOfResponsibilityPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Handler</span> <span class="variable">counsellor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Counsellor</span>();</span><br><span class="line">        <span class="type">Handler</span> <span class="variable">dean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dean</span>();</span><br><span class="line">        Handler headmaster= <span class="keyword">new</span> <span class="title class_">Headmaster</span>();</span><br><span class="line"></span><br><span class="line">        counsellor.setNext(dean);</span><br><span class="line">        dean.setNext(headmaster);</span><br><span class="line"></span><br><span class="line">        counsellor.HandRequest(<span class="number">25</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Handler</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Handler next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(Handler next)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.next =next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">HandRequest</span><span class="params">(<span class="type">int</span> request)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Counsellor</span> <span class="keyword">extends</span> <span class="title class_">Handler</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">HandRequest</span><span class="params">(<span class="type">int</span> request)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (request &lt;= <span class="number">7</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;辅导员审批通过~&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (next != <span class="literal">null</span>)&#123;</span><br><span class="line">                next.HandRequest(request);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;无法审批&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dean</span> <span class="keyword">extends</span> <span class="title class_">Handler</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">HandRequest</span><span class="params">(<span class="type">int</span> request)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (request &lt;= <span class="number">15</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;院长审批通过~&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (next != <span class="literal">null</span>)&#123;</span><br><span class="line">                next.HandRequest(request);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;无法审批&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Headmaster</span> <span class="keyword">extends</span> <span class="title class_">Handler</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">HandRequest</span><span class="params">(<span class="type">int</span> request)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (request &lt;= <span class="number">30</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;校长审批通过~&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (next != <span class="literal">null</span>)&#123;</span><br><span class="line">                next.HandRequest(request);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;无法审批&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）适用性</p><p>Chain of Responsibility 模式适用于以下条件：</p><ul><li>有多个的对象可以处理一个请求，哪个对象处理该请求运行时刻自动确定。</li><li>想在不明确指定接收者的情况下向多个对象中的一个提交一个请求。</li><li>可处理一个请求的对象集合应被动态指定。</li></ul><h5 id="2-Command（命令）"><a href="#2-Command（命令）" class="headerlink" title="2.  Command（命令）"></a>2.  Command（命令）</h5><p>1）意图</p><p>将一个请求封装为一个对象，从而使得可以用不同的请求对客户进行参数化；对<strong>请求排队</strong>或记录<strong>请求日志</strong>，以及支持可<strong>撤销</strong>的操作。</p><p>2）结构</p><p><img src="img/assets/image-20230415173855870.png" alt=""></p><p>其中：</p><ul><li>Command声明执行操作的接口。</li><li>ConcreteCommand 将一个接收者对象绑定于一个动作：调用接收者相应的操作，以实现Execute。</li><li>Client 创建一个具体命令对象并设定它的接收者。</li><li>Invoker 要求该命令执行这个请求。</li><li>Receiver 知道如何实施与执行一个请求相关的操作。任何类都可能作为一个接收者。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 顾梦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023/4/15</span></span><br><span class="line"><span class="comment"> * 命令模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommandPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Tv</span> <span class="variable">tv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tv</span>(); <span class="comment">// 接收者 对象 电视机</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Command</span> <span class="variable">onCommand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OnCommand</span>(tv); <span class="comment">// 命令对象 开机命令</span></span><br><span class="line">        <span class="type">Command</span> <span class="variable">offCommand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OnCommand</span>(tv); <span class="comment">// 命令对象 关机命令</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Invoker</span> <span class="variable">invoker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Invoker</span>(); <span class="comment">//请求者</span></span><br><span class="line">        invoker.setCommand(onCommand); <span class="comment">// 给请求者设置 开机 命令</span></span><br><span class="line">        invoker.call(); <span class="comment">// 请求者去请求命令</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==============分割线===============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        invoker.setCommand(offCommand); <span class="comment">// 给请求者设置 关机命令</span></span><br><span class="line">        invoker.call(); <span class="comment">// 请求者去请求命令</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Invoker</span>&#123; <span class="comment">// 请求者</span></span><br><span class="line">    <span class="keyword">private</span> Command command; <span class="comment">// 命令</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCommand</span><span class="params">(Command command)</span>&#123; <span class="comment">// 设置请求者的命令</span></span><br><span class="line">        <span class="built_in">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>&#123; <span class="comment">// 调用</span></span><br><span class="line">        command.Execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Command</span>&#123; <span class="comment">// 命令接口</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">Execute</span><span class="params">()</span>; <span class="comment">// 执行命令</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OnCommand</span> <span class="keyword">implements</span> <span class="title class_">Command</span>&#123;<span class="comment">// 开机命令</span></span><br><span class="line">    <span class="keyword">private</span> Tv tv;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OnCommand</span><span class="params">(Tv tv)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Execute</span><span class="params">()</span> &#123;</span><br><span class="line">        tv.OnAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OffCommand</span> <span class="keyword">implements</span> <span class="title class_">Command</span>&#123; <span class="comment">// 关机命令</span></span><br><span class="line">    <span class="keyword">private</span> Tv tv;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OffCommand</span><span class="params">(Tv tv)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Execute</span><span class="params">()</span> &#123;</span><br><span class="line">        tv.OffAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tv</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">OnAction</span><span class="params">()</span>&#123; <span class="comment">// 开机行为</span></span><br><span class="line">        System.out.println(<span class="string">&quot;电视机开机了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">OffAction</span><span class="params">()</span>&#123; <span class="comment">// 关机行为</span></span><br><span class="line">        System.out.println(<span class="string">&quot;电视机关机了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）适用性</p><p>Command 模式适用于：</p><ul><li>抽象出待执行的动作以参数化某对象。</li><li>在不同的时刻指定、排列和执行请求。</li><li>支持取消操作。</li><li>支持修改日志。</li><li>用构建在原语操作上的高层操作构造一个系统。</li></ul><h5 id="3-Interpreter（解释器）"><a href="#3-Interpreter（解释器）" class="headerlink" title="3. Interpreter（解释器）"></a>3. Interpreter（解释器）</h5><p>1）意图</p><p>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来<br>解释语言中的句子。</p><p>2）结构</p><p>​                                    <img src="img/assets/image-20230416093633395.png" style="zoom:67%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 顾梦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023/4/16</span></span><br><span class="line"><span class="comment"> * 解释器模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterpreterPattern</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>();</span><br><span class="line"></span><br><span class="line">        context.check(<span class="string">&quot;A区的开发人员&quot;</span>);</span><br><span class="line">        context.check(<span class="string">&quot;B区的调试人员&quot;</span>);</span><br><span class="line">        context.check(<span class="string">&quot;C区的测试人员&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;========分割线=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        context.check(<span class="string">&quot;D区的程序员&quot;</span>);</span><br><span class="line">        context.check(<span class="string">&quot;D区的测试员&quot;</span>);</span><br><span class="line">        context.check(<span class="string">&quot;C区的程序员&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Context</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] regions = &#123;<span class="string">&quot;A区&quot;</span>,<span class="string">&quot;B区&quot;</span>,<span class="string">&quot;C区&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> String[] persions = &#123;<span class="string">&quot;开发人员&quot;</span>,<span class="string">&quot;测试人员&quot;</span>,<span class="string">&quot;调试人员&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> NonterminalExpression nonterminal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Context</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">TerminalExpression</span> <span class="variable">region</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TerminalExpression</span>(regions);</span><br><span class="line">        <span class="type">TerminalExpression</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TerminalExpression</span>(persions);</span><br><span class="line">        nonterminal = <span class="keyword">new</span> <span class="title class_">NonterminalExpression</span>(region,person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">check</span><span class="params">(String info)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> nonterminal.Interpret(info);</span><br><span class="line">        <span class="keyword">if</span> (result)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;识别成功~&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;识别失败~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Expression</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">Interpret</span><span class="params">(String info)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NonterminalExpression</span> <span class="keyword">implements</span> <span class="title class_">Expression</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TerminalExpression region;</span><br><span class="line">    <span class="keyword">private</span> TerminalExpression person;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NonterminalExpression</span><span class="params">(TerminalExpression region,TerminalExpression person)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.region =region;</span><br><span class="line">        <span class="built_in">this</span>.person = person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">Interpret</span><span class="params">(String info)</span> &#123;</span><br><span class="line">        String[] str = info.split(<span class="string">&quot;的&quot;</span>);</span><br><span class="line">        <span class="comment">// B区鹅调试人员 --&gt; str = &#123;&quot;B区&quot;,&quot;调试人员&quot;&#125;;</span></span><br><span class="line">        <span class="keyword">return</span> region.Interpret(str[<span class="number">0</span>]) &amp;&amp; person.Interpret(str[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TerminalExpression</span> <span class="keyword">implements</span> <span class="title class_">Expression</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TerminalExpression</span><span class="params">(String[] data)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String str : data) &#123;</span><br><span class="line">            set.add(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">Interpret</span><span class="params">(String info)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> set.contains(info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）适用性</p><p>Interpreter模式适用于当有一个语言需要解释执行，并且可将该语言中的句子表示为一个抽<br>象语法树时，以下情况效果最好：</p><ul><li>该文法简单。对于复杂的发文，文法的类层次变得庞大而无法管理。</li><li>效率不是一个关键问题。最高效的解释器通常不是通过直接解释语法分析树实现的，<br>而是首先将它们转换成另一种形式。</li></ul><h5 id="4-Iterator（迭代器）"><a href="#4-Iterator（迭代器）" class="headerlink" title="4. Iterator（迭代器）"></a>4. Iterator（迭代器）</h5><p>1）意图</p><p>提供一种方法顺序访问一个聚合对象中的各个元素，且不需要暴露该对象的内部表示。</p><p>2）结构</p><p>​                <img src="img/assets/image-20230416103420119.png" alt=""></p><p>其中：</p><ul><li>Iterator (迭代器)定义访问和遍历元素的接口。</li><li>ConcreteIterator（具体迭代器)实现迭代器接口；对该聚合遍历时跟踪当前位置。</li><li>Aggregate( 聚合)定义创建相应迭代器对象的接口。</li><li>ConcreteAggregate (具体聚合)实现创建相应迭代器的接口，该操作返回 ConcreteIterator<br>的一个适当的实例。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 顾梦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023/4/16</span></span><br><span class="line"><span class="comment"> * 迭代器模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IteratorPattern</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BookAggregate</span> <span class="variable">bookAggregate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookAggregate</span>();</span><br><span class="line"></span><br><span class="line">        String[] books = &#123;<span class="string">&quot;数据结构&quot;</span>,<span class="string">&quot;操作系统&quot;</span>,<span class="string">&quot;计算机网络&quot;</span>,<span class="string">&quot;计算机组成原理&quot;</span>&#125;;</span><br><span class="line">        <span class="type">double</span>[] prices = &#123;<span class="number">10.24</span>,<span class="number">20.48</span>,<span class="number">40.96</span>,<span class="number">81.92</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            bookAggregate.Add(<span class="keyword">new</span> <span class="title class_">Book</span>(books[i],prices[i]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> bookAggregate.CreateIterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> (Book) iterator.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;书名：&quot;</span> + book.getName() + <span class="string">&quot; 价格：&quot;</span> + book.getPrice());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Iterator</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;</span><br><span class="line">    Object <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> index;</span><br><span class="line">    <span class="keyword">private</span> BookAggregate bookAggregate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookIterator</span><span class="params">(BookAggregate bookAggregate)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.index = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.bookAggregate = bookAggregate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; bookAggregate.getSize())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> bookAggregate.get(index);</span><br><span class="line">        index ++ ;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookAggregate</span> <span class="keyword">implements</span> <span class="title class_">Aggregate</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Book&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Add</span><span class="params">(Book book)</span>&#123;</span><br><span class="line">        list.add(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.get(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator <span class="title function_">CreateIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BookIterator</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Aggregate</span>&#123;</span><br><span class="line">    Iterator <span class="title function_">CreateIterator</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String name,<span class="type">double</span> price)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）适用性</p><p>Iterator 模式适用于：</p><ul><li>访问一个聚合对象的内容而无须暴露它的内部表示。</li><li>支持对聚合对象的多种遍历。</li><li>为遍历不同的聚合结构提供一个统一的接口。</li></ul><h5 id="5-Mediator（中介者）"><a href="#5-Mediator（中介者）" class="headerlink" title="5. Mediator（中介者）"></a>5. Mediator（中介者）</h5><p>1）意图</p><p>用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式的相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><p>2）结构</p><p><img src="img/assets/image-20230416112456694.png" alt=""></p><p>其中：</p><ul><li>Mediator (中介者)定义一个接口用于各同事(Colleague)对象通信。</li><li>ConcreteMediator (具体中介者)通过协调各同事对象实现协作行为；了解并维护它的<br>各个同事。</li><li>Colleague class (同事类)知道它的中介者对象；每一个同事类对象在需要与其他同事<br>通信的时候与它的中介者通信。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 顾梦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023/4/16</span></span><br><span class="line"><span class="comment"> * 中介者模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MediatorPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConcreteMediator</span> <span class="variable">mediator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteMediator</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Colleague1</span> <span class="variable">colleague1</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Colleague1</span>(mediator);</span><br><span class="line">        <span class="type">Colleague2</span> <span class="variable">colleague2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Colleague2</span>(mediator);</span><br><span class="line"></span><br><span class="line">        mediator.setColleague1(colleague1);</span><br><span class="line">        mediator.setColleague2(colleague2);</span><br><span class="line"></span><br><span class="line">        colleague1.sendMessage(<span class="string">&quot;软考加油~&quot;</span>);</span><br><span class="line">        colleague2.sendMessage(<span class="string">&quot;祝你上岸~&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Colleague</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Mediator mediator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Colleague1</span> <span class="keyword">extends</span> <span class="title class_">Colleague</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Colleague1</span><span class="params">(Mediator mediator)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.mediator = mediator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        mediator.sendMessage(message,<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Notify</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;同事1收到消息：&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Colleague2</span> <span class="keyword">extends</span> <span class="title class_">Colleague</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Colleague2</span><span class="params">(Mediator mediator)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.mediator = mediator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        mediator.sendMessage(message,<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Notify</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;同事2收到消息：&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Mediator</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message,Colleague colleague)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title class_">Mediator</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Colleague1 colleague1;</span><br><span class="line">    <span class="keyword">private</span> Colleague2 colleague2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColleague1</span><span class="params">(Colleague1 colleague1)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.colleague1 = colleague1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColleague2</span><span class="params">(Colleague2 colleague2)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.colleague2 = colleague2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message, Colleague colleague)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (colleague == colleague1)&#123;</span><br><span class="line">            <span class="comment">// 让同事2收到消息</span></span><br><span class="line">            colleague2.Notify(message);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 让同事1收到消息</span></span><br><span class="line">            colleague1.Notify(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）适用性</p><p>Mediator 模式适用于：</p><ul><li>一组对象以定义良好但是复杂的方式进行通信，产生的相互依赖关系结构混乱且难以理解。</li><li>一个对象引用其他很多对象并且直接与这些对象通信，导致难以复用该对象。</li><li>想定制一个分布在多个类中的行为，而又不想生成太多的子类。</li></ul><h5 id="6-Memento（备忘录）"><a href="#6-Memento（备忘录）" class="headerlink" title="6. Memento（备忘录）"></a>6. Memento（备忘录）</h5><p>1）意图</p><p>在不破坏封装性的前提下捕获一个对象的内部状态，并在对象之外保存这个状态。这样以<br>后就可以将对象恢复到原先保存的状态。</p><p>2）结构</p><p><img src="img/assets/image-20230416150625243.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 顾梦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023/4/16</span></span><br><span class="line"><span class="comment"> * 备忘录模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MementoPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Caretaker</span> <span class="variable">caretaker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Caretaker</span>();</span><br><span class="line">        <span class="type">Originator</span> <span class="variable">originator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Originator</span>();</span><br><span class="line"></span><br><span class="line">        originator.setState(<span class="string">&quot;1024&quot;</span>);</span><br><span class="line">        <span class="type">Memento</span> <span class="variable">backup1</span> <span class="operator">=</span> originator.createMemento();</span><br><span class="line">        caretaker.addMemento(backup1);</span><br><span class="line"></span><br><span class="line">        originator.setState(<span class="string">&quot;2048&quot;</span>);</span><br><span class="line">        <span class="type">Memento</span> <span class="variable">backup2</span> <span class="operator">=</span> originator.createMemento();</span><br><span class="line">        caretaker.addMemento(backup2);</span><br><span class="line"></span><br><span class="line">        originator.setState(<span class="string">&quot;4096&quot;</span>);</span><br><span class="line">        <span class="type">Memento</span> <span class="variable">backup3</span> <span class="operator">=</span> originator.createMemento();</span><br><span class="line">        caretaker.addMemento(backup3);</span><br><span class="line"></span><br><span class="line">        System.out.println(originator.getState());</span><br><span class="line">        caretaker.showMemento();</span><br><span class="line"></span><br><span class="line">        <span class="type">Memento</span> <span class="variable">memento1</span> <span class="operator">=</span> caretaker.getMemento(<span class="number">2</span>);</span><br><span class="line">        originator.setState(memento1.getState());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;根据第2次备份还原之后的状态为：&quot;</span> + originator.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Originator</span>&#123; <span class="comment">// 原发器</span></span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(String state)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getState</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Memento <span class="title function_">createMemento</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Memento</span>(state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemento</span><span class="params">(Memento memento)</span>&#123;</span><br><span class="line">        state = memento.getState();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Memento</span>&#123; <span class="comment">// 备忘录</span></span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getState</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Memento</span><span class="params">(String state)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Caretaker</span>&#123; <span class="comment">// 管理者</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Memento&gt; mementoList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMemento</span><span class="params">(Memento memento)</span>&#123;</span><br><span class="line">        mementoList.add(memento);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Memento <span class="title function_">getMemento</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="comment">// 判断参数是否合法</span></span><br><span class="line">        <span class="keyword">if</span> (index &gt;=<span class="number">1</span> &amp;&amp; index &lt;= mementoList.size()) &#123;</span><br><span class="line">            <span class="keyword">return</span> mementoList.get(index - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showMemento</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (Memento memento : mementoList) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span> + cnt + <span class="string">&quot;次备份，状态为：&quot;</span> + memento.getState());</span><br><span class="line">            cnt ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）适用性</p><p>Mement 模式适用于：</p><ul><li>必须保存一个对象在某一个时刻的（部分）状态，这样以后需要时它才能恢复到先前<br>的状态。</li><li>如果一个用接口来让其他对象直接得到这些状态，将会暴露对象的实现细节并破坏对<br>象的封装性。</li></ul><h5 id="🔺7-Observer（观察者）"><a href="#🔺7-Observer（观察者）" class="headerlink" title="🔺7. Observer（观察者）"></a>🔺7. Observer（观察者）</h5><p>1）意图</p><p>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p><p>2）结构</p><p><img src="img/assets/image-20230416165012628.png" alt=""></p><p>其中：</p><ul><li>Subject(目标)知道它的观察者，可以有任意多个观察者观察同一个目标；提供注册<br>和删除观察者对象的接口。 </li><li>Observer(观察者)为那些在目标发生改变时需获得通知的对象定义一个更新接口。 </li><li>ConcreteSubject(具体目标)将有关状态存入各ConcreteObserver对象；当它的状态发<br>生改变时，向它的各个观察者发出通知。 </li><li>ConcreteObserver (具体观察者)维护一个指向 ConcreteSubject 对象的引用；存储有关<br>状态，这些状态应与目标的状态保持一致；实现 Observer 的更新接口，以使自身状态<br>与目标的状态保持一致。 </li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 顾梦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023/4/16</span></span><br><span class="line"><span class="comment"> * 观察者模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObserverPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subjectA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteSubject</span>(<span class="string">&quot;目标A&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Observer</span> <span class="variable">observerB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteObserver</span>(<span class="string">&quot;张三&quot;</span>,subjectA);</span><br><span class="line">        <span class="type">Observer</span> <span class="variable">observerC</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteObserver</span>(<span class="string">&quot;李四&quot;</span>,subjectA);</span><br><span class="line">        <span class="type">Observer</span> <span class="variable">observerD</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteObserver</span>(<span class="string">&quot;王五&quot;</span>,subjectA);</span><br><span class="line">        </span><br><span class="line">        subjectA.setState(<span class="string">&quot;更新了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Subject</span> &#123; <span class="comment">// 目标接口</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">Attach</span><span class="params">(Observer observer)</span>; <span class="comment">// 添加观察者</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">Detach</span><span class="params">(Observer observer)</span>; <span class="comment">// 删除观察者</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">Notify</span><span class="params">()</span>; <span class="comment">// 状态改变后，通知所有观察者</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(String state)</span>; <span class="comment">// 设置状态（改变状态）</span></span><br><span class="line">    String <span class="title function_">getState</span><span class="params">()</span>; <span class="comment">// 获取状态</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteSubject</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observerList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteSubject</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        state = <span class="string">&quot;未更新&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        observerList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Attach</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">        observerList.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Detach</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">        observerList.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Notify</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observerList) &#123;</span><br><span class="line">            observer.update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(String state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line"></span><br><span class="line">        System.out.println(name + <span class="string">&quot;的状态发生变化，变化后的状态为：&quot;</span> + state);</span><br><span class="line">        Notify();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Observer</span> &#123; <span class="comment">// 观察者接口</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;  <span class="comment">// 收到通知，更新观察者的状态</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteObserver</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Subject subject;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteObserver</span><span class="params">(String name, Subject subject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.subject = subject;</span><br><span class="line">        subject.Attach(<span class="built_in">this</span>);</span><br><span class="line">        state = subject.getState();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; 收到通知&quot;</span>);</span><br><span class="line">        state = subject.getState(); <span class="comment">//  让当前观察者的状态 和 目标改变后的状态保持一致</span></span><br><span class="line">        System.out.println(name + <span class="string">&quot; 改变后的状态为：&quot;</span>+state);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>3）适用性</p><p>Observer 模式适用于：</p><ul><li>当一个抽象模型有两个方面，其中一个方面依赖于另一个方面，将这两者封装在独立<br>的对象中以使它们可以各自独立地改变和复用。（了解）</li><li>当对一个对象的改变需要同时改变其他对象，而不知道具体有多少对象有待改变时。</li><li>当一个对象必须通知其他对象，而它又不能假定其他对象是谁，即不希望这些对象是紧耦合的。</li></ul><h5 id="🔺8-State（状态）"><a href="#🔺8-State（状态）" class="headerlink" title="🔺8. State（状态）"></a>🔺8. State（状态）</h5><p>1）意图</p><p>允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。</p><p>2）结构</p><p>​                                    <img src="img/assets/image-20230417082353859.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 顾梦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023/4/17</span></span><br><span class="line"><span class="comment"> * 状态模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StatePattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>(); <span class="comment">// count = 3</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;状态：&quot;</span> + context.getState() + <span class="string">&quot; 数量：&quot;</span> + context.getCount());</span><br><span class="line"></span><br><span class="line">        context.Request(); <span class="comment">// 购买一个饮料 count = 2</span></span><br><span class="line">        context.Request(); <span class="comment">// 购买一个饮料 count = 1</span></span><br><span class="line">        context.Request(); <span class="comment">// 购买一个饮料 count = 0</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;状态：&quot;</span> + context.getState() + <span class="string">&quot; 数量：&quot;</span> + context.getCount());</span><br><span class="line"></span><br><span class="line">        context.Request(); <span class="comment">// 无货，等待补货</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;状态：&quot;</span> + context.getState() + <span class="string">&quot; 数量：&quot;</span> + context.getCount());</span><br><span class="line"></span><br><span class="line">        context.Request(); <span class="comment">// 购买一个饮料 count = 4</span></span><br><span class="line">        System.out.println(<span class="string">&quot;状态：&quot;</span> + context.getState() + <span class="string">&quot; 数量：&quot;</span> + context.getCount());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Context</span>&#123; <span class="comment">// 贩卖机</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> State state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Context</span><span class="params">()</span>&#123;</span><br><span class="line">        count = <span class="number">3</span>;</span><br><span class="line">        state = <span class="keyword">new</span> <span class="title class_">StateA</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> State <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(State state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Request</span><span class="params">()</span>&#123;  <span class="comment">// 购买饮料</span></span><br><span class="line">        state.Handle(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">State</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">Handle</span><span class="params">(Context context)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StateA</span> <span class="keyword">implements</span> <span class="title class_">State</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Handle</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> context.getCount();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (count &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;购买成功~&quot;</span>);</span><br><span class="line">            context.setCount(count - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (context.getCount() == <span class="number">0</span>)&#123;</span><br><span class="line">                context.setState(<span class="keyword">new</span> <span class="title class_">StateB</span>()); <span class="comment">// 设置为无货状态</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;购买失败~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StateB</span> <span class="keyword">implements</span> <span class="title class_">State</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Handle</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> context.getCount();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;购买失败！等待补货~&quot;</span>);</span><br><span class="line"></span><br><span class="line">            context.setCount(<span class="number">5</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;补货成功，请重新购买~&quot;</span>);</span><br><span class="line"></span><br><span class="line">            context.setState(<span class="keyword">new</span> <span class="title class_">StateA</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）适用性</p><p>State 模式适用于：</p><ul><li>一个对象的行为决定于它的状态，并且它必须在运行时刻根据状态改变它的行为。</li><li>一个操作中含有庞大的多分支的条件语句，且这些分支依赖于该对象的状态。这个状态常用一个或多个枚举常量表示。</li></ul><h5 id="🔺9-Strategy（策略）"><a href="#🔺9-Strategy（策略）" class="headerlink" title="🔺9. Strategy（策略）"></a>🔺9. Strategy（策略）</h5><p>1）意图</p><p>定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。此模式使得算法可以独立于使用它们的客户而变化。</p><p>2）结构</p><p><img src="img/assets/image-20230417110447963.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 顾梦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023/4/17</span></span><br><span class="line"><span class="comment"> * 策略模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrategyPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">OperationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OperationContext</span>(<span class="keyword">new</span> <span class="title class_">Addstrategy</span>());</span><br><span class="line">        context.Operation(<span class="number">20</span>,<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line">        context = <span class="keyword">new</span> <span class="title class_">OperationContext</span>(<span class="keyword">new</span> <span class="title class_">Substrategy</span>());</span><br><span class="line">        context.Operation(<span class="number">20</span>,<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line">        context = <span class="keyword">new</span> <span class="title class_">OperationContext</span>(<span class="keyword">new</span> <span class="title class_">Multstrategy</span>());</span><br><span class="line">        context.Operation(<span class="number">20</span>,<span class="number">17</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OperationContext</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OperationContext</span><span class="params">(Strategy strategy)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy =strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Operation</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        strategy.TwoNumberOperation(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Strategy</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">TwoNumberOperation</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Addstrategy</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TwoNumberOperation</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(a + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Substrategy</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TwoNumberOperation</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(a - b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Multstrategy</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TwoNumberOperation</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(a * b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）适用性</p><p>Strategy 模式适用于：</p><ul><li>许多相关的类仅仅是行为有异。 </li><li>需要使用一个算法的不同变体。 </li><li>算法使用客户不应该知道的数据。可使用策略模式以避免暴露复杂的、与算法相关的数据结构。 </li><li>一个类定义了多种行为，并且这些行为在这个类的操作中以多个条件语句的形式出现，<br>将相关的条件分支移入它们各自的 Strategy 类中，以代替这些条 件语句。 </li></ul><h5 id="10-Template-Method（模板方法）"><a href="#10-Template-Method（模板方法）" class="headerlink" title="10. Template Method（模板方法）"></a>10. Template Method（模板方法）</h5><p>1）意图</p><p>定义一个操作中的算法骨架，而将一些步骤延迟到子类中。Template Method 使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p>2）结构</p><p><img src="img/assets/image-20230417112937358.png" alt=""></p><p>其中：</p><ul><li>AbstractClass（抽象类）定义抽象的原语操作，具体的子类将重定义它们以实现一个算法的各步骤；实现模板方法，定一个算法的骨架，该模板方法不仅调用原语操作，也调用定义在 AbstractClass 或其他对象中的操作。</li><li>ConcreteClass（具体类）实现原语操作以完成算法中与特定子类相关的步骤。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 顾梦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023/4/17</span></span><br><span class="line"><span class="comment"> * 模板方法模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplateMethodPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 父类名 对象名 = new 子类名();</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">teacher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line"></span><br><span class="line">        student.TemplateMethod();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=========分割线=============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        teacher.TemplateMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TemplateMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;上课 去教室&quot;</span>);</span><br><span class="line">        PrimitiveOperation1();</span><br><span class="line">        System.out.println(<span class="string">&quot;下课 离开教室&quot;</span>);</span><br><span class="line">        PrimitiveOperation2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">PrimitiveOperation1</span><span class="params">()</span>; <span class="comment">// 原语操作 1：上课过程 学生 听课... 老师 讲课</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">PrimitiveOperation2</span><span class="params">()</span>; <span class="comment">// 原语操作 2：作业  学生 写作业 提交作业... 老师批改作业 打分数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PrimitiveOperation1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生：听课 学习 做笔记 提出问题&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PrimitiveOperation2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生：写作业 提交作业&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PrimitiveOperation1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老师：上课 讲课 解答问题 布置作业&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PrimitiveOperation2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老师：批改作业 打分数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）适用性</p><p>Template Method 模式适用于：</p><ul><li>一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。 </li><li>各子类中公共的行为应被提取出来并集中到一个公共父类中，以避免代码重复。 </li><li>控制子类扩展。模板方法旨在特定点调用“hook”操作（默认的行为，子类可以在必<br>要时进行重定义扩展)，这就只允许在这些点进行扩展。 </li></ul><h5 id="🔺11-Visitor（访问者）"><a href="#🔺11-Visitor（访问者）" class="headerlink" title="🔺11. Visitor（访问者）"></a>🔺11. Visitor（访问者）</h5><p>1）意图</p><p>表示一个作用于某对象结构中的各元素的操作。它允许在不改变各元素的类的前提下定义作用于这些元素的新操作。</p><p>2）结构</p><p>​                                            <img src="img/assets/image-20230417135729720.png" style="zoom: 50%;" /></p><p>其中：</p><ul><li>Visitor(访问者)为该对象结构中 ConcreteElement 的每一个类声明一个 Visit 操作。该操作的名字和特征标识了发送 Vist 请求给该访问者的那个类，这使得访问者可以确定正被访问元素的具体的类。这样访问者就可以通过该元素的特定接口直接访问它。 </li><li>ConcreteVisitor (具体访问者)实现每个有 Visitor 声明的操作，每个操作实现本算法的一部分，而该算法片段乃是对应于结构中对象的类。Concrete Visitor为该算法提供了上下文并存储它的局部状态。这一状态常常在遍历该结构的过程中累积结果。 </li><li>Element (元素)定义以一个访问者为参数的 Accept 操作。 </li><li>ConcreteElement (具体元素)实现以一个访问者为参数的 Accept 操作。 </li><li>ObjectStructure (对象结构)能枚举它的元素；可以提供一个高层的接口以允许该访问者访问它的元素；可以是一个组合或者一个集合，如一个列表或一个无序集合。 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 顾梦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2023/4/17</span></span><br><span class="line"><span class="comment"> * 访问者模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VisitorPattern</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PersonStructure</span> <span class="variable">structure</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PersonStructure</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Visitor1</span> <span class="variable">visitor1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Visitor1</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;访问者1的访问记录：&quot;</span>);</span><br><span class="line">        structure.Accept(visitor1);</span><br><span class="line">        System.out.println(<span class="string">&quot;学生年龄的总和：&quot;</span> + visitor1.getStudentAgeSum() +<span class="string">&quot; 老师年龄的总和：&quot;</span> + visitor1.getTeacherAgeSUm());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=========分割线==============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Visitor2</span> <span class="variable">visitor2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Visitor2</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;访问者2的访问记录：&quot;</span>);</span><br><span class="line">        structure.Accept(visitor2);</span><br><span class="line">        System.out.println(<span class="string">&quot;学生的最高成绩：&quot;</span> + visitor2.getMaxScore() + <span class="string">&quot; 老师的最高工龄：&quot;</span> + visitor2.getMaxWorkYear());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Visitor</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">VistStudent</span><span class="params">(Student student)</span>; <span class="comment">// 访问</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">vistTeacher</span><span class="params">(Teacher teacher)</span>; <span class="comment">// 访问老师</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Visitor1</span> <span class="keyword">implements</span> <span class="title class_">Visitor</span>&#123; <span class="comment">// 访问者1 分别统计学生和老师的年龄总和</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">studentAgeSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">teacherAgeSUm</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStudentAgeSum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentAgeSum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTeacherAgeSUm</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> teacherAgeSUm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">VistStudent</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;访问者1访问学生：&quot;</span> + student.getName() + <span class="string">&quot; 年龄：&quot;</span> + student.getAge());</span><br><span class="line">        studentAgeSum += student.getAge();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">vistTeacher</span><span class="params">(Teacher teacher)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;访问者1访问老师：&quot;</span> + teacher.getName() + <span class="string">&quot; 年龄：&quot;</span> + teacher.getAge());</span><br><span class="line">        teacherAgeSUm += teacher.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Visitor2</span> <span class="keyword">implements</span> <span class="title class_">Visitor</span>&#123; <span class="comment">// 访问者2 分别求出 学生的最高成绩 以及 老师的最高工龄</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">maxScore</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">maxWorkYear</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMaxScore</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> maxScore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMaxWorkYear</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> maxWorkYear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">VistStudent</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;访问者2访问学生：&quot;</span> + student.getName() + <span class="string">&quot; 成绩：&quot;</span> + student.getScore());</span><br><span class="line">        maxScore = Math.max(maxScore,student.getScore());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">vistTeacher</span><span class="params">(Teacher teacher)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;访问者2访问老师：&quot;</span> + teacher.getName() + <span class="string">&quot; 工龄：&quot;</span> + teacher.getWorkYear());</span><br><span class="line">        maxWorkYear = Math.max(maxWorkYear,teacher.getWorkYear());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonStructure</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Person&gt; personList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PersonStructure</span><span class="params">()</span>&#123;</span><br><span class="line">        personList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>,<span class="number">70</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">21</span>,<span class="number">80</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>,<span class="number">22</span>,<span class="number">90</span>));</span><br><span class="line"></span><br><span class="line">        personList.add(<span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;李老师&quot;</span>,<span class="number">26</span>,<span class="number">3</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;陈老师&quot;</span>,<span class="number">27</span>,<span class="number">4</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;刘老师&quot;</span>,<span class="number">28</span>,<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Accept</span><span class="params">(Visitor visitor)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Person person : personList) &#123;</span><br><span class="line">            person.Accept(visitor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String  name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Accept</span><span class="params">(Visitor visitor)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> score;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age,<span class="type">int</span> score)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name,age);</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getScore</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Accept</span><span class="params">(Visitor visitor)</span> &#123;</span><br><span class="line">        visitor.VistStudent(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> workYear;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String name,<span class="type">int</span> age,<span class="type">int</span> workYear)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name,age);</span><br><span class="line">        <span class="built_in">this</span>.workYear = workYear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWorkYear</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> workYear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Accept</span><span class="params">(Visitor visitor)</span> &#123;</span><br><span class="line">        visitor.vistTeacher(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）适用性</p><p>Visitor 模式适用于：</p><ul><li>一个对象结构包含很多类对象，它们有不同的接口，而用户想对这些对象实施一些依<br>赖于其具体类的操作。</li><li>需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而又想要避免这些<br>操作“污染”这些对象的类。</li><li>定义对象结构的类很少改变，但经常需要在此结构上定义新的操作。]</li></ul><h2 id="第八章-算法设计与分析"><a href="#第八章-算法设计与分析" class="headerlink" title="第八章 算法设计与分析"></a>第八章 算法设计与分析</h2><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>算法时间复杂度以算法中基本操作重复执行的次数（简称为频度）作为算法的时间度量。一般不必要精确计算出算法的时间复杂度，<strong>只要大致计算出相应的数量级</strong>即可，如O(1)、O(㏒₂n)、O(n)或O(n²)等。</p><hr><p><img src="img/assets/Snipaste_2023-03-23_08-25-58.png" alt=""></p><p>递归式时间复杂度：递归的次数 x 每次递归的时间复杂度</p><p>主方法。主方法也称为主定理，给出了求解以下形式的递归式的快速方法。</p><p><img src="img/assets/Snipaste_2023-03-23_11-02-43.png" alt=""></p><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p>非递归：O(1)    O(n)    O(n²)</p><h4 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h4><h5 id="n皇后问题"><a href="#n皇后问题" class="headerlink" title="n皇后问题"></a>n皇后问题</h5><p><img src="img/assets/image-20230504184216521.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">Place</span><span class="params">(<span class="type">int</span> *Column,<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;index;i++)&#123;</span><br><span class="line">        <span class="type">int</span> Column_differ = <span class="built_in">abs</span>(Column[index] - Column[i]);</span><br><span class="line">        <span class="type">int</span> Row_differ = <span class="built_in">abs</span>(index - i);</span><br><span class="line">        <span class="keyword">if</span>(Column[i] == Column[index] || Column_differ == Row_differ)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">N_Queue</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> Column_Num[n+<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> index = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> answer_num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        Column_Num[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(index&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        Column_Num[index]++;</span><br><span class="line">        <span class="keyword">while</span>(Column_Num[index] &lt;= n &amp;&amp; !Place(Column_Num,index))</span><br><span class="line">            Column_Num[index]++;</span><br><span class="line">        <span class="keyword">if</span>(Column_Num[index] &lt;=n)&#123;</span><br><span class="line">            <span class="keyword">if</span> (index == n) &#123;</span><br><span class="line">                answer_num++;</span><br><span class="line">            </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;方案%d：&quot;</span>,answer_num);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;= n;i++)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,Column_Num[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                index++;</span><br><span class="line">                Column_Num[index]=<span class="number">0</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    N_Queue(<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h4><p>递归有两个基本要素：</p><ul><li>边界条件，即确定递归到何时终止，也称为递归出口</li><li>递归模式，即大问题是如何分解为小问题的，也称为递归体</li></ul><p>分支算法在每一层递归上都有 3 个步骤：</p><ol><li>分解。将原问题分解成一系列子问题。</li><li>求解。递归地求解各子问题。若子问题足够小，则直接求解。</li><li>合并。将子问题的解合并成原问题的解。</li></ol><h5 id="归并排序算法"><a href="#归并排序算法" class="headerlink" title="归并排序算法"></a>归并排序算法</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 归并排序</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Merge</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> p,<span class="type">int</span> q,<span class="type">int</span> r)</span>&#123;</span><br><span class="line">    <span class="type">int</span> n1 = q - p + <span class="number">1</span>,n2 = r -q,i,j,k;</span><br><span class="line">    <span class="type">int</span> L[<span class="number">50</span>],R[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n1;i++)</span><br><span class="line">        L[i] = A[p+i];</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n2;j++)</span><br><span class="line">        R[j] = A[q+j+<span class="number">1</span>];</span><br><span class="line">    L[n1] = INT_MAX;</span><br><span class="line">    R[n2] = INT_MAX;</span><br><span class="line">    i=<span class="number">0</span>;</span><br><span class="line">    j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(k=p;k&lt;r+<span class="number">1</span>;k++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(L[i] &lt; R[j])&#123;</span><br><span class="line">            A[k] = L[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            A[k]=R[j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MergeSort</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> p,<span class="type">int</span> r)</span>&#123;</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    <span class="keyword">if</span>(p &lt; r)&#123;</span><br><span class="line">        q = (p+r) / <span class="number">2</span>;</span><br><span class="line">        MergeSort(A, p, q);</span><br><span class="line">        MergeSort(A, q+<span class="number">1</span>, r);</span><br><span class="line">        Merge(A, p, q,r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> A[] = &#123;<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    MergeSort(A, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;<span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="img/assets/image-20230505093747859.png" alt=""></p><h5 id="最大字段和问题"><a href="#最大字段和问题" class="headerlink" title="最大字段和问题"></a>最大字段和问题</h5><p><img src="img/assets/image-20230505104634099.png" alt=""></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">MaxSubSum</span><span class="params">(<span class="type">int</span> * Array,<span class="type">int</span> left,<span class="type">int</span> right)</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(left == right)&#123; <span class="comment">/*分解到单个整数，不可继续分解*/</span></span><br><span class="line">        <span class="keyword">if</span>(Array[left] &gt; <span class="number">0</span>)</span><br><span class="line">            sum = Array[left];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">/*从 left 和 right 的中间分解数组*/</span></span><br><span class="line">        <span class="type">int</span> center = (left + right)/<span class="number">2</span>; <span class="comment">/*划分的位置*/</span></span><br><span class="line">        <span class="type">int</span> leftsum = MaxSubSum(Array, left, center);</span><br><span class="line">        <span class="type">int</span> rightsum = MaxSubSum(Array, center+<span class="number">1</span>, right);</span><br><span class="line">        <span class="comment">/*计算包括 center 的最大值，判断是情形1、情形2还是情形3*/</span></span><br><span class="line">        <span class="type">int</span> s1 = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> lefts = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = center;i &gt;= left;i--)&#123;</span><br><span class="line">            lefts = lefts + Array[i];</span><br><span class="line">            <span class="keyword">if</span>(lefts &gt; s1)</span><br><span class="line">                s1 = lefts;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> s2 = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> rights = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = center + <span class="number">1</span>;i&lt;= right;i++)&#123;</span><br><span class="line">            rights = rights + Array[i];</span><br><span class="line">            <span class="keyword">if</span>(rights &gt; s2)</span><br><span class="line">                s2 = rights;</span><br><span class="line">        &#125;</span><br><span class="line">        sum = s1 + s2;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*情形1*/</span></span><br><span class="line">        <span class="keyword">if</span> (sum &lt; leftsum) &#123;</span><br><span class="line">            sum = leftsum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*情形2*/</span></span><br><span class="line">        <span class="keyword">if</span>(sum &lt; rightsum)&#123;</span><br><span class="line">            sum = rightsum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">         <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> *Array = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="number">6</span>*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    Array[<span class="number">0</span>] = <span class="number">-2</span>;</span><br><span class="line">    Array[<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">    Array[<span class="number">2</span>] = <span class="number">-4</span>;</span><br><span class="line">    Array[<span class="number">3</span>] = <span class="number">13</span>;</span><br><span class="line">    Array[<span class="number">4</span>] = <span class="number">-5</span>;</span><br><span class="line">    Array[<span class="number">5</span>] = <span class="number">-2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> result = MaxSubSum(Array, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="img/assets/image-20230505112239482.png" alt=""></p><h4 id="动态规划法"><a href="#动态规划法" class="headerlink" title="动态规划法"></a>动态规划法</h4><h5 id="0-1-背包问题"><a href="#0-1-背包问题" class="headerlink" title="0-1 背包问题"></a>0-1 背包问题</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 4 <span class="comment">// 物品数量</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> W 5 <span class="comment">// 背包容量</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> v[] = &#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;; <span class="comment">// 物品价值数组</span></span><br><span class="line">    <span class="type">int</span> w[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;; <span class="comment">// 物品重量数组</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> f[N + <span class="number">1</span>][W + <span class="number">1</span>] = &#123;&#125;; <span class="comment">// 子问题解数组</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=W;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j &gt;= w[i])&#123; <span class="comment">// 选第 i 个物品的前提条件</span></span><br><span class="line">                <span class="comment">// 等于不选第 i 个物品 和 选第 i 个物品 两者的较大值</span></span><br><span class="line">                f[i][j] = max(f[i<span class="number">-1</span>][j],f[i<span class="number">-1</span>][j-w[i]] + v[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123; <span class="comment">// 不选第 i 个物品</span></span><br><span class="line">                f[i][j] = f[i - <span class="number">1</span>][j]; <span class="comment">// 等于从前 i-1 个物品中选，背包容量为 j 时的最大价值    </span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,f[N][W]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O（N*W）    N：物品数量    W：背包容量</p><h5 id="矩阵连乘问题"><a href="#矩阵连乘问题" class="headerlink" title="矩阵连乘问题"></a>矩阵连乘问题</h5><ul><li>时间复杂度：O（n³）</li><li>空间复杂度O（n²）</li></ul><h4 id="贪心法"><a href="#贪心法" class="headerlink" title="贪心法"></a>贪心法</h4><h5 id="部分背包问题"><a href="#部分背包问题" class="headerlink" title="部分背包问题"></a>部分背包问题</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 5     <span class="comment">// 物品数量</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> W 100   <span class="comment">// 背包容量</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示物品价值、重量、单位重量价值数组</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">show</span><span class="params">(<span class="type">int</span> v[],<span class="type">int</span> w[],<span class="type">double</span> vw[])</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;物品价值数组：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i&lt;=N;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,v[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;物品重量数组：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i&lt;=N;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,w[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;物品单位重量价值数组：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i&lt;=N;i++) <span class="built_in">printf</span>(<span class="string">&quot;%0.1lf &quot;</span>,vw[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">Max_Value</span><span class="params">(<span class="type">int</span> v[],<span class="type">int</span> w[],<span class="type">double</span> vw[])</span>&#123;</span><br><span class="line">    <span class="type">double</span> result = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> w_temp = W;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(w_temp &gt;= w[i])&#123;</span><br><span class="line">            result = result + v[i];</span><br><span class="line"></span><br><span class="line">            w_temp = w_temp - w[i];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(w_temp &gt; <span class="number">0</span> &amp;&amp; i&lt;=N)&#123;</span><br><span class="line">        result = result + w_temp * vw[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> v[] = &#123;<span class="number">0</span>,<span class="number">65</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">60</span>,<span class="number">40</span>&#125;;   <span class="comment">// 物品价值数组</span></span><br><span class="line">    <span class="type">int</span> w[] = &#123;<span class="number">0</span>,<span class="number">30</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">50</span>,<span class="number">40</span>&#125;;   <span class="comment">// 物品重量数组</span></span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> vw[N + <span class="number">1</span>]; <span class="comment">// 物品单位重量价值数组</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="comment">// 初始化 物品单位重量价值数组</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i&lt;=N;i++) vw[i] = (<span class="type">double</span>) v[i] / w[i];</span><br><span class="line"></span><br><span class="line">    show(v, w, vw);</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> result =Max_Value(v, w, vw);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nreslut %.1lf\n&quot;</span>,result);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第九章-数据库技术基础"><a href="#第九章-数据库技术基础" class="headerlink" title="第九章 数据库技术基础"></a>第九章 数据库技术基础</h2><h3 id="数据库的三级模式结构"><a href="#数据库的三级模式结构" class="headerlink" title="数据库的三级模式结构"></a>数据库的三级模式结构</h3><ul><li>概念模式（模式） -&gt; 基本表</li><li>外模式 -&gt; 视图</li><li>内模式 -&gt; 存储文件<h4 id="两级映像"><a href="#两级映像" class="headerlink" title="两级映像"></a>两级映像</h4>数据库系统在三级模式之间提供了两级映像：模式/内模式映像、外模式/模式映像。<br>保证了数据库中的数据具有较高的逻辑独立性和物理独立性。</li></ul><ol><li>模式/内模式映像：实现了概念模式和内模式之间的相互转换。</li><li>外模式/模式映像：实现了外模式和概念模式之间的相互转换。</li><li>数据的物理独立性：需要修改概念模式和内模式之间的映像。</li><li>数据的逻辑独立性：需要修改外模式和概念模式之间的映像。<h3 id="规范化"><a href="#规范化" class="headerlink" title="规范化"></a>规范化</h3>候选码中包含的属性称为主属性、不包含在候选码中的属性称为非主属性。若候选码多于一个，可以选定其中的一个为主码。<h4 id="1NF（第一范式）"><a href="#1NF（第一范式）" class="headerlink" title="1NF（第一范式）"></a>1NF（第一范式）</h4>定义：若关系模式 R 每一个分量是不可再分的数据项，则关系模式 R 属于第一范式。<br>1NF 不能排除数据冗余和更新异常等问题，因为其中可能存在部分函数依赖。<h4 id="2NF（第二范式）"><a href="#2NF（第二范式）" class="headerlink" title="2NF（第二范式）"></a>2NF（第二范式）</h4>定义：若关系模式 R∈1NF，且每一个非主属性完全依赖于码，则关系模式 R∈2NF。<br>当 1NF 消除了非主属性对码的部分函数依赖，则称为 2NF。<br>可能存在数据冗余和更新异常等问题。<h4 id="3NF（第三范式）"><a href="#3NF（第三范式）" class="headerlink" title="3NF（第三范式）"></a>3NF（第三范式）</h4>2NF 消除了非主属性对码的传递函数依赖，则称为 3NF。<br>属于 3NF 的关系模式 R 可能存在主属性对码的部分依赖和传递依赖。<pre><code>                         &lt;img src=&quot;img/assets/202306082348988.png&quot; style=&quot;zoom: 50%;&quot; /&gt;</code></pre></li></ol><h3 id="分布式数据库"><a href="#分布式数据库" class="headerlink" title="分布式数据库"></a>分布式数据库</h3><p><strong>分片</strong>透明：指用户或应用程序不需要知道逻辑上访问的表具体是怎么分块存储的</p><p><strong>复制</strong>透明：指采用复制技术的分布方法，用户不需要知道数据是复制到哪些节点，如何复<br>制的。<br><strong>位置</strong>透明：指用户无须知道数据存放的物理位置<br><strong>逻辑</strong>透明：指用户或应用程序无需知道局部场地使用的是哪种数据模型</p><p><strong>共享</strong>性：指数据存储在不同的结点数据共享<br><strong>自治</strong>性：指每结点对本地数据都能独立管理<br><strong>可用</strong>性：指当某一场地故障时，系统可以使用其他场地上的副本而不至于使整个系统瘫痪<br><strong>分布</strong>性：指数据在不同场地上的存储</p><h2 id="第十章-网络与信息安全基础知识"><a href="#第十章-网络与信息安全基础知识" class="headerlink" title="第十章 网络与信息安全基础知识"></a>第十章 网络与信息安全基础知识</h2><h3 id="网络的设备"><a href="#网络的设备" class="headerlink" title="网络的设备"></a>网络的设备</h3><ul><li>物理层：中继器、集线器</li><li>数据链路层：网桥、交换机</li><li>网络层：路由器</li><li>应用层：网关</li></ul><div class="table-container"><table><thead><tr><th></th><th>广播域</th><th>冲突域</th></tr></thead><tbody><tr><td>物理层</td><td>×</td><td>×</td></tr><tr><td>数据链路层</td><td>×</td><td>√</td></tr><tr><td>网络层</td><td>√</td><td>√</td></tr></tbody></table></div><h3 id="协议簇"><a href="#协议簇" class="headerlink" title="协议簇"></a>协议簇</h3><p>​                                        <img src="img/assets/1685079630978-b652f779-54ff-4718-8113-e4692be411a9.png" style="zoom:50%;" /><br>​                                                <img src="img/assets/1685079609574-90013942-1227-46ba-b363-9c059875d831.png" style="zoom:50%;" /></p><h4 id="传输层协议"><a href="#传输层协议" class="headerlink" title="传输层协议"></a>传输层协议</h4><ol><li>TCP（三次握手）</li></ol><p>可靠传输、连接管理、差错校验和重传、流量控制、拥塞控制、端口寻址，其中流量控制采用的是：可变大小的滑动窗口协议。</p><ol><li>UDP（不可靠，无连接）<h3 id="Internet-地址"><a href="#Internet-地址" class="headerlink" title="Internet 地址"></a>Internet 地址</h3><code>协议名://主机名.域名.域名后缀.域名分类/目录/网页文件</code><br><strong>IPv6 128位地址空间、IPv4 32位地址空间。</strong><h4 id="电子邮件服务（C-S-模式）"><a href="#电子邮件服务（C-S-模式）" class="headerlink" title="电子邮件服务（C/S 模式）"></a>电子邮件服务（C/S 模式）</h4></li></ol><ul><li>SMTP：传输 ASCII 文本    </li><li>MIME：邮件附件扩展类型</li><li>PEM</li><li>POP：POP2 和 POP3<h4 id="防火墙技术"><a href="#防火墙技术" class="headerlink" title="防火墙技术"></a>防火墙技术</h4>防火墙（Firewall）是建立在内外网络边界上的过滤封锁机制。</li></ul><ol><li>包过滤防火墙</li></ol><p>过滤型的防火墙通常是直接转发报文，它对用户完全透明，速度较快。<br>缺点：不能防范黑客攻击、不支持应用层协议、不能处理新的安全威胁。</p><ol><li>应用代理网关防火墙</li></ol><p>内网用户对外网的访问变成防火墙对外网的访问，然后再由防火墙转发给内网用户。</p><ol><li>状态检测技术防火墙</li></ol><p>状态检测技术防火墙结合了代理防火墙的安全性和包过滤防火墙的高速度等优点。</p><h2 id="第十二章-软件系统分析与设计"><a href="#第十二章-软件系统分析与设计" class="headerlink" title="第十二章 软件系统分析与设计"></a>第十二章 软件系统分析与设计</h2><h3 id="数据库设计的步骤"><a href="#数据库设计的步骤" class="headerlink" title="数据库设计的步骤"></a>数据库设计的步骤</h3><ol><li>用户需求分析</li><li>概念设计</li><li>逻辑设计</li><li>物理设计<h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4>需求分析阶段的文档：建立需求说明文档、数据字典和数据流程图。<h4 id="概念结构设计"><a href="#概念结构设计" class="headerlink" title="概念结构设计"></a>概念结构设计</h4>对需求分析阶段所得到的数据进行分类、聚集和概括，确定实体、属性和联系。</li></ol><ul><li>选择局部应用</li><li>逐一设计分 E-R 图</li><li>E-R 图合并</li></ul><p>🔺E-R 图之间的冲突   </p><ol><li>属性冲突。同一属性可能会存在于不同的分 E-R 图。</li><li>命名冲突。异名同义。</li><li>结构冲突。同一对象在某一分 E-R 图中被抽象为实体，而在另一分 E-R 图中又被抽象为属性。<h4 id="逻辑结构设计"><a href="#逻辑结构设计" class="headerlink" title="逻辑结构设计"></a>逻辑结构设计</h4>逻辑结构设计阶段的主要工作步骤包括：确定数据模型、将 E-R 图转换成为指定的数据模型、确定完整性约束和确定用户视图。<h1 id="软件设计师（下午题）"><a href="#软件设计师（下午题）" class="headerlink" title="软件设计师（下午题）"></a>软件设计师（下午题）</h1></li></ol><h3 id="试题一（15分）"><a href="#试题一（15分）" class="headerlink" title="试题一（15分）"></a>试题一（15分）</h3><p>一、二、三 固定题 （12-13）        四（2-3分）</p><p>问题一（平均3-4个实体    3-4分）</p><p>问题二（3- 4分）</p><p>问题三（3-6分）</p><p><strong>题目形式：文字说明 + 两张数据流图 + 问题</strong></p><p><a id="article"></a></p><hr><h5 id="数据流图（P-325）"><a href="#数据流图（P-325）" class="headerlink" title="数据流图（P 325）"></a>数据流图（P 325）</h5><p>数据流图的基本图形元素包括数据流、加工、数据存储和外部实体。</p><p><img src="img/assets/image-20230402155323603.png" alt=""></p><p><strong>外部实体</strong>：当前系统之外的<strong>人、物、外部系统</strong></p><p><strong>人</strong>：学生、老师、员工、主管、医生、客户、供应商……</p><p><strong>物</strong>：传感器、控制器、单车、车辆、采购部门……</p><p><strong>外部系统</strong>：支付系统、车辆交易系统、库存管理系统、道闸控制系统……</p><p><strong>数据存储</strong>：存储数据和提供数据，存储加工的输出数据和提供加工的输入数据</p><ul><li>例子：客户表、订单表、学生表 </li><li>巴士列表文件、维修记录文件、课表文件 </li></ul><p><strong>加工</strong>：将输入数据处理后得到输出数据</p><ul><li>一个加工至少有一个输入数据流和一个输出数据流</li><li>加工只有输入没有输出称为：黑洞</li><li>加工只有输出没有输入称为：白洞</li><li>加工的输入数据不足以产生输出数据：灰洞</li></ul><p><strong>数据流的起点或终点必须有一个是加工</strong></p><h5 id="问题一（易）"><a href="#问题一（易）" class="headerlink" title="问题一（易）"></a>问题一（易）</h5><p>找实体名称</p><p>写法：    E1 ：病人    E2：护理人员    E3：医生</p><h5 id="问题二（易）"><a href="#问题二（易）" class="headerlink" title="问题二（易）"></a>问题二（易）</h5><p>找数据存储名称</p><p>写法：D1：XX 表    XX 文件</p><p>D1：销售订单表    D2：库存表    D3：生产计划表    D 4：配方表 D5：采购订单表</p><h5 id="🔺问题三（难）（15-20分钟）"><a href="#🔺问题三（难）（15-20分钟）" class="headerlink" title="🔺问题三（难）（15~20分钟）"></a>🔺问题三（难）（15~20分钟）</h5><p>题型：</p><ul><li>根据说明和图中术语，补充图1-2中缺失的数据流及其起点和终点（三条即可）。</li><li>图1-2中缺失了4条数据流，使用说明、图1-1和图1-2中的术语，给出数据流的名称<br>及其起点和终点。</li><li>根据说明和图中词语，补充图1-2中缺失的数据流及其起点和终点。</li></ul><p><strong>三个解题方法</strong></p><ol><li>父图子图平衡</li><li>加工既有输入数据流也有输出数据流</li><li>数据守恒</li></ol><p>答题格式和注意事项</p><p>数据流名称：生产计划</p><p>① 起点：D3        终点：3</p><p>②起点：生产计划表        终点：生产</p><p><img src="img/assets/image-20230402211553041.png" alt=""></p><p>如何保持数据流图平衡</p><p>父图中加工的输入数据流必须与子图中的输入输出数据流在数量上和名字上相同；</p><p>父图中的一个输入（输出）数据流对应子图中几个输入（输出）数据流，而子图中组成这些数据流的数据项全体正好是父图中的这一条数据流。</p><h3 id="试题二（15分）"><a href="#试题二（15分）" class="headerlink" title="试题二（15分）"></a>试题二（15分）</h3><p>数据库设计：</p><ul><li>需求分析 </li><li><strong>概念模型   问题1 ：E-R图</strong> </li><li><strong>逻辑结构  问题2：关系模式</strong> </li><li><p>题型结构 </p><ol><li>说明</li><li>需求分析</li><li>概念模型（E-R图）</li><li>逻辑结构</li><li>问题<h4 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h4>实体用矩形表示，通常矩形框内写明实体名。<h4 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h4>联系用菱形表示，通常菱形框内写明联系名。<br><code>1：1</code>:</li></ol></li><li><p>转关系模式</p></li><li>归并到任一方实体</li></ul><p><code>1：*</code>:</p><ul><li>转关系模式</li><li>归并到多方实体，把1方实体主键加到多方实体的关系模式属性</li></ul><p><code>*:*</code>：转关系模式</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ol><li>简单属性和复合属性。简单属性是原子的、不可再分的，复合属性可以细分为更小的部分（即划分为别的属性）。</li><li>单值属性和多值属性。单独的一个值。</li><li>派生属性。派生属性可以从其他属性得来。<h4 id="实体-联系方法"><a href="#实体-联系方法" class="headerlink" title="实体-联系方法"></a>实体-联系方法</h4></li></ol><h3 id="试题三（15分）"><a href="#试题三（15分）" class="headerlink" title="试题三（15分）"></a>试题三（15分）</h3><h5 id="UML-关系"><a href="#UML-关系" class="headerlink" title="UML 关系"></a>UML 关系</h5><ol><li>类图 <ul><li>依赖 </li><li>关联：聚合、组合 </li><li>泛化 </li></ul></li><li>用例图 <ul><li>包含 <code>&lt;&lt;include&gt;&gt;</code></li><li>扩展<code>&lt;&lt;exted&gt;&gt;</code></li><li>泛化</li></ul></li></ol><p>​                                                                <img src="img/assets/202304122204974.png" style="zoom: 80%;" /></p><p>近几年题型</p><p>​                                            <img src="https://cdn.jishuqin.cn//202304122217271.png" style="zoom: 50%;" /></p>]]></content>
      
      
      <categories>
          
          <category> 软件设计师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 软件设计师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java动态代理</title>
      <link href="/2024/05/02/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>/2024/05/02/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="动态代理：-基于反射机制"><a href="#动态代理：-基于反射机制" class="headerlink" title="动态代理： 基于反射机制"></a>动态代理： 基于反射机制</h2><ol><li>什么是动态代理</li><li>知道动态代理能做什么</li></ol><ul><li>代理含义<ul><li>代理模式是指，为其他对象提供一种代理以控制对这个对象的访问，</li><li>在某些情况下，一个对象不适合或者不能直接应用另一个对象，</li><li>而代理对象可以在客户类和目标对象之间起到中介的作用<ul><li>代理对象，是为了不修改在目标对象的基础上，增强主业务逻辑。</li><li>客户真正想要访问的目标对象是通过代理对象来实现的</li><li>代理类与目标类实现同一接口</li></ul></li><li>代理模式的作用<ul><li>1、功能增强：在原有的功能的基础上，增加了额外的功能，新增增加的功能，叫做功能增强</li><li>2、控制访问：代理类代替客户类对目标对象进行访问，目标对象无法直接被客户类访问，需通过代理类访问</li></ul></li><li>实现代理的方式<ul><li>1、静态代理： <ul><li>代理类是自己手工实现的，自己创建一个java类，表示代理类</li><li>同时你所要使用代理的目标类是确定的 <ul><li>特点：实现简单，容易理解</li><li>例题：模拟用户购买u盘的行为<ul><li>用户是客户端类，商家是代理类，产家是目标对象</li><li>用户—访问—&gt;商家—访问—&gt;产家</li><li>其中商家和产家都是买u盘的，他们的功能是一致的<ul><li>实现方式：<ul><li>1、创建一个接口：定义卖u盘的方法，表示你的产家和商家做的事情</li><li>2、创建产家，实现1步骤的接口</li><li>3、创建商家，就是代理，也需要实现步骤1中的接口</li><li>4、创建一个客户端类，调用商家的方法买一个u盘</li></ul></li></ul></li></ul></li></ul></li><li>缺点：<ul><li>1、当目标类增强了，代理类可能会导致成倍的增加，代理类数量修改过多</li><li>2、当接口中的功能增加了，或则修改了，会影响众多的实现类</li></ul></li></ul></li><li>2、动态代理：<ul><li>在静态代理目标类众多，可以使用动态代理</li><li>优点：目标类即使众多，代理数量可以很少</li><li>当接口的方法修改时，不会影响代理类</li><li>定义：<ul><li>在程序的执行中，使用jdk的反射机制，来创建代理类对象，并动态指定要代理的目标类</li></ul></li><li>动态代理需要使用到反射，<ul><li>反射：允许对成员变量、成员方法和构造方法的信息进行编程访问</li><li>反射 可以 获取 字段（成员变量）、构造方法、成员方法<ul><li>1、显示从字节码class文件获取 类从内部成员等信息</li><li>2、对信息进行揭破<ul><li>1、获取class对象的三种方式<ul><li>①：Class.forName(“全类名”);// 源代码阶段</li><li>②：类名.class;// 加载阶段</li><li>③：对象.getClass();// 运行阶段</li></ul></li></ul></li><li>获取类的内部信息<ul><li>1、获取构造方法（Constructor）<ul><li>1、Constructor&lt;?&gt;[]getConstructors : 获取所有公共构造方法对象的数组</li><li>2、Constructor&lt;?&gt;[]getDeclaredConstructors() : 返回所有构造方法对象的数组</li><li>3、Constructor<T>getConstructor(Class&lt;?&gt; … parameterTypes); 返回单个公共构造方法对象</li><li>4、Constructor<T>getDeclaredConstructor(Class&lt;?&gt; …parameterTypes); 返回单个构造方法对象<ul><li>Constructor 类中用于创建对象的方法</li><li>T newinstance（Object initargs）根据指定的钩爪方法创建对象</li><li>setAccessible(boolean flag) ： 设置为true 表示取消访问检查</li></ul></li></ul></li><li>2、获取成员变量<ul><li>Field[] getFields() ：返回所有公共成员变量对象的数组</li><li>field[] getDeclaredFields()：返回成员变量的对象数组</li><li>Field getField(String name); 返回单个公共成员变量</li><li>field getDeclaredField(String name)：返回单个成员对象<ul><li>field类中用创建的对象的方法<ul><li>void set（obejct obj,Object value): 赋值</li><li>object get(Object) 获取值</li></ul></li></ul></li></ul></li><li>3、获取成员方法<ul><li>Method[] getmethods()：返回所有公共成员方法对象，包括继承类的</li><li>method[] getDeclaredMethods(): 返回所有成员方法对象的数组，不包括继承类</li><li>method getMethod(String name,Class&lt;?&gt; …parameterTypes): 返回单个公共成员方法对象</li><li>method getDeclaredMethod(String name,Class&lt;?&gt; …parameterTypes)：返回单个成员方法对象<ul><li>method类中用于创建对象的方法<ul><li>Object invoke(Object obj,Object …args): 运行方法</li></ul></li><li>参数一：用obj对象调用该方法</li><li>参数二：调用方法的传递的参数（如果没有为空）</li><li>返回值：方法的返回值（没有为空）</li></ul></li></ul></li></ul></li></ul></li></ul></li><li>回归动态代理，动态代理需要使用到反射的机制进行处理代理类，目标类，接口之间的关系<ul><li>动态代理的实现方式有两种：<ul><li>1、jdk动态代理：使用java反射包中的类和接口的实现动态代理的功能<ul><li>java.lang.reflect ,里面有有三个类：invocationHandler、method、Proxy</li></ul></li><li>2、cglib动态代理<ul><li>cglib是第三方的工具库，创建代理对象</li><li>cglib的原理是继承，cglib通过继承目标类，创建它的子类，在子类中</li><li>重写父类中同名的方法，实现功能的修改</li><li>要求目标类和方法都不能是final的</li></ul></li></ul></li><li>jdk动态代理实现：<ul><li>invocationHandler（调用处理器）：接口，就一个方法invoke()<ul><li>invoke():表示代理对象要执行的功能代码，你的代理类要写在invoke中<ul><li>代理类要完成的功能<ul><li>1、条用目标方法，执行目标方法的功能</li><li>2、功能增强</li></ul></li><li>方法的原型<ul><li>public Object invoke(Object proxy, Method method,Object[]args)<ul><li>Object proxy:jdk创建的代理对象，无需赋值</li><li>Method method：目标类中的方法</li><li>Object[] args：形参的参数值</li><li>将原来静态代理类做的事情写在invoke中</li></ul></li></ul></li></ul></li></ul></li><li>Method 类; 表示方法，确切的是目标类中的方法<ul><li>作用，通过method可以执行某个目标类总的方法：method.invoke(执行方法的对象，方法形参值);</li></ul></li><li>Proxy类： 核心的对象，创建代理对象，之前创建对象 new 类 的构造方法（）<ul><li>现在是使用Proxy类的方法，代替new的使用</li><li>使用 Proxy.newProxyInstance() 创建目标类的代理对象</li><li>public static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt; [] interfaces, invocationHandler h）<ul><li>参数</li><li>1、ClassLoader loader 类加载器，负责向内存加载创建对象，使用反射机制获取Loader<ul><li>这是目标对象的加载器</li><li>类a Class.forName(‘a类的全限定名”).getClassLoader() 获取 a 的字节码文件在获得加载器</li></ul></li><li>2、Class&lt;?&gt;[]interface: 目标对象实现的接口，也是反射获取<ul><li>类a class.forName(“类a的全全限定名”).getInterfaces() 获取所有目标对象实现的接口</li></ul></li><li>3、InvocationHandler : 是需要实现的功能，使用之前的InvocationHandler接口 的invoke 一样</li><li>返回值：是目标对象的代理对象 Proxy</li></ul></li></ul></li></ul></li><li>1、实现动态代理的步骤<ul><li>1、创建接口，定义目标类的完成的功能</li><li>2、创建目标类实现接口</li><li>3、创建InvocationHandler接口的实现昂类，在invoke方法中要完成代理的 功能<ul><li>1、调用目标方法</li><li>2、增强功能</li></ul></li><li>4、使用Proxy类的静态方法，创建代理对象，并把返回值转为接口类型</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> proxy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化测试</title>
      <link href="/2024/05/02/selenium-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/05/02/selenium-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="selenium———-自动化测试"><a href="#selenium———-自动化测试" class="headerlink" title="selenium——— 自动化测试"></a>selenium——— 自动化测试</h1><h2 id="selenium-简介"><a href="#selenium-简介" class="headerlink" title="selenium 简介"></a>selenium 简介</h2><h2 id="主流的web自动化测试工具"><a href="#主流的web自动化测试工具" class="headerlink" title="主流的web自动化测试工具"></a>主流的web自动化测试工具</h2><p>1、QTP：QTP是一个商业化的功能测试工具，支持web测试和，桌面自动化测试</p><p>2、selenium：是一个开源的自动化测试工具，主要是功能测试</p><p>3、Robot framework：是一个基于python可拓展关键字驱动的测试自动化框架</p><h2 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h2><p>​    元素：页面内的元素，代码和元素是一一对应的关系，通过属性 与 属性值（key=value）键值对，进行元素定位</p><h3 id="元素定位方式"><a href="#元素定位方式" class="headerlink" title="元素定位方式"></a>元素定位方式</h3><ul><li>id定位（id值 定位）<ul><li>find_element(By.ID,’path’)</li></ul></li><li>name定位（通过name属性定位）<ul><li>find_element(By.NAME,’path’)</li></ul></li><li>class_name定位（通过class_name定位）<ul><li>find_element(By.Class_Name)</li></ul></li><li>tag_name（标签元素）（tag_name定位</li><li>link_text 定位</li><li>partical_link_text(超链接元素)</li><li>XPath(页面元素中的连接路径)</li><li>Css（）</li></ul><h5 id="Xpath-路径文件"><a href="#Xpath-路径文件" class="headerlink" title="Xpath 路径文件"></a>Xpath 路径文件</h5><ul><li>语法1：//标签名[@属性=’属性值’]</li><li>语法2：//*[@属性=’属性值’]<ul><li>使用相对路径：<ul><li>以//开始，格式：//input 或 //*</li></ul></li><li>使用绝对路径：<ul><li>从/html根标签开始，使用/分隔开</li><li>格式：/html/body/div/fiedset/p[1]/input</li></ul></li></ul></li><li>last()方法<ul><li>语法1：//标签名[last()]</li><li>语法2：//span/ul/li[last()]<ul><li>获取倒数第1个元素</li><li>//标签名[last()-1]</li><li>//span/ul/li[last()-1]</li></ul></li></ul></li><li>and 方法<ul><li>//标签名[@元素名称=’元素值’ and @ 元素名称=’元素值’ ]    <ul><li>实例：//input[@id=’kw’ and @class=’s_ipt’]</li></ul></li></ul></li><li>or 方法<ul><li>//标签名[@元素名称=’元素值’ or @ 元素名称=’元素值’]<ul><li>实例//input[@id=’kw’ or @class=’s_t’]</li></ul></li></ul></li><li>非查找控件<ul><li>//标签名称[@元素名称 != ‘元素值’]<ul><li>实例//input[@class != ‘1111’]</li></ul></li></ul></li><li>not查找<ul><li>//标签名[not(.=’元素值’)]<ul><li>实例：//year[not(.=2005)]</li><li>实例：//div[not(@id=’tab-AndroidVersions’)]<ul><li>year内容不为2005的内容、’.’ 相当于是text()</li></ul></li></ul></li></ul></li><li>模糊匹配<ul><li>//标签名[contains(text(),’内容’)]<ul><li>实例：//div[contains(test(),’更新’)]</li></ul></li></ul></li><li>精确匹配<ul><li>//标签名[text()=’内容’]</li><li>//div[text()=’更新文案’]</li></ul></li><li>使用大小写符号定位<ul><li>//div[@class=’cell’ and text()&gt;’1336’]</li><li>//div[@class=’cell’ and text()&lt;’1336’]</li></ul></li><li>轴方式定位<ul><li>parent::*  表示当前结点的父父结点元素</li><li>ancestor::* 表示当前结点的祖先节点元素</li><li>child::<em> 表示当前节点的子元素 /A/descendant::</em> 表示A的所有后代元素</li><li>self::*  表示当前节点的自身元素</li><li>ancestor-or-self::* 表示当前节点的它的祖先节点元素</li><li>following-sibling::* 表示当前的前面所有兄弟节点</li><li>descentdant-or-self::* 表示当前节点的及他们的后代元素</li><li>preceding-silibing::* 表示当前节点的所有兄弟节点元素</li><li>following::* 表示当前的后序所有元素</li><li>preceding::* 表示当前节点的所有元素</li></ul></li><li>position位置定位<ul><li>定位下一个元素<ul><li>//th[@class=’c-id’ and postion()=1]</li><li>或者使用//th[@class=’c-id’ and postion()&lt;2]</li></ul></li></ul></li></ul><h5 id="CSS策略"><a href="#CSS策略" class="headerlink" title="CSS策略"></a>CSS策略</h5><ul><li>通过id进行css定位<ul><li>实例：self.driver.find_element(By.CSS_SELLECT,’#id_value’)</li></ul></li><li>通过class进行css定位<ul><li>使用classnameCSS样式进行定位<ul><li>实例：self.find_element(By.CSS_SELECT,’.class_value’)</li></ul></li></ul></li><li>tag_name标签名了进行定位<ul><li>直接使用标签名进行元素定位<ul><li>实例：self.find_element(By.CSS_SELECT,’TAG_NAME’)</li></ul></li><li>使用button标签名进行元素定位<ul><li>实例：self.find_element(By.CSS_SELECT,’button’)</li></ul></li></ul></li><li>使用属性选择器：根据元素的属性名和值来选择<ul><li>格式[attribut=value] element[attribute=value]</li><li>self.driver.find_element(By.CSS_SELECT,’[attribute=value]’)</li></ul></li><li>层级选择器：根据元素的父子关系来选择<ul><li>格式：element1 &gt;  element2<ul><li>通过element1 来定位 element2 ，并且element2必须是直接子元素<ul><li>实例：self.driver.find_element(By.CSS_SELECT,’p[id=’p1’] &gt;  input’)</li><li>解释：使用p1 的 直接 子元素</li></ul></li></ul></li><li>格式：element1 element3<ul><li>通过element1 来定位element3<ul><li>实例：self.driver.find_element(By.CSS_SELECT,’p[id=”p1”] input’)</li><li>解释：使用 p1 后代元素 input</li></ul></li><li>层级选择器 父级层级关系<ul><li>实例：self.driver.find_element(By.CSS_SELECT,’[id=”id_value”] &gt; [placeholder=”请设置用户名”]’)</li></ul></li><li>祖辈层级关系<ul><li>self.driver.find_element(By.CSS_SELECT,’form [placeholder=”请设置用户名”])</li></ul></li><li>父子层级关系，使用祖辈层级方式<ul><li>实例：self.driver.find_element(By.CSS_SELECT,’[id=’id_value] [placeholder=”请选择用户名”]’)</li></ul></li></ul></li><li>格式：层级关系定位</li><li>element,element : div,p  选择所有<div> 元素和所有<p> 元素</li><li>element element : div p 选择<div> 元素 内部的所有<p> 元素包括子代元素</li><li>element&gt;element : div&gt;p 选择父元素为<div> 元素的所有<p> 元素。只包括子代</li><li>element+element : div+p 选择父元素为<div> 元素之后的所有<p> 元素 ，同辈元素</li></ul></li><li>css定位延伸<ul><li>含义<ul><li>^= : 开头含</li><li>$= : 结尾含</li><li>*= : 内容含</li><li>~= : 由多个空格隔开，匹配其中一个子的方法</li></ul></li><li>案例<ul><li>input[type^=’p’] type 属性以p字母开头的元素</li><li>input[type$=’d’] type 属性以d字母结束的元素</li><li>input[type*=’w’] type 属性包含w字母的元素</li><li>input[class~=’btn’] class 属性 包含多个空格值</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> selenium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 自动化测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python[Logging 内置函数]</title>
      <link href="/2024/05/02/logging%E2%80%94%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/"/>
      <url>/2024/05/02/logging%E2%80%94%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="logging—日志处理"><a href="#logging—日志处理" class="headerlink" title="logging—日志处理"></a><strong>logging—日志处理</strong></h1><h2 id="logging-日志级别——默认级别时warning"><a href="#logging-日志级别——默认级别时warning" class="headerlink" title="logging 日志级别——默认级别时warning"></a>logging 日志级别——默认级别时warning</h2><div class="table-container"><table><thead><tr><th style="text-align:left">级别</th><th style="text-align:left">级别数值</th><th style="text-align:left">使用时机</th></tr></thead><tbody><tr><td style="text-align:left">DEBUG</td><td style="text-align:left">10</td><td style="text-align:left">详细信息，常用与调试</td></tr><tr><td style="text-align:left">INFO</td><td style="text-align:left">20</td><td style="text-align:left">程序正常允许过程中产生的一些信息</td></tr><tr><td style="text-align:left">WARNING</td><td style="text-align:left">30</td><td style="text-align:left">警告用户，虽然程序还在允许，但是可能发生错误</td></tr><tr><td style="text-align:left">ERROR</td><td style="text-align:left">40</td><td style="text-align:left">由于更严重的问题，程序已经不能执行一些功能了</td></tr><tr><td style="text-align:left">CRITICAL</td><td style="text-align:left">50</td><td style="text-align:left">严重错误，程序已经不能允许</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 basicConfig() 来指定 日志 的 输出 格式</span></span><br><span class="line"><span class="comment"># filename 为 要将 日志保存 的 文件 </span></span><br><span class="line"><span class="comment"># filemode 为 写入 方式 默认是（默认是 追加方式） ‘w’ 是 先清空 后 写入</span></span><br><span class="line">logging.basicConfig(filename=<span class="string">&quot;./demo.log&quot;</span>,filemode=<span class="string">&quot;w&quot;</span>,level=logging.DEBUG)</span><br><span class="line">logging.debug(<span class="string">&quot;this is debug level&quot;</span>)</span><br><span class="line">logging.info(<span class="string">&quot;this is info level&quot;</span>)</span><br><span class="line">logging.warning(<span class="string">&quot;this is warning level&quot;</span>)</span><br><span class="line">logging.error(<span class="string">&quot;this. error level&quot;</span>)</span><br><span class="line">logging.critical(<span class="string">&quot;this critical level&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">控制台输出：</span></span><br><span class="line"><span class="string">    DEBUG:root:this is debug level</span></span><br><span class="line"><span class="string">    INFO:root:this is info level</span></span><br><span class="line"><span class="string">    WARNING:root:this is warning level</span></span><br><span class="line"><span class="string">    ERROR:root:this. error level</span></span><br><span class="line"><span class="string">    CRITICAL:root:this critical level</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="logging-向日志输出变量"><a href="#logging-向日志输出变量" class="headerlink" title="logging 向日志输出变量"></a>logging 向日志输出变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向日志 输出变量</span></span><br><span class="line">logging.basicConfig(level=logging.DEBUG)</span><br><span class="line">name = <span class="string">&quot;cleamy&quot;</span></span><br><span class="line">age = <span class="string">&quot;20&quot;</span></span><br><span class="line"><span class="comment"># 格式化</span></span><br><span class="line">logging.debug(<span class="string">&quot;name: %s, age: %s &quot;</span> % (name, age))</span><br><span class="line">logging.debug(<span class="string">&quot;name: &#123;&#125;, age: &#123;&#125; &quot;</span>.<span class="built_in">format</span>(name, age))</span><br><span class="line">logging.debug(<span class="string">f&quot;name: <span class="subst">&#123;name&#125;</span>, age: <span class="subst">&#123;age&#125;</span> &quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">控制台输出</span></span><br><span class="line"><span class="string">    DEBUG:root:name: cleamy, age: 20 </span></span><br><span class="line"><span class="string">    DEBUG:root:name: cleamy, age: 20 </span></span><br><span class="line"><span class="string">    DEBUG:root:name: cleamy, age: 20 </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><p>logging 自定义  输出格式</p><p>自定义logging的日志输出方式可以 通过 format 和 datefmt 参数 进行设置</p><p>以下是常见的日志格式意思</p><div class="table-container"><table><thead><tr><th>格式样式</th><th>翻译</th></tr></thead><tbody><tr><td>%(name)s</td><td>记录器(日志通道)的名称</td></tr><tr><td>%(levelno)s</td><td>日志级别编号(DEBUG, INFO, WARNING, ERROR, CRITICAL)</td></tr><tr><td>%(levelname)s</td><td>日志级别名称(DEBUG, INFO, WARNING, ERROR, CRITICAL)</td></tr><tr><td>%(pathname)s</td><td>日志调用的源文件的完整路径名(如果可用)</td></tr><tr><td>%(filename)s</td><td>日志调用的源文件名称</td></tr><tr><td>%(module)s</td><td>日志调用的源文件所在的模块名称</td></tr><tr><td>%(lineno)d</td><td>日志调用的源文件中的代码所在的行数</td></tr><tr><td>%(funcName)s</td><td>方法名称</td></tr><tr><td>%(created)f</td><td>创建日志记录的时间</td></tr><tr><td>%(asctime)s</td><td>创建LogRecord时的文本时间</td></tr><tr><td>%(msecs)d</td><td>创建时间的毫秒部分</td></tr><tr><td>%(thread)d</td><td>Thread ID</td></tr><tr><td>%(threadName)s</td><td>Thread name</td></tr><tr><td>%(process)d</td><td>Process ID</td></tr><tr><td>%(message)s</td><td>日志的消息</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义 日志格式</span></span><br><span class="line">format_log = <span class="string">&quot;%(asctime)s %(levelname)s %(filename)s:%(lineno)s %(message)s&quot;</span></span><br><span class="line"><span class="comment"># 自定义 日志 时间 格式</span></span><br><span class="line">date_format = <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span></span><br><span class="line"><span class="comment"># 自定义 日志格式 输出</span></span><br><span class="line">logging.basicConfig(<span class="built_in">format</span>=format_log,datefmt=date_format,level=logging.DEBUG)</span><br><span class="line">name = <span class="string">&quot;cleamy&quot;</span></span><br><span class="line">age = <span class="string">&quot;20&quot;</span></span><br><span class="line">logging.debug(<span class="string">&quot;name: %s, age: %s &quot;</span> % (name, age))</span><br><span class="line">logging.debug(<span class="string">f&quot;name: <span class="subst">&#123;name&#125;</span>, age: <span class="subst">&#123;age&#125;</span> &quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">控制台输出</span></span><br><span class="line"><span class="string">2024-04-11 19:45:38 DEBUG test_logging_format.py:14 name: cleamy, age: 20 </span></span><br><span class="line"><span class="string">2024-04-11 19:45:38 DEBUG test_logging_format.py:15 name: cleamy, age: 20 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="logging-高级应用"><a href="#logging-高级应用" class="headerlink" title="logging 高级应用"></a>logging 高级应用</h2><h3 id="logging-模块-采用-了-模块化设计，主要包含四种组件"><a href="#logging-模块-采用-了-模块化设计，主要包含四种组件" class="headerlink" title="logging 模块 采用 了 模块化设计，主要包含四种组件"></a>logging 模块 采用 了 模块化设计，主要包含四种组件</h3><p>Loggers：记录器，提供应用程序代码能直接使用</p><p>Handlers：处理器，将就器产生的日志发发送至目的地</p><p>Filters：过滤器，提供更好的粒度控制，决定哪些日志会被输出</p><p>formatters：格式化器，设置日志内容的组成结构和消息字段</p><p>loggers 记录器</p><p>​    1.提供应用程序的调用接口</p><p>​        logger =  logging.getLogger(_<em>name_</em>)</p><p>​    2、决定日志记录的级别</p><p>​        logger.setLevel()</p><p>​    3、将日志内容传递到相关的handles中</p><p>​        logger.addHandler() 和logger.removeHandler()</p><p>Handlers 处理器</p><p>它将日志分发到不同的目的地，可以是文件、标准输出、邮件、或者通过socke、http等协议发送的地方</p><p>​    Streamhandler</p><p>​        标准输出stdout(如显示器)分发器</p><p>​        创建方法: sh = loggin.StreamHandler(stream=None)</p><p>​    FileHandler</p><p>​        将日志保存到磁盘文件的处理器</p><p>​        创建方式：fh = logging.FileHandler(filename,mode=’a’,encoding=’utf-8’)</p><p>​        setFormatter()：设置当前handler对象使用的消息格式</p><p>RotatingFileHandler 多文件日志文件 </p><p>TimedRotatingFileHandler 按照时间进行多个日志文件</p><p>Formatter 格式</p><p>formatter对象用来最终设置日志信息的顺序、结构和内容</p><p>​    其构造方法为</p><p>​    ft = logging.formatter._<em>init_</em>(fmt=None,datafmt=None,style=’%’)</p><p>​    datefmt 默认是 %Y-%m-%d %H:%M:%S 样式</p><p>​    style 参数 默认为 百分符%, 这样表示%(\<dictionary key>)s 格式的 字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用便流程的方式</span></span><br><span class="line"><span class="comment"># 记录器 默认使用 root 作为记录器</span></span><br><span class="line">logger = logging.getLogger(<span class="string">&quot;applog&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(logger)</span><br><span class="line">logger = logging.getLogger()</span><br><span class="line"><span class="comment"># 如果 logger没有设置debug 那么 默认是 warning</span></span><br><span class="line"><span class="comment"># 其 控制器的 日志 级别 小于warning的 化 将 会 不起 作用</span></span><br><span class="line"><span class="comment"># 所以 logger 需要 设置 最低 级别 debug</span></span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"><span class="built_in">print</span>(logger)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理器handler</span></span><br><span class="line">consoleHandler = logging.StreamHandler()</span><br><span class="line">consoleHandler.setLevel(logging.INFO)</span><br><span class="line"><span class="built_in">print</span>(consoleHandler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 文件handler 如果没有 指定 日志 输出 级别 则 默认是 logger 的 级别</span></span><br><span class="line">filehandler = logging.FileHandler(filename=<span class="string">&#x27;demo2.log&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(filehandler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># formater 格式</span></span><br><span class="line">formater = logging.Formatter(<span class="string">&quot;%(asctime)s %(filename)s %(lineno)s %(message)s&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给处理器 设置格式</span></span><br><span class="line">consoleHandler.setFormatter(formater)</span><br><span class="line">filehandler.setFormatter(formater)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录器 添加 处理器</span></span><br><span class="line">logger.addHandler(consoleHandler)</span><br><span class="line">logger.addHandler(filehandler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤器 过滤 logger 名字 是 以 cn.ccb 开头的</span></span><br><span class="line"><span class="comment"># 只有 是 cn.ccb  开头才会打印</span></span><br><span class="line">f = logger.Filter(<span class="string">&quot;ccb&quot;</span>)</span><br><span class="line"><span class="comment"># 只有 logger 的 名师 ccb 开头 才会 向 文件写入日志</span></span><br><span class="line">filehandler.Filter(<span class="string">&quot;ccb&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印 日志 的 代码</span></span><br><span class="line">logger.debug(<span class="string">&quot;this is logger of debug&quot;</span>)</span><br><span class="line">logger.info(<span class="string">&quot;this is logger of info&quot;</span>)</span><br><span class="line">logger.warning(<span class="string">&quot;this is logger of warning&quot;</span>)</span><br><span class="line">logger.error(<span class="string">&quot;this is logger of error&quot;</span>)</span><br><span class="line">logger.critical(<span class="string">&quot;this is logger of critical&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件 的级别没有设置，默认 logger 当前级别</span></span><br><span class="line"><span class="comment"># 控制台 设置为了 infor 级别 只打印 info等以上级别的信息</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">控制台 日志信息</span></span><br><span class="line"><span class="string">2024-04-11 20:49:50,389 loggingFor.py 33 this is logger of info</span></span><br><span class="line"><span class="string">2024-04-11 20:49:50,389 loggingFor.py 34 this is logger of warning</span></span><br><span class="line"><span class="string">2024-04-11 20:49:50,389 loggingFor.py 35 this is logger of error</span></span><br><span class="line"><span class="string">2024-04-11 20:49:50,389 loggingFor.py 36 this is logger of critical</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">文件夹中的 日志信息</span></span><br><span class="line"><span class="string">2024-04-11 20:49:50,389 loggingFor.py 32 this is logger of debug</span></span><br><span class="line"><span class="string">2024-04-11 20:49:50,389 loggingFor.py 33 this is logger of info</span></span><br><span class="line"><span class="string">2024-04-11 20:49:50,389 loggingFor.py 34 this is logger of warning</span></span><br><span class="line"><span class="string">2024-04-11 20:49:50,389 loggingFor.py 35 this is logger of error</span></span><br><span class="line"><span class="string">2024-04-11 20:49:50,389 loggingFor.py 36 this is logger of critical</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> logging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring 知识1</title>
      <link href="/2024/05/02/spring%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/"/>
      <url>/2024/05/02/spring%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%861/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h4 id="1-spring-IOC-控制反转-（将控制权转移到ApplicationContext）"><a href="#1-spring-IOC-控制反转-（将控制权转移到ApplicationContext）" class="headerlink" title="1. spring IOC(控制反转) （将控制权转移到ApplicationContext）"></a>1. spring IOC(控制反转) （将控制权转移到ApplicationContext）</h4><pre><code>1. 控制反转（Inversion of Control)   是面向对象编程中一个设计原则   用来降低程序代码之间的耦合度2. 传统面向对象编程中，获取对象的方式通过    new关键字主动床i教案一个对象，也就是说应用程序    掌握着对象的控制权，3. IoC控制反转机制指的是对象有Ioc容器同意管理，    单程序需要使用对象是，可以直接从ioc 容器中获取，    这样对象的控制权就转移到了ioc容器    它是借助ioc容器实现具有依赖关系对象    之间的解耦，给个对象类封装之后    通过ioc容器来关联这些对象类</code></pre><h4 id="2-依赖注入-dependency-inject"><a href="#2-依赖注入-dependency-inject" class="headerlink" title="2. 依赖注入(dependency inject)"></a>2. 依赖注入(dependency inject)</h4><pre><code>1、  依赖注入的作用就是在使用Spring框架创建对象时    动态的将其所依赖的对象注入到Bean组件中    依赖注入通常有两种实现凡是       一种时构造方法注入    另一种时属性setter方法注入</code></pre><ul><li>构造方法注入<ul><li>构造方法注入是指Spring容器条用钩爪方法注入被依赖的实例</li><li>构造方法可以是有参或者是无参的</li><li>spring在读取配置信息后，会通过反射方式条用实例的钩爪方法</li><li>如果是有参构造方法，可以在构造方法种装入所需要的参数指，最后创建类的对象</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   bean definition here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user1Spring&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cleamy.User1&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            确定参数的 (三选其一）</span></span><br><span class="line"><span class="comment">                name 属性：通过参数的名字来确定参数</span></span><br><span class="line"><span class="comment">                type 属性： 通过参数的类型来确定参数</span></span><br><span class="line"><span class="comment">                index属性： 通过参数的索引来确定参数</span></span><br><span class="line"><span class="comment">           给属性赋值的 （二选其一）</span></span><br><span class="line"><span class="comment">                value 属性： 用来给基本类型的复制</span></span><br><span class="line"><span class="comment">                ref ： 用来给引用类型进行复制</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span>    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>\<constructor-arg>元素 : 此 元素 需要类种有构造方法（构造器）<ul><li>一个constructor-arg 元素表示钩爪方法的一个参数，</li><li>而且定义时不区分顺序，只需要通过 name 属性来指定 构造方法中 的 参数</li><li>constructor-arg 元素 还提供了 type 属性来 指定 参数的类型，避免字符串和基本数据类型混淆</li><li>value 为 提供 给name对应变量 的 值</li></ul></li></ul><ul><li>属性 setter 方法 完成 依赖注入<ul><li>1.属性setter防止 注入是 Spring 最 主流 的注入方法</li><li>这种方法简单直观，</li><li>他是在被注入的类中声明一个setter方法，</li><li>通过setter方法的参数注入对应的值<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2Spring&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cleamy.User2&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li>\<property> 元素 使用setter方法 进行注入<ul><li>name ：是 setter 方法去掉 set关键字后 得到名称</li><li>例如：setProbably 的 name 是probably</li></ul></li></ul><h4 id="3-了解Spring-ioc-容器的原理"><a href="#3-了解Spring-ioc-容器的原理" class="headerlink" title="3. 了解Spring ioc 容器的原理"></a>3. 了解Spring ioc 容器的原理</h4><pre><code>    * Bean 标签机器属性的使用    * 熟悉Bean 的实例化    * Bean 的作用域    * bean的装配方式    * bean 的生命周期</code></pre><h5 id="BeanFactory-与-applicationContext-的关系"><a href="#BeanFactory-与-applicationContext-的关系" class="headerlink" title="BeanFactory 与 applicationContext 的关系"></a>BeanFactory 与 applicationContext 的关系</h5><ul><li><ul><li>BeanFactory 是 spring 的早期接口，称为Bean工厂</li></ul></li><li><ul><li>Application 是 后期更加高级接口，称为容器</li></ul></li><li><ul><li>applicationContext 在BeanFactory的基础上对功能进行拓展，</li></ul><ul><li>例如：监听功能、国际化功能等，BeanFactory的API 更偏向底层，ApplicationContext是对底层代码的封装</li></ul></li><li><ul><li>Bean创建主要逻辑和功能都被分装在BeanFactory工厂中，ApplicationContext 不仅继承了BeanFactory，而且</li><li>ApplicationContext内部还维护着BeanFactory的引用，所以两者之间既有继承关系，又有融合关系</li></ul></li><li><ul><li>Bean的初始化实际不同，元素BeanFactory 是在首次条用getBean之后才进行Bean创建，</li><li>ApplicationContext是在配置文件加载，容器一创建九江Bean都实例化并初始化</li></ul></li></ul><ol><li>基于xml方式Bean的配置</li><li>基于注解方式Bean的配置</li></ol><h2 id="基于xml方式Bean的配置"><a href="#基于xml方式Bean的配置" class="headerlink" title="基于xml方式Bean的配置"></a>基于xml方式Bean的配置</h2><h4 id="1-SpringBean的配置详情"><a href="#1-SpringBean的配置详情" class="headerlink" title="1. SpringBean的配置详情"></a>1. SpringBean的配置详情</h4><ul><li><ol><li>Bean 的基础配置</li></ol><ul><li>例如UserDaoImpl 有spring 容器负责管理<ul><li><bean id ="userDao" class ="com.cleamy.dao.impl.UserDaoImpl"></bean></li></ul></li><li>此时存储到spring容器（singleObjects单例池）中的Bean的beanName是UserDao，</li><li>值是UserDaoImpl对象</li><li>可以更具id获取Bean实例<ul><li>applicationContext.getBean(“UserBean”);</li></ul></li><li>如果id值没有配置，泽spring会把当前Bean实例的全限定名作为beanName<ul><li>applicationContext.getBean(“com.cleamy.dao.impl.UserDaoImpl”)</li></ul></li></ul></li><li><ol><li>Bean的别名设置</li></ol><ul><li>可以为当前Bean指定多个别名，更具别名可以获得Bean实例<ul><li>&lt;bean id=”userDao” name=”aaa,bbb” class=”com.cleamy.dao.impl.UserDaoImpl”)</li></ul></li></ul></li><li><ol><li>spring 的 配置详解<ul><li>默认情况下，单纯的spring 环境Bean 的作用范围有两个;Singleton 和 Prototype</li><li>singleton ：单例，默认值</li><li>spring 容器创建的时候，就会进行Bean的实例化，并存储到容器内波，的单例池中</li><li>每次getBean都是从单例池中获取相同的Bean的实例</li><li>prototype：原型，</li><li>spring容器初始化时不会创建bean 实例对象，</li><li>而是当调用getBean的时候，才会实例化Bean对象</li><li>每一次调用GetBean都会创建一个新的Bean实例<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userType&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.demo.service.impl.userServiceImpl&quot;</span> <span class="attr">scop</span>=<span class="string">&quot;prototype/singleton&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li><ol><li>spring bean 的 延迟加载</li></ol><ul><li>当lazy-init 设置为true时 为 延迟加载，</li><li>也就是单spring 容器创建的时候，不会立即创建Bean实例，等待用到时在创建Bean 实例并存储到单例池中，</li><li>后续使用该bean时直接冲单例池获取，本质上该Bean还是单例的<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.demo.dao.impl.UserDaoImpl&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><ol><li>Bean 的初始化和销毁方法配置</li></ol><ul><li>Bean 在实例化后，可以执行指定的初始化方法完成一些初始化</li><li>Bean 在销毁之前，也可以执行指定的销毁方法完成一些操作，初始化方法名称和销毁方法名称通过<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.demo.impl.userDaoImpl&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>拓展<br>-除以上之外，我们还可以通过事项InitializingBean 接口，完成一些Bean的初始化操作<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>,InitializingBean&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDaoIMpl</span> <span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPrototype</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><ol><li>bean 的实例化配置</li></ol><ul><li>spring的实例化方式主要如下两种：<ul><li>构造方式实例化：底层通过构造方法对bean进行实例化</li><li>工厂方式实例化：底层通过调用自定义的工厂方法对bean进行实例化</li></ul></li><li>工厂方式实例化Bean：三种</li><li>静态工厂方法实例化bean、<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过静态方法实现类的实例化</span></span><br><span class="line"><span class="comment">           返回存储的实例化类型是 factory-method 方法返回的 对象类型</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cleamy.factory.MyBeanFactory1&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">factory-method</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>实例工厂方法实例化Bean<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        通过动态方法实现类的实例化</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 先实例化工厂对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myFactory2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cleamy.factory.MyBeanFactory2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 然后通过工厂实例化的对象调用工厂内的 实例化方法 ,同样 返回的实例化类型是，工厂内该方法返回的实例化对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao2&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;myFactory2&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>实现factoryBean规范延迟实例化Bean</li><li>注意：只要是构造bean的方法，其参数都可以用 constructor-arg 元素进行传递值</li></ul></li><li><ol><li>Bean 的依赖注入配置</li></ol><ul><li>bean 依赖注入有两种方式：<ul><li>通过Bean的set方式注入<ul><li><ul><li><property name="userDao" ref="userDao"/></li></ul></li><li><ul><li><property name ="userDo" value= "haha"/></li></ul></li></ul></li><li>构造bean的方法进行注入<ul><li><ul><li><constructor-arg name="name" ref="userDao"/></li></ul></li><li><ul><li><constructor-arg name="name" value="haha"/></li></ul></li></ul></li></ul></li><li>依赖注入的数据类型如下三种：<ul><li>普通数据类型,例如：String、int、boolean、，通过value进行属性指定</li><li>引用数据类型，例如： UserDaoImpl、DateSource ,等通过ref(references(关联))进行属性指定</li><li>集合数据类型，列如：List、map 、properties等</li></ul></li><li>拓展：自动装配方式<ul><li>如果被注入的属性类型是Bean引用的话，</li><li>那么可以在<bean> 标签中使用autowire 属性</li><li>配置自动注入方式</li><li>属性值有两个<ul><li>byName：通过属性名自动装配，即去匹配setXxx与id=“XX”（name=“XX”)</li><li>byType：通过Bean的类型从容器中匹配，匹配出多个相同Bean类型时，报错<ul><li><bean id="userService" class="com.cleamy.service.impl.UserServiceImpl" autowire="byType"/></li></ul></li></ul></li></ul></li><li>集合数据类型注入<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- 注入集合</span></span><br><span class="line"><span class="comment">        使用property的子标签 list标签进行注入集合中的每一项</span></span><br><span class="line"><span class="comment">            普通数据类型使用 value</span></span><br><span class="line"><span class="comment">            引用数据类型使用 ref</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceList&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;com.cleamy.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stringList&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDaoList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 可以直接通过bean 实例化列表中对应的对象，也可以关联外部的对象 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.cleamy.service.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.cleamy.service.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;userDao2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;stringSet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDaoSet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.cleamy.service.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.cleamy.service.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;userDao2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- key \ key-ref \ value \ value-ref --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;a1&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;userDao2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;b1&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;userDao2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;o1&quot;</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao2&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;com.cleamy.service.impl.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>import 标签<ul><li>用于导入其他配置文件，项目变大后，就会导致配置文件内容过多</li><li>可以将配置文件根据业务模块进行拆分，最终通过<import> 标签导入一个著配置配置文件中<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span> = <span class="string">&quot;classpath:UserModuleApplicationContext.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span> = <span class="string">&quot;classpath:ProductModuleApplicationContext.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li>alias 标签<ul><li>别名</li><li><alias name= "BeanIdName" alisa= "AlisaName"/></li></ul></li></ul></li></ul><h4 id="配置非自定义Bean"><a href="#配置非自定义Bean" class="headerlink" title="配置非自定义Bean"></a>配置非自定义Bean</h4><ul><li>开发中的某些功能类不是自定义的，而是通过jar包中的，那么这些Bean要想然Spring进行管理啊</li><li>需要对其进行配置</li><li>配置非自定义的Bean需要考虑两个方面<ul><li>被配置的Bean的实例化方式时什么，无参构造、有参构造、静态工厂方法，还是实例工厂方式</li><li>bean中是否需要注入必要属性</li></ul></li><li>导入jar第三方<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.46<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置 druid 数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置非自定义类的bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span> =<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span> = <span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span> = <span class="string">&quot;123456&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span> = <span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=</span></span></span><br><span class="line"><span class="string"><span class="tag">            <span class="symbol">&amp;amp;</span><span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="symbol">&amp;amp;</span>characterEncoding=utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置connection 非自定义bean<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   通过静态工厂实例的方式进行 实例化对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;classF&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.Class&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;forName&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span> = <span class="string">&quot;className&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ConnectionSql&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.sql.DriverManager&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getConnection&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=False</span></span></span><br><span class="line"><span class="string"><span class="tag">                                            <span class="symbol">&amp;amp;</span><span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="symbol">&amp;amp;</span>characterEncoding=utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>配置日期对象      <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置日期对象--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;format&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.text.SimpleDateFormat&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;pattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;date&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;format&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;parse&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;source&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2023-8-24 12:00:00&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>配置mybatis 的 sqlSessionFactory 交由spring管理<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置mybatis连接--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mybatisStream&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.ibatis.io.Resources&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getResourceAsStream&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;resource&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mybatis-config.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sessionFactoryBuild&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.ibatis.session.SqlSessionFactoryBuilder&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;builder&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;sessionFactoryBuild&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;build&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;inputStream&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;mybatisStream&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Bean-实例化的基本流程"><a href="#Bean-实例化的基本流程" class="headerlink" title="Bean 实例化的基本流程"></a>Bean 实例化的基本流程</h3><ul><li><ul><li>加载xml文件，解析获取配置中的每个bean信息，封装成为一个BeanDefinition对象</li><li>将BeanDefinition存储在一个名为BeanDefinitionMap的Map《String，BeanDefinition》集合中</li><li>ApplicationContext 底层遍历beandefinitionMap，创建Bean实例对象</li><li>创建好的Bean实例对象，存储到一个名为singletonObject的map《String，Object》对象中<ul><li>执行当前applicationContext.getBean()时，从singletonObject（单例池）去匹配Bean实例返回</li></ul></li></ul></li></ul><h3 id="spring的后置处理器-后期多回顾，理论底层知识，暂时不总结"><a href="#spring的后置处理器-后期多回顾，理论底层知识，暂时不总结" class="headerlink" title="spring的后置处理器(后期多回顾，理论底层知识，暂时不总结)"></a>spring的后置处理器(后期多回顾，理论底层知识，暂时不总结)</h3><h3 id="spring的生命周期-后期多回顾，理论底层知识，暂时不总结，重点知识，面试考题"><a href="#spring的生命周期-后期多回顾，理论底层知识，暂时不总结，重点知识，面试考题" class="headerlink" title="spring的生命周期(后期多回顾，理论底层知识，暂时不总结，重点知识，面试考题)"></a>spring的生命周期(后期多回顾，理论底层知识，暂时不总结，重点知识，面试考题)</h3><ul><li>spring Bean 的生命周期<ul><li>spring bean的生命周期是从Bean实例话之后，即通过反射创建对象之后，</li><li>到bean成为一个完整对象，最终存储到单例池中，这个过程被称为spring bean 的生命周期，</li><li>spring bean 的生命周期大体分为三种<ul><li>bean的实例化阶段：spring框架会去除beanDefinition中的信息<ul><li>判断当前Bean的范围</li><li>是否是singleton的，</li><li>是否不是延迟加载的，</li><li>是否是FactoryBean等</li><li>最终将一个普通的singleton的bean通过反射进行实例化</li></ul></li><li>bean的初始化阶段：bean拆功能键之后不仅仅是个”半成品“，还需要对bean实例的属性进行填充，<ul><li>执行一些aware接口方法 ，执行Post Processor方法，执行InitializingBean接口初始化方法，</li><li>执行自定义inti方法等，该阶段是spring最具技术含量和复杂度的阶段，app增强功能，</li><li>后面要学习的spring注解功能等、</li><li>spring的面试提，bean的循环引用问题都是在这个阶段体现</li></ul></li><li>Bean的完成阶段：经过初始化阶段，bean成为一个完整的spring bean ，<ul><li>该存储到单例池singletonObject（这是Bean实例的map集合）中去，</li><li>即完成了springBean的整个生命周期</li></ul></li><li><h3 id="spring-xml-方式整合第三方框架"><a href="#spring-xml-方式整合第三方框架" class="headerlink" title="spring xml 方式整合第三方框架"></a>spring xml 方式整合第三方框架</h3></li></ul></li></ul><ul><li>mybatis提供了mybatis-spring.jsr 专门用于两大框架的整合</li><li>spring 整合mybatis的步骤如下：<ul><li>导入mybatis整合spring的相关做白哦</li><li>编写mapper和mapper.xml</li><li>配置sqlSessionFactoryBean 和MapperScannerConfigure</li><li>编写测试代码</li></ul></li></ul><ul><li>spring 整合mybatis原理<ul><li>整合包中提供了一个SqlSessionFactoryBean 和一个扫描Mapper的配置对象（MapperScannerConfigure)</li><li>SqlSessionFactoryBean 一旦被实例化，就开始扫描Mapper 并通过动态代理产生Mapper的实现类，存储到spring容器中，</li><li>相关的有如下四个类<ul><li>SqlSessionFactoryBean：需要进行配置，用于提供SqlSessionFactory</li><li>MapperScannerConfigurer：进行配置，用于烧苗指定mapper包中的mapper接口，并且注册BeanDefinition</li><li>MapperFactoryBean：Mapper的FactoryBean ，获得指定Mapper是条哟个getObject方法。获得实例</li><li>ClassPathMapperScanner：definition.setAutowireMode(2) 修改了自动自如状态，所以<ul><li>MapperFactoryBean中的SqlSessionFactory会自动注入</li></ul></li></ul></li></ul></li><li>使用properties 文件<ul><li>通过spring的context 来进行配置properties 定义<ul><li>需要添加命名空间<ul><li>添加依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">     http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">     http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">     http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">     http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">     http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">     http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li>添加配置文件<ul><li><context:property-placeholder location="classpath:jdbc.properties"/></li></ul></li><li>使用${} 条用context中的值</li></ul></li></ul></li><li>自定义命名空间</li></ul><h3 id="基于注解的spring应用"><a href="#基于注解的spring应用" class="headerlink" title="基于注解的spring应用"></a>基于注解的spring应用</h3><h4 id="Bean基于注解开发"><a href="#Bean基于注解开发" class="headerlink" title="Bean基于注解开发"></a>Bean基于注解开发</h4><ul><li>基本Bean 注解，主要使用注解的方式代替原有的xml<bean> 标签</li><li>使用component 注解代替bean 标签</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>springAOP思想</title>
      <link href="/2024/05/02/springAOP%E6%80%9D%E6%83%B3/"/>
      <url>/2024/05/02/springAOP%E6%80%9D%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="AOP-面向切面"><a href="#AOP-面向切面" class="headerlink" title="AOP 面向切面"></a>AOP 面向切面</h3><ul><li>aop思想的实现方案<ul><li>动态代理技术，在运行期间，对目标对象的方法进行增强</li><li>代理对象同名方法内可用执行原有逻辑的同时嵌入执行其他增强方法</li><li>逻辑或其他对象的方法</li></ul></li></ul><p><img src="img.png" alt="img_2.png"></p><h5 id="AOP-（Aspect-Oriented-Programming-面向切面编程，"><a href="#AOP-（Aspect-Oriented-Programming-面向切面编程，" class="headerlink" title="AOP （Aspect Oriented Programming) 面向切面编程，"></a>AOP （Aspect Oriented Programming) 面向切面编程，</h5><ul><li>该编程是对oop编程的一个提升<ul><li>oop是纵向对一个事务的抽象</li><li>一个对象包括静态的属性信息，包括动态方法信息</li><li>aop是横向的对不同事务的抽象，</li><li>属性与属性，方法与方法，对象与对象可以组成一个切面</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代理目标对象实现接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">said</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">talk</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理的目标对象</span></span><br><span class="line"><span class="meta">@Repository(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">said</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;said user &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">talk</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;talk user&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增强类</span></span><br><span class="line"><span class="meta">@Component(&quot;myAdvice&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeSaidOrTalk</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is said or talk before method improve&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterSaidOrTalk</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is said or talk after method improve&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现代理目标对象的代理类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MockAopBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span>, ApplicationContextAware &#123;</span><br><span class="line">    ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在bean初始化之后</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="comment">// 目标：对UserServiceImpl 的 方法 进行增强</span></span><br><span class="line">        <span class="comment">// 增强的方法为 myAdvice 类 中 的方法</span></span><br><span class="line">        <span class="comment">// 问题：先要进行筛选：service.impl 包下的文件、</span></span><br><span class="line">        <span class="comment">//  如何获取myAdvice：如何从容器中获取myAdvice</span></span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> UserService) &#123;</span><br><span class="line">            <span class="comment">// 使用动态代理方式</span></span><br><span class="line">            <span class="comment">// 返回增强后的 bean对象</span></span><br><span class="line">            <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">                    bean.getClass().getClassLoader(),</span><br><span class="line">                    bean.getClass().getInterfaces(),</span><br><span class="line">                    (proxy, method, args) -&gt; &#123;</span><br><span class="line">                        <span class="comment">// 调用增强方法</span></span><br><span class="line">                        <span class="type">MyAdvice</span> <span class="variable">my</span> <span class="operator">=</span> (MyAdvice) applicationContext.getBean(MyAdvice.class);</span><br><span class="line">                        my.beforeSaidOrTalk();</span><br><span class="line">                        <span class="comment">// 调用目标方法</span></span><br><span class="line">                        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(bean, args);</span><br><span class="line">                        <span class="comment">// 调用增强方法</span></span><br><span class="line">                        my.afterSaidOrTalk();</span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 没有返回原值</span></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="aop中相关概念"><a href="#aop中相关概念" class="headerlink" title="aop中相关概念"></a>aop中相关概念</h4><ul><li>目标对象：target：被增强的方法所在的对象</li><li>代理对象：proxy：对目标对象进行增强后的对象，客户端实现调用的对象</li><li>连接点：JoinPoint：目标对象中可以被增强的方法</li><li>切入点：Pointcut：目标对象实际中实际被增强的方法</li><li>通知：advice：增强部分的代码逻辑</li><li>切面：aspect：增强和切入点的集合</li><li>织入：Weaving：将通知和切入点组合动态组合的过程</li></ul><h3 id="基于xml配置的aop"><a href="#基于xml配置的aop" class="headerlink" title="基于xml配置的aop"></a>基于xml配置的aop</h3><ol><li>xml方式aop快速入门</li><li>xml方式aop配置详解</li><li>xml方式aop原理解析<h4 id="配置问题"><a href="#配置问题" class="headerlink" title="配置问题"></a>配置问题</h4><ul><li>1、哪些包、哪些类、那些方法需要被增强</li><li>2、配置方法要被那些通知所增强，在目标方法执行前还是执行后进行增强</li><li>3、基于些问题，进行xml配置<h4 id="xml方式配置"><a href="#xml方式配置" class="headerlink" title="xml方式配置"></a>xml方式配置</h4><ul><li>1、使用aop相关坐标（判断类是在那个包下）</li><li>2、准备慕白哦类、准备增强类，并配置给Spring管理</li><li>3、配置切入点表达式（哪些方法被增强）</li><li>4、配置织入的方式（切点被那些通知增强，是前置还是后置）<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置目标类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cleamy.service.impl.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置通知类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAdvice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.cleamy.advice.MyAdvice&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- aop 的 配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切点表达式 ， 指定最终被增强的方法,可以配置多个切点表达式  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(void com.cleamy.service.impl.UserServiceImpl.said())&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置织入 ，目的 是要指定 哪些切点要与哪些通知进行结合</span></span><br><span class="line"><span class="comment">            aspect : 切面，ref 指定 通知的bean</span></span><br><span class="line"><span class="comment">            before、after ：指定是 前置方法还是后置方法</span></span><br><span class="line"><span class="comment">            pointcut-ref：表示要织入的切点</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAdvice&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beforeSaidOrTalk&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointCut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="切点表达式配置方式"><a href="#切点表达式配置方式" class="headerlink" title="切点表达式配置方式"></a>切点表达式配置方式</h5><ul><li>pointcut-ref : 引用外部切点表达式</li><li>pointcut：直接在些切点表达式</li></ul></li></ul></li><li>切点表达式配置语法<ul><li>切点表达式配置要对哪些连接点（哪些类的哪些方法）进行通知的增强</li><li>execution([访问修改符] 返回值类型 全限定名.方法名(参数))<ul><li>权限修饰符可以省略不写</li><li>返回值类型、某一级包名、类名、方法名 可以使用*表示任意</li><li>包名与类名之间使用单点.表示该包下的类，使用双点.. 表示该包下的子包下的类</li><li>参数列表可以使用两个点..表示任意参数<h5 id="aspectJ-的通知-由以下五种类型"><a href="#aspectJ-的通知-由以下五种类型" class="headerlink" title="aspectJ 的通知 由以下五种类型"></a>aspectJ 的通知 由以下五种类型</h5></li></ul></li><li>前置通知：<aop:before>：目标方法执行前</li><li>后置通知：<aop:after-returning>：目标方法执行之后执行，目标方法异常时不执行</li><li>环绕通知：<aop:around>：目标方法执行前后执行，且目标方法异常时，不执行</li><li>异常通知：<aop:after-throwing>：目标方法抛出异常时执行</li><li>最终通知：<aop:after>：不管目标方法是否异常都会执行<ul><li>通知方法被调用时，spring可以为其传递一些必要的参数</li><li>joinPoint：连接点对象，任何通知都可以使用，可以获取当前目标对象、目标方法</li><li>ProceedingJointPoint：joinPoint子类对象，主要是在环绕通知中执行proceed(), 进而执行目标方法</li><li>Throwable：异常对象，使用在异常通知中，需要在(配置文件中支出异常对象名称)<ul><li>&lt;aop:after-throwing method = “通知方法名称” point-ref=”目标方法” throwing=”参数名称“/&gt;<ul><li>joinPoint对象<ul><li>public void 通知类名称（JointPoint joinPoint）{</li><li>// 获取目标方法的参数</li><li>System.out.println(joinPoint.getArgs())</li><li>// 获取目标对象</li><li>System.out.println(joinPoint.getTarget())</li><li>// 获取精确的切点表达式</li><li>System.out.println(joinPoint.getStaticPart())<h5 id="xml-aop配置-两种语法格式"><a href="#xml-aop配置-两种语法格式" class="headerlink" title="xml aop配置 两种语法格式"></a>xml aop配置 两种语法格式</h5></li></ul></li></ul></li></ul></li><li>使用<abvisor> 配置切脉你</li><li>使用<aspect>配置切面<ul><li>spring 定义了一个advice接口，实现了该接口的类都可以作为通知类出现</li><li>public interface Advice{} </li><li>advisor 是实现 advice 接口类 来确定通知类型：针对类型单一，切面单一</li><li>aspect 是通过xml 来配置通知类型</li></ul></li></ul></li><li>xml aop 原理 解析</li><li>aop 底层原理实现的两种方式</li></ul></li><li>基于注解aop基本使用</li><li></li><li></li><li><h3 id="配置aop，其实配置aop主要就是配置通知类中哪个方法（通知类型）对应的切点表达式是什么"><a href="#配置aop，其实配置aop主要就是配置通知类中哪个方法（通知类型）对应的切点表达式是什么" class="headerlink" title="配置aop，其实配置aop主要就是配置通知类中哪个方法（通知类型）对应的切点表达式是什么"></a>配置aop，其实配置aop主要就是配置通知类中哪个方法（通知类型）对应的切点表达式是什么</h3><ul><li>使用注解@Aspect 、@Around、需要被spring解析，</li><li>所以spring核心，配置文件aspectj的自动代理</li><li>@Around(“execution(ProceedingJointPoint joinPoint)</li><li><aop:aspectj-autoproxy/><ul><li>前置通知</li><li>@Before(“切点表达式”)</li><li>后置通知</li><li>@AfterReturning(“切点表达式”)</li><li>环绕通知</li><li>@Around(“切点表达式”)</li><li>异常通知</li><li>@AfterThrowing(pointcut=”切点表达式”,throwing=”异常形参名称”)</li><li>最终通知</li><li>@After(“切点表达式”)</li></ul></li></ul></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;myAdvice1&quot;)</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 定义该类为切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice3</span> <span class="keyword">implements</span> <span class="title class_">Advice</span> &#123;</span><br><span class="line">    <span class="comment">// 切点表达式 的 抽取</span></span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(* com.cleamy.service.impl.UserServiceImpl.said(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myPointcut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 代替&lt;aop:before &gt; 标签</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.cleamy.service.impl.UserServiceImpl.said(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeSaidOrTalk</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is said or talk anno before method improve&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代替&lt;aop:afterReturning&gt; 标签</span></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;execution(* com.cleamy.service.impl.UserServiceImpl.said(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterSaidOrTalk</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is said or talk anno after method improve&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代替&lt;aop:afterThrowing&gt; 标签</span></span><br><span class="line">    <span class="meta">@AfterThrowing(pointcut = &quot;execution(* com.cleamy.service.impl.UserServiceImpl.said(..))&quot;, throwing = &quot;e&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterSaidOrTalk</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is said or talk anno after method improve&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代替&lt;aop:around&gt; 标签</span></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.cleamy.service.impl.UserServiceImpl.said(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterSaidOrTalk</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is said or talk anno after method improve&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 引用外部的 切点表达式</span></span><br><span class="line">    <span class="meta">@Around(&quot;MyAdvice3.myPointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">aroundSaidOrTalk</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;around before&quot;</span>);</span><br><span class="line">        <span class="type">Object</span>  <span class="variable">res</span> <span class="operator">=</span> proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;around after&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解析aop-xml-和注解-aspectJ-autoProxy-的底层原理"><a href="#解析aop-xml-和注解-aspectJ-autoProxy-的底层原理" class="headerlink" title="解析aop xml 和注解 aspectJ-autoProxy 的底层原理"></a>解析aop xml 和注解 aspectJ-autoProxy 的底层原理</h3><h4 id="aop-的-声明式事务控制"><a href="#aop-的-声明式事务控制" class="headerlink" title="aop 的 声明式事务控制"></a>aop 的 声明式事务控制</h4><pre><code>+ spring 事务编程的概述+ 搭建测试环境+ 基于xml声明式事务控制+ 基于注解声明式事务控制+    spring事务分为：编成式事务控制 和 声明式事务控制    +    编程式事务控制：spring提供了事务控制的类和方法，        +    使用编码的方式对业务代码进行事务控制，事务控制代码和业务操作代码耦合到一起，开发中不使用    +    声明式事务控制：spring1将事务控制代码封装，对外提供了xml和注解配置方式            +    通过配置的方式完成事务的控制            +    可以达到事务控制与业务代码解耦合，推荐使用        +    spring 事务编程相关的类主要由如下三个        +    平台事务管理器（PlatformTransactionManager）：这是一个接口标准、规范，内部提供了要\&lt;/br&gt;实现的事务提交、回滚和获得事务对象的能力、作用于持久层框架        +    事务定义（TransactionDefinition）：封装事务的隔离级别、传播行为、过期时间等属性信息        +    事务状态（transactionStatus）：存储当前事务的状态信息，如果事务是否提交，是否回滚，是否由回滚点等    + isolation    </code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> AOP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springAOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2024/05/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2024/05/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<!-- ---title: 文章标题date: 创建日期updated: 更新日期cover: 文章封面description: 文章描述swiper_index: 1 #置顶轮播图顺序，非负整数，数字越大越靠前--- --><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="时间复杂度、空间复杂度"><a href="#时间复杂度、空间复杂度" class="headerlink" title="时间复杂度、空间复杂度"></a>时间复杂度、空间复杂度</h2><p>算法时间复杂度以算法中基本操作重复执行的次数（简称 频度）作为算法的时间度量，只需要打字计算出相应的数量级即可</p><p>如：</p><p>O(1) &lt; O(log2 (n)) &lt; O(n) &lt; O(nlog2 (n)) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt;O(n^n)</p><p>大o表达式 T(n) = O(表达式)     n —&gt; 表示问题规模</p><ol><li>加法规则：多项相加，保留最高阶项，并将系数化为1<ol><li>T(n) = n^3+n^2    +nlog2(n) + n log2(n) = n^3</li></ol></li><li>乘法规则：多项相乘都保留，并将系数化为1<ol><li>T(n)=n*n^2 = n^3  </li><li>T(n) = 2n^3*3n^4 = n^7</li></ol></li><li>加法乘法混合规则：小括号再乘法规则而，最后加法规则<ol><li>T(n)=n^2*n^3+n^3 = n^5 + n^3 = n^5</li><li>T(n)=(2n+3)<em>(2n^4+4) = 2(n)\</em>2(n^4)=n^5</li></ol></li></ol><p><img src="D:\My file\每日学习记录\pythonMD\i时间复杂度.png" alt=""></p><ol><li><p>T(n) = o(1)</p></li><li><p>1 2 4 8 16 32….n</p><p>​    2^x = n    </p><p>​        x = log2(n) —-&gt; T(n) =o( log2(n))</p></li><li><p>T(n)= 1+1+n+1+n+n = O(n)</p></li><li><p>T(n)=o(n)*o(log2(n)) = o(nlog2(n))</p></li><li><p>T(n)=o(n)*o(n)=o(n^2)</p></li><li><p>T(n)=o(n)*o(n)*o(n)=o(n^3)</p></li></ol><p>空间复杂度 o(1) , o(n), o(n^2)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//,,,,</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= n) &#123;</span><br><span class="line">    i ++ ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 空间 复杂度 与 内存空间有关 </span></span><br><span class="line"><span class="comment">// ↑ 空间复杂度为 o(1) 与 n 的 增加 不会改变 内存的 占用</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> [][] x = new <span class="type">int</span>[n][n];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++ )&#123;</span><br><span class="line">        x[i][j] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里的 空间 复杂度为 o(n*n)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>渐进符号</p><p>渐进上界</p><p>渐进下界</p><p>渐进紧致界</p><p>递归时间复杂度  空间复杂度</p><p>递归的时间复杂度 = 递归的次数*每次递归的时间复杂度     </p><p>递归的空间复杂度 = 递归的次数*每次递归的空间复杂度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n * f(n<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 递归的时间度 = 递归的次数*每次递归的时间复杂度 </span></span><br><span class="line"><span class="comment">// T(n) = n * O(1) = o(n)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f(<span class="type">int</span> n) &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= n) &#123;</span><br><span class="line">        <span class="comment">// 时间复杂度会变化</span></span><br><span class="line">        <span class="comment">// n , n = n-1 , n = n -2</span></span><br><span class="line">        <span class="comment">// a1+an/2 == (n + 1)n/2 = n^2/2 + 1/2 = n^2</span></span><br><span class="line">        <span class="comment">// T(n) = n^2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n * f(n<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 递归的时间度 = 递归的次数*每次递归的时间复杂度 </span></span><br><span class="line"><span class="comment">// 递归的时间复杂度会改变</span></span><br><span class="line"><span class="comment">// T(n) = O(n^2)*O(n) = O(n^3)</span></span><br></pre></td></tr></table></figure><p>主方法：求解递归式的快速方法</p><p>T(n) = aT(n/b) + f(n),a&gt;=1 b&gt;1 f(n) 是渐进的正函数</p><ol><li>诺有常数 e &gt; 0 由 f(n) = O(n^logb(a-e)) 则 T(n)  = Q(n^logb(a))<ol><li>T(n) = 9T(n/3) + n<ol><li>a = 9, b= 3 f(n) = n ,logb(a) = 2 ,f(n)  = O(n^logb(a-e)) 其中 e = 1，则T(n) = Q(n^logb(a) = Q(n^2))</li></ol></li></ol></li><li>若f(n) = Q(n^logb(a)<em>((lg^k)n)) 则 T(n) = Q(n^logb(a)\</em>lgb(a))<ol><li>T(n) = T(2n/3)+1<ol><li>a=1 , b = 3/2 f(n) = 1, logb(a) = 0 ,f(n ) =Q(n^logb(a)(lg^k)n),其中 k  =0 则 T(n) = Q(nn^logb(a(lg^(k+1))n=Q(lgn)</li></ol></li></ol></li></ol><h2 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h2><p>​        线性结构是一种基本的数据结构，主要用于对客观时间中具有单一前驱和后继的数据关系，进行描述、线性结构的特点是数据元素之间呈现一种线性关系，级元素之间一个接一个排列</p><h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><p>​    线性表是一种最常用的线性结构，常用于顺序存储和链式存储，主要的基本操作是插入、删除和查找</p><ol><li><p>线性表的定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1、一个线性并表示m(N&gt;=0)个元素的有限序列，通常表示为（a1,a2,a3,a4)</span><br><span class="line">非空线性表的特点</span><br><span class="line">1、存在唯一的一个一个称作“第一个”的元素</span><br><span class="line">2、存在唯一的一个称作“最后一个”的元素</span><br><span class="line">3、除第一i给元素外，序列中的每一个元素都有一个直接前驱</span><br><span class="line">4、除最后一个元素之外，序列中的每一个元素都一个直接后驱</span><br></pre></td></tr></table></figure></li><li><p>线性表的存储结构</p><ol><li>顺序存储<ol><li>插入元素的需要移动元素的期望值 为 E = n/2</li><li>删除元素的需要移动给元素的期望值 为 E = n-1/2</li></ol></li></ol></li></ol><p>​        插入：时间复杂度 最好o(1) 最坏o(n) 平均o(n)</p><p>​        删除：时间复杂度 最好o(1) 最坏o(n) 平均o(n)</p><p>​        查找：时间复杂度 最好o(1) 最坏o(1)  平均o(1)</p><h4 id="线性表-1"><a href="#线性表-1" class="headerlink" title="线性表"></a>线性表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">：<span class="comment">// 代码方式 java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeQuenceList</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">// 容量</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> [] a;</span><br><span class="line">    <span class="type">int</span> n; <span class="comment">// 表长</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        a = <span class="keyword">new</span> <span class="title class_">init</span>[N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N / <span class="number">2</span>; i ++ )</span><br><span class="line">            System.out.print([i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> &#123;</span><br><span class="line">        <span class="type">SequenceList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SequenceList</span>();</span><br><span class="line">        list.init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是否为 合法 下不表</span></span><br><span class="line">       <span class="keyword">if</span> (k &lt; <span class="number">1</span> || k &gt; n + <span class="number">1</span>) <span class="keyword">return</span> </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n; ; i--) &#123;</span><br><span class="line">            a[i] =  a[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        a[k - <span class="number">1</span>] = x;</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> （ k &lt; <span class="number">1</span>|| k &gt; n) <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k; i &lt; n; i++) &#123;</span><br><span class="line">            a[i-<span class="number">1</span>] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getElement</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; <span class="number">1</span> || k &gt; n) reutrn -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> a[k-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><pre><code> 2. 链式存储(头节点和不带头节点)      1. 概念 通过指针进行连接起来的节点，来存储数据元素，基本的节点：数据域+指针域      2. 链表(无表头)插入的时间复杂度：最好o(1) 最坏 o(n) 平均o(n)      3. 链表(有表头)插入的时间复杂度：最好o(1) 最坏 o(n) 平均o(n)      4. 链表(无表头)删除的时间复杂度：最好o(1) 最坏o(n) 平均o(n)</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    Node next;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span> <span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data=data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不带头节点的 初始化方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkList</span>&#123;</span><br><span class="line">    Node list;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">initList</span><span class="params">()</span> &#123;</span><br><span class="line">        list = <span class="literal">null</span>;</span><br><span class="line">        list.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历链表</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printList</span><span class="params">(Node list)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">iter</span> <span class="operator">=</span> list;</span><br><span class="line">        <span class="keyword">while</span>(iter!=<span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.print(iter.data + <span class="string">&quot; - &quot;</span>);</span><br><span class="line">            iter = iter.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 插入</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> k,Node list,<span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; <span class="number">1</span> || k &gt; length + <span class="number">1</span> ) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">new_node</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(data);  </span><br><span class="line">      <span class="keyword">if</span> (k &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> list;</span><br><span class="line">        <span class="keyword">if</span> ( k == <span class="number">1</span>) &#123;</span><br><span class="line">            new_node.next = p.next;</span><br><span class="line">            p.next = new_node;</span><br><span class="line">            <span class="keyword">return</span> True;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  无头指针 [1,2,4,5,6,7]</span></span><br><span class="line">        <span class="comment">// 0 1 2 3 4 5 </span></span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        new_node.next = p.next;</span><br><span class="line">        p.next = new_node;</span><br><span class="line">        length ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Node list, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k&gt;length||k&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (k==<span class="number">1</span>) &#123;</span><br><span class="line">            list=list.next;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> list;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; k - <span class="number">1</span>)&#123; </span><br><span class="line">        i++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        length --;</span><br><span class="line">        reutnr <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查找</span></span><br><span class="line">    Node <span class="title function_">getElement</span><span class="params">(<span class="type">int</span> k,list)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k&gt;length||k&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> list</span><br><span class="line">        <span class="title function_">whil</span><span class="params">(i &lt; k)</span> &#123;</span><br><span class="line">            i ++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带头节点的 单链表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeadLinkLists</span>()&#123;</span><br><span class="line">    Node list;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">initList</span><span class="params">()</span> &#123;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        list.next = head;</span><br><span class="line">        list.data = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">// 遍历链表</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printList</span><span class="params">(Node list)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">iter</span> <span class="operator">=</span> list.next;</span><br><span class="line">        <span class="keyword">while</span>(iter!=<span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.print(iter.data + <span class="string">&quot; - &quot;</span>);</span><br><span class="line">            iter = iter.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 插入</span></span><br><span class="line">    Boolean <span class="title function_">insert</span> <span class="params">(Node list,<span class="type">int</span> k, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="comment">// 要插入的 数据</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">new_node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        new_node.data = data;</span><br><span class="line">        new_node.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 获取 头节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> list;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//  头节点 [1,2,3,5,6] --&gt; 5 个元素  </span></span><br><span class="line">        <span class="comment">//    0 1 2 3 4   </span></span><br><span class="line">        <span class="keyword">if</span> (k &gt; list.data + <span class="number">2</span> || k &lt; <span class="number">1</span>) <span class="keyword">return</span> False;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">null</span>) <span class="keyword">return</span> False;</span><br><span class="line">        <span class="keyword">while</span> (p == <span class="literal">null</span> || i &gt;= k) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( i == K-<span class="number">1</span> )&#123;</span><br><span class="line">            new_node.next = p.next;</span><br><span class="line">            p.next = new_node;</span><br><span class="line">                p.data ++;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(None list,<span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k&gt;list.data || k&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span>  <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> list;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; k-<span class="number">1</span> &amp;&amp; p != <span class="literal">null</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">s</span> <span class="operator">=</span> p.next ;</span><br><span class="line">        p.next = s.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询</span></span><br><span class="line">    Node <span class="title function_">getElement</span><span class="params">(<span class="type">int</span> k,Node list)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k&gt;list.data||k&lt;=<span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 有头[1,23,4,5]</span></span><br><span class="line">        <span class="comment">//    0 1 2 3</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; k) &#123;</span><br><span class="line">            i ++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">include &lt;stdio.h&gt;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">/*  单链表插入和删除  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定义头节点 */</span></span><br><span class="line">Node* <span class="title function_">initList</span><span class="params">()</span> &#123;</span><br><span class="line">    Node* <span class="built_in">list</span> = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="built_in">list</span>-&gt;data = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">list</span>-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  头插法 添加数据 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">headInsert</span><span class="params">(Node* <span class="built_in">list</span>, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    Node* node = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    node-&gt;next = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">    <span class="built_in">list</span>-&gt;next = node;</span><br><span class="line">    <span class="built_in">list</span>-&gt;data++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 尾插法 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">tailInsert</span><span class="params">(Node* <span class="built_in">list</span>, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="comment">// 保存 头结点</span></span><br><span class="line">    Node* head = <span class="built_in">list</span>;</span><br><span class="line">    Node* node = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 将链表遍历到 最后一个 结点</span></span><br><span class="line">    <span class="built_in">list</span> = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">list</span>-&gt;next)&#123;</span><br><span class="line">        <span class="built_in">list</span> = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将链表最后一个结点的next 添加为 node</span></span><br><span class="line">    <span class="built_in">list</span>-&gt;next = node;</span><br><span class="line">    head-&gt;data++;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*  删除元素 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">delete</span><span class="params">(Node* <span class="built_in">list</span>, <span class="type">int</span> data )</span> &#123;</span><br><span class="line">    <span class="comment">// 前结点</span></span><br><span class="line">    Node* pre = <span class="built_in">list</span>;</span><br><span class="line">    <span class="comment">// 当前结点</span></span><br><span class="line">    Node* current = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (current!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current-&gt;data == data) &#123;</span><br><span class="line">            pre-&gt;next = current-&gt;next;</span><br><span class="line">            <span class="comment">// 释放控件 </span></span><br><span class="line">            <span class="built_in">free</span>(current);</span><br><span class="line">            <span class="built_in">list</span>-&gt;data--;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 指针下移</span></span><br><span class="line">            pre = current;</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  打印链表 */</span></span><br><span class="line"><span class="type">void</span>  <span class="title function_">printList</span><span class="params">(Node* <span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">list</span> = <span class="built_in">list</span>-&gt;next; </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">list</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">list</span>-&gt;data);</span><br><span class="line">        <span class="built_in">list</span> = <span class="built_in">list</span>-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Node* <span class="built_in">list</span> = initList();</span><br><span class="line">    headInsert(<span class="built_in">list</span>,<span class="number">1</span>);</span><br><span class="line">    headInsert(<span class="built_in">list</span>,<span class="number">2</span>);</span><br><span class="line">    headInsert(<span class="built_in">list</span>,<span class="number">3</span>);</span><br><span class="line">    tailInsert(<span class="built_in">list</span>, <span class="number">1</span>);</span><br><span class="line">    tailInsert(<span class="built_in">list</span>, <span class="number">2</span>);</span><br><span class="line">    tailInsert(<span class="built_in">list</span>, <span class="number">3</span>);</span><br><span class="line">    printList(<span class="built_in">list</span>);</span><br><span class="line">    delete(<span class="built_in">list</span>, <span class="number">1</span>);</span><br><span class="line">    delete(<span class="built_in">list</span>, <span class="number">2</span>);</span><br><span class="line">    printList(<span class="built_in">list</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">list</span>-&gt;data);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="循环单链表"><a href="#循环单链表" class="headerlink" title="循环单链表"></a>循环单链表</h4><p>链表的最后一个元素的next 指向 头节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 带头节点的 单链表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeadLinkLists</span>()&#123;</span><br><span class="line">    Node list;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">initList</span><span class="params">()</span> &#123;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        list.next = head;</span><br><span class="line">        list.data = <span class="number">0</span>;</span><br><span class="line">        head.next = list;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">// 遍历链表</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printList</span><span class="params">(Node list)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">iter</span> <span class="operator">=</span> list.next;</span><br><span class="line">        <span class="keyword">while</span>(iter!=list) &#123;</span><br><span class="line">            System.out.print(iter.data + <span class="string">&quot; - &quot;</span>);</span><br><span class="line">            iter = iter.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 插入</span></span><br><span class="line">    Boolean <span class="title function_">insert</span> <span class="params">(Node list,<span class="type">int</span> k, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="comment">// 要插入的 数据</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">new_node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        new_node.data = data;</span><br><span class="line">        <span class="comment">// 获取 头节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> list;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//  头节点 [1,2,3,5,6] --&gt; 5 个元素  </span></span><br><span class="line">        <span class="comment">//    0 1 2 3 4   </span></span><br><span class="line">        <span class="keyword">if</span> (k &gt; list.data + <span class="number">2</span> || k &lt; <span class="number">1</span>) <span class="keyword">return</span> False;</span><br><span class="line">        <span class="keyword">while</span> ( i &gt;= k) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( i == K-<span class="number">1</span> )&#123;</span><br><span class="line">            new_node.next = p.next;</span><br><span class="line">            p.next = new_node;</span><br><span class="line">                p.data ++;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(None list,<span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k&gt;list.data || k&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span>  <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> list;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; k-<span class="number">1</span> &amp;&amp; p != <span class="literal">null</span>) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">s</span> <span class="operator">=</span> p.next ;</span><br><span class="line">        p.next = s.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查询</span></span><br><span class="line">    Node <span class="title function_">getElement</span><span class="params">(<span class="type">int</span> k,Node list)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k&gt;list.data||k&lt;=<span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 有头[1,23,4,5]</span></span><br><span class="line">        <span class="comment">//    0 1 2 3</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; k) &#123;</span><br><span class="line">            i ++;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h4><p>双链表是存在一个指向前节点pre 和 下节点next</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FALSE 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span> <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pre</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化双向链表</span></span><br><span class="line">Node* <span class="title function_">initialList</span><span class="params">()</span> &#123;</span><br><span class="line">    Node* L = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    L-&gt;data = <span class="number">0</span>;</span><br><span class="line">    L-&gt;pre = <span class="literal">NULL</span>;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头插法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">headInsert</span><span class="params">(Node* L, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    Node* node = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    Node* head = L;</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;data == <span class="number">0</span>)&#123;</span><br><span class="line">        node-&gt;next = L-&gt;next;</span><br><span class="line">        node-&gt;pre = L;</span><br><span class="line">        L-&gt;next = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 链表为空</span></span><br><span class="line">        node-&gt;pre = L;</span><br><span class="line">        node-&gt;next = L-&gt;next;</span><br><span class="line">        node-&gt;next-&gt;pre = node;</span><br><span class="line">        L-&gt;next = node;</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;data++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 尾插法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">tailInsert</span><span class="params">(Node* L, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    Node* head = L;</span><br><span class="line">    Node* node =  (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(head-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    node-&gt;pre = head;</span><br><span class="line">    node-&gt;next = head-&gt;next;</span><br><span class="line">    head-&gt;next = node;    </span><br><span class="line">    L-&gt;data++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除操作</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">delete</span><span class="params">(Node* L, <span class="type">int</span> data)</span>&#123;</span><br><span class="line">    Node* head = L;</span><br><span class="line">    Node* current = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(current)&#123;</span><br><span class="line">        <span class="comment">// 判断当前的值 是否 要查找的值</span></span><br><span class="line">        <span class="keyword">if</span>(current-&gt;data == data)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,data);</span><br><span class="line">            <span class="comment">// 前一个结点 指向 后一个结点</span></span><br><span class="line">            current-&gt;pre-&gt;next = current-&gt;next;</span><br><span class="line">            <span class="comment">// 后一个结点  指向 前一个结点</span></span><br><span class="line">            current-&gt;next-&gt;pre = current-&gt;pre;</span><br><span class="line">            <span class="built_in">free</span>(current);</span><br><span class="line">            <span class="keyword">return</span> TRUE;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printLinkList</span><span class="params">(Node*L)</span> &#123;</span><br><span class="line">    Node* node = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(node!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; -&gt;&quot;</span>,node-&gt;data);</span><br><span class="line">        node = node-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* code */</span></span><br><span class="line">    Node* L = initialList();</span><br><span class="line">    headInsert(L,<span class="number">1</span>);</span><br><span class="line">    headInsert(L,<span class="number">2</span>);</span><br><span class="line">    headInsert(L,<span class="number">3</span>);</span><br><span class="line">    tailInsert(L,<span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 3 2 1 3</span></span><br><span class="line">    <span class="comment">// 3 2 3</span></span><br><span class="line">    delete(L,<span class="number">2</span>);</span><br><span class="line">    printLinkList(L);</span><br><span class="line">    tailInsert(L,<span class="number">4</span>);</span><br><span class="line">    tailInsert(L,<span class="number">5</span>);</span><br><span class="line">    printLinkList(L);</span><br><span class="line">    delete(L, <span class="number">3</span>);</span><br><span class="line">    <span class="type">int</span> a = delete(L, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a);</span><br><span class="line">    printLinkList(L);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;next&quot;</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="循环双链表"><a href="#循环双链表" class="headerlink" title="循环双链表"></a>循环双链表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 双循环结构</span></span><br><span class="line"><span class="comment">// 定义双链表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">pre</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化链表</span></span><br><span class="line">Node* <span class="title function_">initialLink</span><span class="params">()</span>&#123;</span><br><span class="line">    Node* L = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    L-&gt;data = <span class="number">0</span>;</span><br><span class="line">    L-&gt;next = L;</span><br><span class="line">    L-&gt;pre = L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头插法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">headInsert</span><span class="params">(Node* L, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    Node* node = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    node-&gt;data=data;</span><br><span class="line">    <span class="keyword">if</span>(data == <span class="number">0</span>)&#123;</span><br><span class="line">        node-&gt;next=L;</span><br><span class="line">        node-&gt;pre=L;</span><br><span class="line">        L-&gt;next=node;</span><br><span class="line">        L-&gt;pre=node;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        node-&gt;next = L-&gt;next;</span><br><span class="line">        node-&gt;pre = L;</span><br><span class="line">        L-&gt;next-&gt;pre = node;</span><br><span class="line">        L-&gt;next = node;</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;data++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printLinkList</span><span class="params">(Node* L)</span>&#123;</span><br><span class="line">    Node* head =L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(head != L)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>,head-&gt;data);</span><br><span class="line">        head=head-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">tailInsert</span><span class="params">(Node* L,<span class="type">int</span> data)</span>&#123;</span><br><span class="line">    Node* node = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    Node* n = L-&gt;next;</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    <span class="keyword">while</span>(n-&gt;next!=L)&#123;</span><br><span class="line">        n=n-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;next = L;</span><br><span class="line">    node-&gt;pre = n;</span><br><span class="line">    n-&gt;next = node;</span><br><span class="line">    L-&gt;pre = node;</span><br><span class="line">    L-&gt;data++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 删除操作</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">delete</span><span class="params">(Node* L, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    Node* node = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(node != L)&#123;</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;data == data)&#123;</span><br><span class="line">            node-&gt;pre-&gt;next = node-&gt;next;</span><br><span class="line">            node-&gt;next-&gt;pre = node-&gt;pre;</span><br><span class="line">            <span class="built_in">free</span>(node);</span><br><span class="line">            L-&gt;data--;</span><br><span class="line">            <span class="keyword">return</span> TRUE;</span><br><span class="line">        &#125;</span><br><span class="line">        node = node-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    Node* L=initialLink();</span><br><span class="line">    headInsert(L, <span class="number">1</span>);</span><br><span class="line">    headInsert(L, <span class="number">2</span>);</span><br><span class="line">    headInsert(L, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;next\n&quot;</span>);</span><br><span class="line">    tailInsert(L, <span class="number">3</span>);</span><br><span class="line">    tailInsert(L, <span class="number">2</span>);</span><br><span class="line">    tailInsert(L, <span class="number">1</span>);</span><br><span class="line">    printLinkList(L);</span><br><span class="line">    delete(L,<span class="number">1</span>);</span><br><span class="line">    delete(L,<span class="number">3</span>);</span><br><span class="line">    printLinkList(L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>栈的定义：栈式只能通过访问它的一端来实现数据存储和检索的一种线性表数据结构。栈的修改是按照先进后出，先进后出(Last In First Out, LIFO)线性表，</p><p>插入和删除的一端称为栈顶，另一端称为栈底，不含元素的栈称为空栈</p><p>栈的基本运算（可以使用递归）</p><ul><li>初始化栈 initStack(s) 创建以空栈</li><li>判栈空 isEmpty(S) 单栈S 为 空 是 返回 真，则 返回假</li><li>入栈 push(s)：将元素x加入栈顶，并更新栈顶指针</li><li>出栈pop：将栈顶元素从栈中删除，并更新栈顶指针，若需要得到栈顶元素的值，可见pop定为一个返回栈顶元素的函数</li><li>读栈顶元素top（s）：返回栈顶元素的值，但是不修改栈顶指针</li></ul><h4 id="栈的顺序存储"><a href="#栈的顺序存储" class="headerlink" title="栈的顺序存储"></a>栈的顺序存储</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">initStack</span>&#123;</span><br><span class="line">    <span class="type">final</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">5</span></span><br><span class="line">    <span class="type">int</span> [] a = <span class="keyword">new</span> <span class="title class_">int</span>[max];</span><br><span class="line">    <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Stack s)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.top==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">push</span><span class="params">(Stack s,<span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.top&gt;=s.max) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        s.a[top] = c;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">pop</span><span class="params">(Stack s)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty(s)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        System.out.print(<span class="string">&quot;pop &quot;</span>+s.a[top]);</span><br><span class="line">        s.a[top-<span class="number">1</span>] = <span class="literal">null</span>;</span><br><span class="line">        top --;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">Top</span><span class="params">(Stack s )</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty(s)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        System.out.print(<span class="string">&quot;top&quot;</span>+ s.a[top-<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> a.[top-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="栈的链式存储"><a href="#栈的链式存储" class="headerlink" title="栈的链式存储"></a>栈的链式存储</h4><p>用链表作为存储结构，由栈中元素的插入和删除仅在栈顶一端进行，因此不必设置头指针，头指针就是栈顶指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">/* 栈的实现 —————— 先进后出 */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化栈 */</span></span><br><span class="line">Node* <span class="title function_">initStack</span><span class="params">()</span> &#123;</span><br><span class="line">    Node* S = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    S-&gt;data = <span class="number">0</span>;</span><br><span class="line">    S-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈 是否为空</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isEmpty</span><span class="params">(Node* S)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;data == <span class="number">0</span>|| S-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取栈顶元素</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getTop</span><span class="params">(Node* S)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty(S))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> S-&gt;next-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 出栈</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pop</span><span class="params">(Node* S)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty(S))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        Node* node = S-&gt;next;</span><br><span class="line">        <span class="type">int</span> data = node-&gt;data;</span><br><span class="line">        S-&gt;next = node-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(node);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如栈</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(Node* S, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    Node* node = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    node-&gt;data=data;</span><br><span class="line">    node-&gt;next=S-&gt;next;</span><br><span class="line">    S-&gt;next = node;</span><br><span class="line">    S-&gt;data++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printStack</span><span class="params">(Node* S)</span> &#123;</span><br><span class="line">    Node* node = S-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(node) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>, node-&gt;data);</span><br><span class="line">        node = node-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    Node* S = initStack();</span><br><span class="line">    push(S,<span class="number">1</span>);</span><br><span class="line">    push(S,<span class="number">2</span>);</span><br><span class="line">    push(S,<span class="number">3</span>);</span><br><span class="line">    printStack(S);</span><br><span class="line">    <span class="type">int</span> i = pop(S);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;current elem=%d\n&quot;</span>,i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>队列是先进先出线性报表，它只允许在表的一端插入元素，而在表的另一端删除元素，在队列中，插入元素的一端称为队尾(rear)、允许删除元素的一端称为对头(Front)</p><h4 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">    <span class="type">int</span>[] q = <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> front,rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestQueue</span> &#123;</span><br><span class="line">    </span><br><span class="line">    Queue <span class="title function_">initQueue</span><span class="params">(Queue q)</span> &#123;</span><br><span class="line">        q.q= <span class="keyword">new</span> <span class="title class_">int</span> [q.N];</span><br><span class="line">        front = reer = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Queue q)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (q.front == <span class="number">0</span> &amp;&amp; q.rear == <span class="number">0</span>) <span class="keyword">return</span> True;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">enQueue</span><span class="params">(Queue q, ini data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (q.rear &gt;= q.N) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        q.data[q.rear] = data;</span><br><span class="line">        q.rear ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">popQueue</span><span class="params">(Queue q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (q.front &gt;= q.N|| isEmpty(q))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        q.front ++ ;</span><br><span class="line">        <span class="keyword">return</span> True;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    data <span class="title function_">getQueueTop</span><span class="params">(Queue q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty(q)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> q.data[q.front-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循环队列顺序存储"><a href="#循环队列顺序存储" class="headerlink" title="循环队列顺序存储"></a>循环队列顺序存储</h4><p>循环队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">    <span class="type">int</span>[] q = <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> front,rear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestQueue</span> &#123;</span><br><span class="line">    </span><br><span class="line">    Queue <span class="title function_">initQueue</span><span class="params">(Queue q)</span> &#123;</span><br><span class="line">        q.q= <span class="keyword">new</span> <span class="title class_">int</span> [q.N];</span><br><span class="line">        front = reer = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Queue q)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((q.front == <span class="number">0</span> &amp;&amp; q.rear == <span class="number">0</span>)|| q.front==q.rear) <span class="keyword">return</span> True;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">enQueue</span><span class="params">(Queue q, ini data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (q.rear+<span class="number">1</span> == q.front) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        q.data[q.rear] = data;</span><br><span class="line">        q.rear = (q.rear+<span class="number">1</span>)%q.N;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">popQueue</span><span class="params">(Queue q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (|| isEmpty(q))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        q.front=(q.front+<span class="number">1</span>)%q.N;</span><br><span class="line">        <span class="keyword">return</span> True;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    data <span class="title function_">getQueueTop</span><span class="params">(Queue q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty(q)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> q.data[q.front-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="队列的链式存储"><a href="#队列的链式存储" class="headerlink" title="队列的链式存储"></a>队列的链式存储</h4><p>存在头节点（head) 和 尾节点（rear）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line">Node* <span class="title function_">initQueue</span><span class="params">()</span> &#123;</span><br><span class="line">    Node* Q = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    Q-&gt;data = <span class="number">0</span>;</span><br><span class="line">    Q-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> Q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 入队</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">enQueue</span><span class="params">(Node* Q,<span class="type">int</span> data)</span> &#123;</span><br><span class="line">    Node* q = Q;</span><br><span class="line">    Node* node = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i &lt; Q-&gt;data; i++)&#123;</span><br><span class="line">        q = q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;next = q-&gt;next;</span><br><span class="line">    q-&gt;next = node;</span><br><span class="line">    Q-&gt;data++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isEmpty</span><span class="params">(Node* Q)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(Q-&gt;data == <span class="number">0</span>|| Q-&gt;next == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 出队操作</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deQueue</span><span class="params">(Node* Q)</span> &#123;</span><br><span class="line">    <span class="comment">// 判断队列是否为空</span></span><br><span class="line">    <span class="keyword">if</span>(isEmpty(Q))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        Node* node = Q-&gt;next;</span><br><span class="line">        <span class="type">int</span> data = node-&gt;data;</span><br><span class="line">        Q-&gt;data--;</span><br><span class="line">        <span class="built_in">free</span>(node);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printQueue</span><span class="params">(Node* Q)</span> &#123;</span><br><span class="line">    Node* node = Q-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(node) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>, node-&gt;data);</span><br><span class="line">        node = node-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    Node * Q = initQueue();</span><br><span class="line">    enQueue(Q,<span class="number">1</span>);</span><br><span class="line">    enQueue(Q,<span class="number">2</span>);</span><br><span class="line">    enQueue(Q,<span class="number">3</span>);</span><br><span class="line">    printQueue(Q);</span><br><span class="line">    <span class="type">int</span> i = deQueue(Q);</span><br><span class="line">    <span class="type">int</span> o = deQueue(Q);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d---&quot;</span>,o);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&lt;--&gt;\n&quot;</span>,i);</span><br><span class="line">    <span class="comment">// printf(&quot;%d&lt;--&gt;\n&quot;,o);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 循环队列 front 代表开始起点  rear 代表 要 插入点 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> front;</span><br><span class="line">    <span class="type">int</span> rear;</span><br><span class="line">    <span class="type">int</span> data[MAXSIZE];</span><br><span class="line">&#125;Queue;</span><br><span class="line">Queue* <span class="title function_">initQueue</span><span class="params">()</span> &#123;</span><br><span class="line">    Queue* Q = (Queue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">    Q-&gt;front  = Q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> Q;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">isFull</span><span class="params">(Queue* Q)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((Q-&gt;rear+ <span class="number">1</span>) % MAXSIZE == Q-&gt;front) &#123;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">enQueue</span><span class="params">(Queue* Q, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isFull(Q)) &#123;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        Q-&gt;data[Q-&gt;rear] = data;</span><br><span class="line">        Q-&gt;rear = (Q-&gt;rear + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">        <span class="keyword">return</span> TRUE; </span><br><span class="line">    &#125;         </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">isEmpty</span><span class="params">(Queue* Q)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(Q-&gt;front == Q-&gt;rear )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">deQueue</span><span class="params">(Queue* Q)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty(Q))&#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE; </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="type">int</span> data = Q-&gt;data[Q-&gt;front];</span><br><span class="line">        Q-&gt;front = (Q-&gt;front + <span class="number">1</span>) %MAXSIZE;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printQueue</span><span class="params">(Queue*Q)</span> &#123;</span><br><span class="line">    <span class="comment">// 要知道队列当前有多少元素</span></span><br><span class="line">    <span class="type">int</span> length = (Q-&gt;rear - Q-&gt;front + MAXSIZE)% MAXSIZE;</span><br><span class="line">    <span class="type">int</span> index  = Q-&gt;front; <span class="comment">// 头指针 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>; i&lt;length; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; &quot;</span>, Q-&gt;data[index]);</span><br><span class="line">        index = (index + <span class="number">1</span>) % MAXSIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NULL\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    Queue* Q = initQueue();</span><br><span class="line">    enQueue(Q, <span class="number">1</span>);</span><br><span class="line">    enQueue(Q, <span class="number">2</span>);</span><br><span class="line">    enQueue(Q, <span class="number">3</span>);</span><br><span class="line">    printQueue(Q);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h4><h3 id="串（串也是有一个线性结构）"><a href="#串（串也是有一个线性结构）" class="headerlink" title="串（串也是有一个线性结构）"></a>串（串也是有一个线性结构）</h3><p>串（字符串）    一种特殊的线性表，其数据元素为字符</p><h4 id="串的定义（子串的个数是等差数列，（n-2）-n-1-2"><a href="#串的定义（子串的个数是等差数列，（n-2）-n-1-2" class="headerlink" title="串的定义（子串的个数是等差数列，（n+2）(n-1)/2"></a>串的定义（子串的个数是等差数列，（n+2）(n-1)/2</h4><p>串中子串的长度第 n-1项 必定是 2，首项是n ，总个数是n-1</p><p>则 sum(s) = ((an+a1)<em>(n-1))/2 = ((n+2)\</em>(n-1))/2</p><p>串是仅由字符构成的有限序列，是一种线性表，一般标记为S = a1a2s3…sn 其中是串名，单引号括起来的字符序列的串值</p><h4 id="串的基本概念（空串、空格串、字串、串相等、串比较）0：48、a：65、A：97"><a href="#串的基本概念（空串、空格串、字串、串相等、串比较）0：48、a：65、A：97" class="headerlink" title="串的基本概念（空串、空格串、字串、串相等、串比较）0：48、a：65、A：97"></a>串的基本概念（空串、空格串、字串、串相等、串比较）0：48、a：65、A：97</h4><ul><li><p>空串：长度为零的串称为空串，空串不包含任何字符</p></li><li><p>空格串：由一个或多个空格组成的串，虽然空格是一个空白字符，但它也是一个字符</p></li><li><p>子串：由串中任意长度的连续字符构成的序列称为子串</p></li><li><p>串相等：指两个串长度相等，且对应序号的字符也相同</p></li><li><p>串比较：两个串比较大小时以字符的ascii码值作为实质，比较操作从两个串的第一个字符开始进行，字符的码值大者所在的串为大，若是其中一个串先结束，则以串长较大者为大</p></li></ul><h4 id="串的模式匹配（子串和模式串）"><a href="#串的模式匹配（子串和模式串）" class="headerlink" title="串的模式匹配（子串和模式串）"></a>串的模式匹配（子串和模式串）</h4><h5 id="朴素模式匹配"><a href="#朴素模式匹配" class="headerlink" title="朴素模式匹配"></a>朴素模式匹配</h5><p>时间复杂度：最好o(m) 最坏o(n*m) 平均o(m+n)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 串 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">String</span> &#123;</span></span><br><span class="line">    <span class="comment">// 记录串的值</span></span><br><span class="line">    <span class="type">char</span>* data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录串的字符数量</span></span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">&#125;String;</span><br><span class="line"></span><br><span class="line">String* <span class="title function_">initString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化字符串</span></span><br><span class="line">    String* s = (String*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(String));</span><br><span class="line">    <span class="comment">// 设置字符串为空</span></span><br><span class="line">    s-&gt;data =<span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 当前字符串的数为0 </span></span><br><span class="line">    s-&gt;len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入字符串 s 为字符串， data 为字符串值</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">stringAssign</span><span class="params">(String* s, <span class="type">char</span>* data)</span> &#123;</span><br><span class="line">    <span class="comment">// 清空 字符串 s 种已有的值</span></span><br><span class="line">    <span class="keyword">if</span> (s-&gt;data) &#123;</span><br><span class="line">        <span class="built_in">free</span>(s-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义开始字符串类的字符数为 0</span></span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 用于统计 data 字符串 有多少个字符串</span></span><br><span class="line">    <span class="type">char</span>* temp = data;</span><br><span class="line">    <span class="keyword">while</span> (*temp) &#123;</span><br><span class="line">        len++;</span><br><span class="line">        temp++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 如果没有字符 则重新初始化</span></span><br><span class="line">        s-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line">        s-&gt;len = <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 有值 则 遍历 将 值 赋值 给 string 的 data</span></span><br><span class="line">        temp = data;</span><br><span class="line">        s-&gt;len = len;</span><br><span class="line">        s-&gt;data = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>)*(len+<span class="number">1</span>));<span class="comment">// 定义开辟 多大的 字符空间</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++, temp ++)&#123;</span><br><span class="line">            s-&gt;data[i] = * temp; <span class="comment">// 遍历赋值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历字符串</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printString</span><span class="params">(String* s)</span> &#123;</span><br><span class="line">    <span class="comment">// 遍历字符串</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i  &lt; s-&gt;len; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(i == <span class="number">0</span> ?<span class="string">&quot;%c&quot;</span>:<span class="string">&quot;-&gt; %c &quot;</span>,s-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴力匹配</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">forceMatch</span><span class="params">(String* master, String* sub)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// i 是 用于遍历 master 的 个数 j 是 用于 记录 sub 的 个数</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; master-&gt;len &amp;&amp; j &lt;sub-&gt;len )&#123;</span><br><span class="line">        <span class="comment">// 判断 master 和sub 下标 对应 的 数值 是否 相同 </span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span>(master-&gt;data[i] == sub-&gt;data[j]) &#123;</span><br><span class="line">            j++;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            i = i - j +<span class="number">1</span>;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j == sub-&gt;len) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;force match success.\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;force match false.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    String* s = initString();</span><br><span class="line">    String* s1= initString();</span><br><span class="line">    stringAssign(s1, <span class="string">&quot;he0&quot;</span>);</span><br><span class="line">    printString(s1);</span><br><span class="line">    stringAssign(s, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    printString(s);</span><br><span class="line">    forceMatch(s,s1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="kmp算法"><a href="#kmp算法" class="headerlink" title="kmp算法"></a>kmp算法</h5><p>串的前缀：包含第一个字符并且不包含最后一个字符的字串</p><p>串的后缀：包含最后一个字符并且不包含第一个字符的子串</p><p>模式串中的next，第i个字符的next值 = 从 1 ~ i - 1 串中最长相等前后缀长度 +1</p><p>特殊情况：next[1] = 0 \ next[2] = 1</p><p>时间复杂度：o(n+m)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* kmp 算法 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">String</span>&#123;</span></span><br><span class="line">    <span class="type">char</span>* data;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">&#125;String;</span><br><span class="line">String* <span class="title function_">initString</span><span class="params">()</span> &#123;</span><br><span class="line">    String* s = (String*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(String));</span><br><span class="line">    s-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line">    s-&gt;len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// kmp 算法 next 求值</span></span><br><span class="line"><span class="type">int</span>* <span class="title function_">getNext</span><span class="params">(String* S)</span>  &#123;</span><br><span class="line">    <span class="type">int</span>* next = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)* S-&gt;len);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">-1</span>;</span><br><span class="line">    next[i] = j;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; S-&gt;len <span class="number">-1</span> ) &#123;</span><br><span class="line">       <span class="keyword">if</span> (j ==<span class="number">-1</span> || S-&gt;data[i] == S-&gt;data[j])&#123;</span><br><span class="line">            next[++i] = ++j ;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j = next [j];</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i = %d - i -\n&quot;</span>, i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d- &quot;</span>, S-&gt;len);</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printNext</span><span class="params">(<span class="type">int</span>* next , <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;-%d-\n&quot;</span>, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(i == <span class="number">0</span>? <span class="string">&quot;%d&quot;</span> : <span class="string">&quot;-&gt;%d&quot;</span> , next[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">kmpMatch</span><span class="params">(String* master , String* sub, <span class="type">int</span>* next)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span> ;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">while</span> (j == <span class="number">-1</span> || i &lt; master-&gt;len &amp;&amp; j &lt; sub-&gt;len) &#123;</span><br><span class="line">        <span class="keyword">if</span> (master-&gt;data[i] == sub-&gt;data[j])&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j == sub-&gt;len)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;kmp match success.\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;kmp match fail.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">stringAssign2</span><span class="params">(String* s, <span class="type">char</span>* data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s-&gt;data) &#123;</span><br><span class="line">        <span class="built_in">free</span>(s-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span>* temp = data;</span><br><span class="line">    <span class="keyword">while</span> (*temp) &#123;</span><br><span class="line">        len++;</span><br><span class="line">        temp++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>)&#123;</span><br><span class="line">        s-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line">        s-&gt;len = <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        temp = data;</span><br><span class="line">        s-&gt;len = len;</span><br><span class="line">        <span class="comment">// 有一个 \0 保存结尾</span></span><br><span class="line">        s-&gt;data = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>)*(len+<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i =<span class="number">0</span>; i &lt; len; i++, temp++)&#123;</span><br><span class="line">            s-&gt;data[i] = *temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printString</span><span class="params">(String* s)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s-&gt;len ; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>( i == <span class="number">0</span> ? <span class="string">&quot;%c&quot;</span>:<span class="string">&quot;-&gt;%c&quot;</span>,s-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* code */</span></span><br><span class="line">    String* S = initString();</span><br><span class="line">    String* S1 = initString();</span><br><span class="line">    stringAssign2(S1, <span class="string">&quot;ABCCA&quot;</span>);</span><br><span class="line">    stringAssign2(S,<span class="string">&quot;ABCBABCCADABA&quot;</span>);</span><br><span class="line">    printString(S);</span><br><span class="line">    printString(S1);</span><br><span class="line">    <span class="type">int</span>* next = getNext(S1);</span><br><span class="line">    printNext(next, S1-&gt;len);</span><br><span class="line">    kmpMatch(S,S1, next);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>一位数组：a[n] —-&gt; L 是 元素大小 类型</p><p>内存是连续的存储空间  Loc ：数组的首地址</p><p>求算地址：第i个元素的地址 = loc+i*L     </p><p>内存 a[0]    a[1]   a[2]   a[3]   a[4]   a[5]   int 类型</p><p>地址   0         4       8       12       16</p><p>二维数组：a[n][m]   数组首地址 loc ，元素大小L</p><p>a[2][2]</p><p>内存 a[0][0]  a[0][1]   a[1][0]  a[1][1]     int  类型</p><p>地址      0           4             8           12</p><p>按行优先 ： a[n][m]第 i行第j 个 元素的地址 = loc+i*L<em>m+j\</em>L  ()</p><p>按列优先：a[n][m]</p><p>内存 a[0][0] a[1][0] a[0][1] a[1][1] a[2][0]</p><p>地址       0       4              8         12         16</p><p>a[n][m] 第i行第j个元素的地址 = loc+j*n<em>L+i\</em>L  </p><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><h5 id="对称矩阵-a-i-j-a-j-i-存储-主对角线和-下三角区"><a href="#对称矩阵-a-i-j-a-j-i-存储-主对角线和-下三角区" class="headerlink" title="对称矩阵 a[i][j] = a[j][i] 存储 主对角线和 下三角区"></a>对称矩阵 a[i][j] = a[j][i] 存储 主对角线和 下三角区</h5><p>主对角线：</p><p>下三角区 i&gt;j \ 上三角区 i&lt;j</p><p>按行优先存储：存储的个数 = (n+1)n/2</p><p>第i行第j个的数组存储的位置：(i+1)i/2 + j + 1</p><p>上三角：(j+1)j/2 + i +1</p><h5 id="三角矩阵"><a href="#三角矩阵" class="headerlink" title="三角矩阵"></a>三角矩阵</h5><p>只有中间区域由数据，其他区域都是0</p><p>存储的工具从0开始：aij = 2i + j - 2</p><h5 id="稀疏矩阵-零的-个数-过多、使用三元组或十字链表进行存储"><a href="#稀疏矩阵-零的-个数-过多、使用三元组或十字链表进行存储" class="headerlink" title="稀疏矩阵 零的 个数 过多、使用三元组或十字链表进行存储"></a>稀疏矩阵 零的 个数 过多、使用三元组或十字链表进行存储</h5><p>使用三元组表的顺序存储结构 a[n][3]  a[n][0] 存 行 a[n][1]存 列  a[n][3] 存储 数值  </p><h2 id="树-一对多关系"><a href="#树-一对多关系" class="headerlink" title="树 (一对多关系)"></a>树 (一对多关系)</h2><p>树结构是一种非线性结构，该结构 一个元素可以由两个或两个以上的直接后继元素，树可以用来描述客观世界中广泛存在的层次结构</p><h3 id="树的定义（树域二叉树的定义）"><a href="#树的定义（树域二叉树的定义）" class="headerlink" title="树的定义（树域二叉树的定义）"></a>树的定义（树域二叉树的定义）</h3><p>树是是 n(n&gt;=0) 个结点的有限阶符，当n = 0 时 称为空树，在 任意一非空树(n&gt;0) 中，有且仅有一个称为根的结点，其余结点可分为m(m&gt;=0) 个互不相交的有限子集t1,t2,t3,t4,t5，其中，每个T1又是一棵树，并且称为根结点的子树</p><p>树的定义时递归的，它证明了树本身固有特性，也就是一棵树由若干棵子树构成，而子树又由更小的子树构成</p><h3 id="树的基本概念"><a href="#树的基本概念" class="headerlink" title="树的基本概念"></a>树的基本概念</h3><ol><li>双亲、孩子、兄弟，结点的子树称的根称为该结点的孩子，相应的该节点成为子节点的双亲，具有相同双亲结点的或为兄弟</li><li>结点的度：一个节点的子树的个数记为该结点的度</li><li>叶子结点：叶子结点也称为终端结点，指度为0的结点</li><li>内部结点：度不为0的结点。也称为分支结点或者非终端结点，根结点除外，分支结点也称为内部结点</li><li>结点的层次：根为第一层，根的孩子为第二层，以此类推</li><li>树的高度，一颗树的高度的最大数记为书店高度（或深度）</li></ol><h4 id="树的性质1：树中的结点总数等于树的所有结点的度数之和加1（加1指的是根节点）"><a href="#树的性质1：树中的结点总数等于树的所有结点的度数之和加1（加1指的是根节点）" class="headerlink" title="树的性质1：树中的结点总数等于树的所有结点的度数之和加1（加1指的是根节点）"></a>树的性质1：树中的结点总数等于树的所有结点的度数之和加1（加1指的是根节点）</h4><h4 id="树的性质2：度为m的树中第i层上至多有m-i-1个结点-i-gt-1"><a href="#树的性质2：度为m的树中第i层上至多有m-i-1个结点-i-gt-1" class="headerlink" title="树的性质2：度为m的树中第i层上至多有m^i-1个结点(i&gt;=1)"></a>树的性质2：度为m的树中第i层上至多有m^i-1个结点(i&gt;=1)</h4><h4 id="树的性质3：树的高度为h的m次至多有-m-b-1-m-1-个结点"><a href="#树的性质3：树的高度为h的m次至多有-m-b-1-m-1-个结点" class="headerlink" title="树的性质3：树的高度为h的m次至多有(m^b-1)/m-1 个结点"></a>树的性质3：树的高度为h的m次至多有(m^b-1)/m-1 个结点</h4><p>树的性质4：具有n个结点  、度为m的树的最小高度为logm(n(m-1)+1)</p><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>二叉树是n个结点的有限阶符，它或者是空树，或者是由一个根结点及两个不相交的且分别称为左、右子树的二叉树</p><p>二叉树任意结点的度最大只能为2</p><ol><li><p>二叉树性质1：第i层上最多有2^(i-1)个结点</p></li><li><p>二叉树性质2：高度为h的二叉树最多有2^h-1个结点</p></li><li><p>二叉树性质3：对于任何一棵二叉树，度为0的结点树等于度为2得到结点树+1</p></li><li><p>二叉树性质4：具有n个结点的完全二叉树的高度为log2(n)+1 取下限 或者log2(n+1) 取上限</p></li></ol><h4 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h4><h4 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h4><h4 id="非完全二叉树"><a href="#非完全二叉树" class="headerlink" title="非完全二叉树"></a>非完全二叉树</h4>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> c 的 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于ssm框架学习</title>
      <link href="/2024/05/02/ssm/"/>
      <url>/2024/05/02/ssm/</url>
      
        <content type="html"><![CDATA[<h1 id="1、Mybatis环境部署"><a href="#1、Mybatis环境部署" class="headerlink" title="1、Mybatis环境部署"></a>1、Mybatis环境部署</h1><p>1、创建maven工程mybatis<br>2、配置相关依赖<br>3、添加  </p><p>2、MyBatis工作原理  </p><p>3.1 动态sql中的元素<br>元素</p><p><if> : 判断 语句，用于条件判断</p><p><choose>(<when><otherwise>): 相当于 java 中switch</p><p><where> ： 简化sql 语句中 where 判断</p><p><trim>： 可以灵活去除多余的关键字</p><p><set> : 用于sql语句的动态更新</p><p><foreach> ：循环语句，常用于in 语句 等列举条件</p><h3 id="mybatis-的-关联映射"><a href="#mybatis-的-关联映射" class="headerlink" title="mybatis 的 关联映射"></a>mybatis 的 关联映射</h3><ul><li>关联映射<font color="pink">- 了解数据表之间的三种关系- 了解对象之间的三种关系- 熟悉关联关系中的嵌套查询和嵌套结果- 掌握一对一关联映射- 多对多关联映射- 熟悉mybatis的缓存机制  </font></li></ul><p>通过关联映射可以很好的处理表与表之间、对象与对象之间的关系的关联映射关系</p><h5 id="1-一对一关系"><a href="#1-一对一关系" class="headerlink" title="1.一对一关系"></a>1.一对一关系</h5><pre><code>* 就是在类中定义与之关联的类的对象作为属性* 例如：A类中定义B类 对象b 作为 属性* B类中定义A 类 对象a 作为属性</code></pre><font size="3" color="pink">伪代码：</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentA</span>&#123; <span class="comment">// 学生</span></span><br><span class="line">    StudentCarB b;<span class="comment">// 学生卡</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentCardB</span>&#123; <span class="comment">// 学生卡</span></span><br><span class="line">    StudentA a;<span class="comment">// 学生</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>- 查询方法    - 1. 嵌套查询方法        - 该方法需要执行多条sql查询语句<br>并将sql查询语句进行关联    - 2. 嵌套结果集查询方法        - 该方法需要先写出sql语句的联合查询语句，<br>将多个表进行组合查询，<br>并将查询后的结果集的值 进行 一对一 映射        - 更加推荐直接使用嵌套结果集的方式    - 3. 在mybatis 中 使用\<association>元素进行 多表之间的查询结果映射，<br>使用结果映射（resultMap）的方法##### 2.一对多关系    * 就是一个A类对象对应多个B类对象的情况    * 列如，定义在A类中，定义一个B类对象的 集合 作为A类的属性    * 在B类中，定义A类对象a 作为B类的属性<font size="3" color="pink">伪代码：</font><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassesA</span>&#123; <span class="comment">// 班级</span></span><br><span class="line">    List&lt;StudentB&gt; b;<span class="comment">// 班级学生集合</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentB</span>&#123; <span class="comment">// 学生</span></span><br><span class="line">    ClassesA a; <span class="comment">// 所属班级</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>- 查询方法    - 1. 嵌套查询方法        - 该方法需要执行多条sql查询语句<br>并将sql查询语句进行关联    - 2. 嵌套结果集查询方法        - 该方法需要先写出sql语句的联合查询语句，<br>将多个表进行组合查询，<br>并将查询后的结果集的值 进行 一对一 映射        - 更加推荐直接使用嵌套结果集的方式    - 3. 在mybatis 中 使用\<collection>元素进行 多表之间的查询结果映射，<br>使用结果映射（resultMap）的方法        - 其中ofType属性可以看作是集合的泛型类型##### 3.多对多关系     * 在两个相互关联的类中，都可以定义多个与之关联的类的对象    *例如：在 A类中定义 B类对象的集合作为属性    *在B类中定义，A类对象的集合作为属性<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Orders</span>&#123; <span class="comment">// 订单</span></span><br><span class="line">    List&lt;Commondity&gt; b;<span class="comment">// 多种购物商品</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Commodity</span>&#123; <span class="comment">// 商品</span></span><br><span class="line">    List&lt;Orders&gt; a;<span class="comment">// 多个订单 购物 该商品</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>##### mybatis缓存机制1. <font color="pink">mybatis 的一级缓存</font><h4 id="mybatis-注解开发"><a href="#mybatis-注解开发" class="headerlink" title="mybatis 注解开发"></a>mybatis 注解开发</h4><ol><li>掌握基于注解的单表增删改查</li><li>熟悉基于注解的一对一关联查询</li><li>熟悉基于注解的一对多关联查询</li><li>熟悉基于注解的多对多关联查询</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/01/hello-world/"/>
      <url>/2024/05/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
